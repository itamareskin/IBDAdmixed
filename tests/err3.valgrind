==3787== Memcheck, a memory error detector
==3787== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==3787== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==3787== Command: python test4.py
==3787== 
==3787== Invalid read of size 8
==3787==    at 0x6BECA28: __pyx_pw_3IBD_7LDModel_7LDModel_7read_from_bgl_file(_object*, _object*) (LDModel.cpp:10594)
==3787==    by 0x6BE40DC: __pyx_tp_new_3IBD_7LDModel_LDModel(_typeobject*, _object*, _object*) (LDModel.cpp:10389)
==3787==    by 0x4EDA782: type_call (typeobject.c:729)
==3787==    by 0x4E7DBD7: PyObject_Call (abstract.c:2529)
==3787==    by 0x4F20FA1: PyEval_EvalFrameEx (ceval.c:4239)
==3787==    by 0x4F27C08: PyEval_EvalCodeEx (ceval.c:3253)
==3787==    by 0x4F27C81: PyEval_EvalCode (ceval.c:667)
==3787==    by 0x4F4B350: PyRun_FileExFlags (pythonrun.c:1370)
==3787==    by 0x4F4B5F6: PyRun_SimpleFileExFlags (pythonrun.c:948)
==3787==    by 0x4F5DE15: Py_Main (main.c:641)
==3787==    by 0x584DEC4: (below main) (libc-start.c:287)
==3787==  Address 0x15e49588 is not stack'd, malloc'd or (recently) free'd
==3787== 
==3787== Invalid read of size 8
==3787==    at 0x6BECA2C: __pyx_pw_3IBD_7LDModel_7LDModel_7read_from_bgl_file(_object*, _object*) (LDModel.cpp:10595)
==3787==    by 0x6BE40DC: __pyx_tp_new_3IBD_7LDModel_LDModel(_typeobject*, _object*, _object*) (LDModel.cpp:10389)
==3787==    by 0x4EDA782: type_call (typeobject.c:729)
==3787==    by 0x4E7DBD7: PyObject_Call (abstract.c:2529)
==3787==    by 0x4F20FA1: PyEval_EvalFrameEx (ceval.c:4239)
==3787==    by 0x4F27C08: PyEval_EvalCodeEx (ceval.c:3253)
==3787==    by 0x4F27C81: PyEval_EvalCode (ceval.c:667)
==3787==    by 0x4F4B350: PyRun_FileExFlags (pythonrun.c:1370)
==3787==    by 0x4F4B5F6: PyRun_SimpleFileExFlags (pythonrun.c:948)
==3787==    by 0x4F5DE15: Py_Main (main.c:641)
==3787==    by 0x584DEC4: (below main) (libc-start.c:287)
==3787==  Address 0x50 is not stack'd, malloc'd or (recently) free'd
==3787== 
==3787== 
==3787== Process terminating with default action of signal 11 (SIGSEGV)
==3787==  Access not within mapped region at address 0x50
==3787==    at 0x6BECA2C: __pyx_pw_3IBD_7LDModel_7LDModel_7read_from_bgl_file(_object*, _object*) (LDModel.cpp:10595)
==3787==    by 0x6BE40DC: __pyx_tp_new_3IBD_7LDModel_LDModel(_typeobject*, _object*, _object*) (LDModel.cpp:10389)
==3787==    by 0x4EDA782: type_call (typeobject.c:729)
==3787==    by 0x4E7DBD7: PyObject_Call (abstract.c:2529)
==3787==    by 0x4F20FA1: PyEval_EvalFrameEx (ceval.c:4239)
==3787==    by 0x4F27C08: PyEval_EvalCodeEx (ceval.c:3253)
==3787==    by 0x4F27C81: PyEval_EvalCode (ceval.c:667)
==3787==    by 0x4F4B350: PyRun_FileExFlags (pythonrun.c:1370)
==3787==    by 0x4F4B5F6: PyRun_SimpleFileExFlags (pythonrun.c:948)
==3787==    by 0x4F5DE15: Py_Main (main.c:641)
==3787==    by 0x584DEC4: (below main) (libc-start.c:287)
==3787==  If you believe this happened as a result of a stack
==3787==  overflow in your program's main thread (unlikely but
==3787==  possible), you can try to increase the size of the
==3787==  main thread stack using the --main-stacksize= flag.
==3787==  The main thread stack size used in this run was 8388608.
==3787== 
==3787== HEAP SUMMARY:
==3787==     in use at exit: 293,690,985 bytes in 752,247 blocks
==3787==   total heap usage: 5,098,974 allocs, 4,346,727 frees, 1,884,313,364 bytes allocated
==3787== 
==3787== LEAK SUMMARY:
==3787==    definitely lost: 0 bytes in 0 blocks
==3787==    indirectly lost: 0 bytes in 0 blocks
==3787==      possibly lost: 1,519,792 bytes in 1,062 blocks
==3787==    still reachable: 292,171,161 bytes in 751,184 blocks
==3787==         suppressed: 32 bytes in 1 blocks
==3787== Rerun with --leak-check=full to see details of leaked memory
==3787== 
==3787== For counts of detected and suppressed errors, rerun with: -v
==3787== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 4267 from 176)
