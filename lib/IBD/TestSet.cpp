/* Generated by Cython 0.20.1 on Thu May 29 10:11:42 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20_1"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__IBD__TestSet
#define __PYX_HAVE_API__IBD__TestSet
#include "string.h"
#include "structs.h"
#include "stdlib.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "TestSet.pyx",
  "TestSet.pxd",
  "GeneticMap.pxd",
  "LDModel.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_3IBD_10GeneticMap_GeneticMap;
struct __pyx_obj_3IBD_7LDModel_LDModel;
struct __pyx_obj_3IBD_7TestSet_TestSet;
struct __pyx_obj_3IBD_7TestSet_GenotypePair;
struct __pyx_obj_3IBD_7TestSet_Genotype;
struct __pyx_opt_args_3IBD_7TestSet_12GenotypePair_generate_random_haps_inplace;
struct __pyx_opt_args_3IBD_7TestSet_8Genotype_generate_random_haps_inplace;

/* "IBD\TestSet.pxd":45
 *         return self._haplos[3][snp_idx]
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=*)             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_ibd_segment(self, int start_snp, int snp_num)
 */
struct __pyx_opt_args_3IBD_7TestSet_12GenotypePair_generate_random_haps_inplace {
  int __pyx_n;
  int snp_num;
};

/* "IBD\TestSet.pxd":59
 *         return self._haplos[1][snp_idx]
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_3IBD_7TestSet_8Genotype_generate_random_haps_inplace {
  int __pyx_n;
  int snp_num;
};

/* "GeneticMap.pxd":6
 * #cython.nonecheck=False
 * 
 * cdef class GeneticMap(object):             # <<<<<<<<<<<<<<
 *     '''
 *     represents the genetic map data for a chromosome
 */
struct __pyx_obj_3IBD_10GeneticMap_GeneticMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_3IBD_10GeneticMap_GeneticMap *__pyx_vtab;
  int _snp_num;
  long *_position;
  double *_genetic_dist;
};


/* "LDModel.pxd":32
 *     gen_map_entry create_gen_map_entry(int position, double recomb_rate, double genetic_dist)
 * 
 * cdef class LDModel(object):             # <<<<<<<<<<<<<<
 *     '''
 *     Hidden Markov Model for a single ancestral population
 */
struct __pyx_obj_3IBD_7LDModel_LDModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_3IBD_7LDModel_LDModel *__pyx_vtab;
  double eps;
  double _alpha;
  int _anc;
  double _t_0_1;
  double _t_1_0;
  double *_pi;
  state **_states;
  double ***_trans;
  int ***_trans_idx;
  double ***_back_trans;
  int ***_back_trans_idx;
  char **_snp_ids;
  int *_layer_state_nums;
  struct __pyx_obj_3IBD_10GeneticMap_GeneticMap *_gm;
  int _snp_num;
  char _allele_0;
  char _allele_1;
};


/* "IBD\TestSet.pxd":10
 * from LDModel cimport LDModel
 * 
 * cdef class TestSet(object):             # <<<<<<<<<<<<<<
 * 
 *     # number of snps (layers) in the model
 */
struct __pyx_obj_3IBD_7TestSet_TestSet {
  PyObject_HEAD
  struct __pyx_vtabstruct_3IBD_7TestSet_TestSet *__pyx_vtab;
  int _snp_num;
  int _nr_haplos;
  char _allele_0;
  char _allele_1;
  bool **_haplos;
};


/* "IBD\TestSet.pxd":31
 *     cpdef generate_composite_individuals(self, LDModel m, num_inds)
 * 
 * cdef class GenotypePair(TestSet):             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr1(self, snp_idx):
 */
struct __pyx_obj_3IBD_7TestSet_GenotypePair {
  struct __pyx_obj_3IBD_7TestSet_TestSet __pyx_base;
};


/* "IBD\TestSet.pxd":51
 *     cpdef Genotype get_genotype(self, int ind)
 * 
 * cdef class Genotype(TestSet):             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr1(self, snp_idx):
 */
struct __pyx_obj_3IBD_7TestSet_Genotype {
  struct __pyx_obj_3IBD_7TestSet_TestSet __pyx_base;
};



/* "GeneticMap.pxd":6
 * #cython.nonecheck=False
 * 
 * cdef class GeneticMap(object):             # <<<<<<<<<<<<<<
 *     '''
 *     represents the genetic map data for a chromosome
 */

struct __pyx_vtabstruct_3IBD_10GeneticMap_GeneticMap {
  struct __pyx_obj_3IBD_10GeneticMap_GeneticMap *(*get_slice)(struct __pyx_obj_3IBD_10GeneticMap_GeneticMap *, int, int, int __pyx_skip_dispatch);
  PyObject *(*get_position_dict)(struct __pyx_obj_3IBD_10GeneticMap_GeneticMap *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3IBD_10GeneticMap_GeneticMap *__pyx_vtabptr_3IBD_10GeneticMap_GeneticMap;


/* "LDModel.pxd":32
 *     gen_map_entry create_gen_map_entry(int position, double recomb_rate, double genetic_dist)
 * 
 * cdef class LDModel(object):             # <<<<<<<<<<<<<<
 *     '''
 *     Hidden Markov Model for a single ancestral population
 */

struct __pyx_vtabstruct_3IBD_7LDModel_LDModel {
  struct __pyx_obj_3IBD_7LDModel_LDModel *(*get_slice_model)(struct __pyx_obj_3IBD_7LDModel_LDModel *, int, int, int __pyx_skip_dispatch);
  int (*start_position)(struct __pyx_obj_3IBD_7LDModel_LDModel *, int __pyx_skip_dispatch);
  int (*end_position)(struct __pyx_obj_3IBD_7LDModel_LDModel *, int __pyx_skip_dispatch);
  int (*get_position)(struct __pyx_obj_3IBD_7LDModel_LDModel *, int, int __pyx_skip_dispatch);
  bool *(*generate_random_hap)(struct __pyx_obj_3IBD_7LDModel_LDModel *, int);
};
static struct __pyx_vtabstruct_3IBD_7LDModel_LDModel *__pyx_vtabptr_3IBD_7LDModel_LDModel;


/* "IBD\TestSet.pyx":16
 *     int strlen(char *s)
 * 
 * cdef class TestSet(object):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_3IBD_7TestSet_TestSet {
  struct __pyx_obj_3IBD_7TestSet_TestSet *(*get_slice)(struct __pyx_obj_3IBD_7TestSet_TestSet *, int, int, int __pyx_skip_dispatch);
  struct __pyx_obj_3IBD_7TestSet_GenotypePair *(*get_genotype_pair)(struct __pyx_obj_3IBD_7TestSet_TestSet *, int, int, int __pyx_skip_dispatch);
  PyObject *(*generate_composite_individuals)(struct __pyx_obj_3IBD_7TestSet_TestSet *, struct __pyx_obj_3IBD_7LDModel_LDModel *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3IBD_7TestSet_TestSet *__pyx_vtabptr_3IBD_7TestSet_TestSet;


/* "IBD\TestSet.pyx":185
 *                 #new_haplos[i][start:end] = self._haplos[j][start:end]
 * 
 * cdef class GenotypePair(TestSet):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_3IBD_7TestSet_GenotypePair {
  struct __pyx_vtabstruct_3IBD_7TestSet_TestSet __pyx_base;
  bool (*chr1)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
  bool (*chr2)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
  bool (*chr3)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
  bool (*chr4)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
  PyObject *(*generate_random_haps_inplace)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, struct __pyx_obj_3IBD_7LDModel_LDModel *, int __pyx_skip_dispatch, struct __pyx_opt_args_3IBD_7TestSet_12GenotypePair_generate_random_haps_inplace *__pyx_optional_args);
  PyObject *(*set_ibd_segment)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, int, int, int __pyx_skip_dispatch);
  struct __pyx_obj_3IBD_7TestSet_Genotype *(*get_genotype)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3IBD_7TestSet_GenotypePair *__pyx_vtabptr_3IBD_7TestSet_GenotypePair;
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr1(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr2(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr3(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr4(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);


/* "IBD\TestSet.pyx":216
 *         return other
 * 
 * cdef class Genotype(TestSet):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_3IBD_7TestSet_Genotype {
  struct __pyx_vtabstruct_3IBD_7TestSet_TestSet __pyx_base;
  bool (*chr1)(struct __pyx_obj_3IBD_7TestSet_Genotype *, PyObject *);
  bool (*chr2)(struct __pyx_obj_3IBD_7TestSet_Genotype *, PyObject *);
  PyObject *(*generate_random_haps_inplace)(struct __pyx_obj_3IBD_7TestSet_Genotype *, struct __pyx_obj_3IBD_7LDModel_LDModel *, int __pyx_skip_dispatch, struct __pyx_opt_args_3IBD_7TestSet_8Genotype_generate_random_haps_inplace *__pyx_optional_args);
};
static struct __pyx_vtabstruct_3IBD_7TestSet_Genotype *__pyx_vtabptr_3IBD_7TestSet_Genotype;
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_8Genotype_chr1(struct __pyx_obj_3IBD_7TestSet_Genotype *, PyObject *);
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_8Genotype_chr2(struct __pyx_obj_3IBD_7TestSet_Genotype *, PyObject *);
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON && (PY_VERSION_HEX >= 0x03020000 || PY_MAJOR_VERSION < 3 && PY_VERSION_HEX >= 0x02070000)
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void* __Pyx_GetVtable(PyObject *dict); /*proto*/

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp' */

/* Module declarations from 'IBD.GeneticMap' */
static PyTypeObject *__pyx_ptype_3IBD_10GeneticMap_GeneticMap = 0;

/* Module declarations from 'IBD.LDModel' */
static PyTypeObject *__pyx_ptype_3IBD_7LDModel_LDModel = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'IBD.TestSet' */
static PyTypeObject *__pyx_ptype_3IBD_7TestSet_TestSet = 0;
static PyTypeObject *__pyx_ptype_3IBD_7TestSet_GenotypePair = 0;
static PyTypeObject *__pyx_ptype_3IBD_7TestSet_Genotype = 0;
#define __Pyx_MODULE_NAME "IBD.TestSet"
int __pyx_module_is_main_IBD__TestSet = 0;

/* Implementation of 'IBD.TestSet' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_exit;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_ValueError;
static int __pyx_pf_3IBD_7TestSet_7TestSet___cinit__(CYTHON_UNUSED struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_2get_slice(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, int __pyx_v_start_snp, int __pyx_v_snp_num); /* proto */
static void __pyx_pf_3IBD_7TestSet_7TestSet_4__dealloc__(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_6get_genotype_pair(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, int __pyx_v_ind1, int __pyx_v_ind2); /* proto */
static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_8read_haplos(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, PyObject *__pyx_v_file_name, int __pyx_v_max_snp_num, PyObject *__pyx_v_ids, PyObject *__pyx_v_scramble); /* proto */
static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_10write_haplos(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, PyObject *__pyx_v_file_name); /* proto */
static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_12generate_composite_individuals(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m, PyObject *__pyx_v_num_inds); /* proto */
static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_8_snp_num___get__(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self); /* proto */
static int __pyx_pf_3IBD_7TestSet_7TestSet_8_snp_num_2__set__(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_10_nr_haplos___get__(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self); /* proto */
static int __pyx_pf_3IBD_7TestSet_7TestSet_10_nr_haplos_2__set__(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3IBD_7TestSet_12GenotypePair___cinit__(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_7TestSet_12GenotypePair_2generate_random_haps_inplace(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m, int __pyx_v_snp_num); /* proto */
static PyObject *__pyx_pf_3IBD_7TestSet_12GenotypePair_4set_ibd_segment(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, int __pyx_v_start_snp, int __pyx_v_snp_num); /* proto */
static PyObject *__pyx_pf_3IBD_7TestSet_12GenotypePair_6get_genotype(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, int __pyx_v_ind); /* proto */
static int __pyx_pf_3IBD_7TestSet_8Genotype___cinit__(struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_7TestSet_8Genotype_2generate_random_haps_inplace(struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_v_self, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m, int __pyx_v_snp_num); /* proto */
static PyObject *__pyx_tp_new_3IBD_7TestSet_TestSet(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IBD_7TestSet_GenotypePair(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3IBD_7TestSet_Genotype(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_d[] = "%d,";
static char __pyx_k_m[] = "m";
static char __pyx_k_w[] = "w";
static char __pyx_k__2[] = "\r\n";
static char __pyx_k_os[] = "os";
static char __pyx_k_rU[] = "rU";
static char __pyx_k__11[] = "\n";
static char __pyx_k_end[] = "end";
static char __pyx_k_ids[] = "ids";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_exit[] = "exit";
static char __pyx_k_file[] = "file";
static char __pyx_k_ind1[] = "ind1";
static char __pyx_k_ind2[] = "ind2";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_open[] = "open";
static char __pyx_k_path[] = "path";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_enter[] = "__enter__";
static char __pyx_k_flush[] = "flush";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_write[] = "write";
static char __pyx_k_exists[] = "exists";
static char __pyx_k_exit_2[] = "__exit__";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_islice[] = "islice";
static char __pyx_k_random[] = "random";
static char __pyx_k_rstrip[] = "rstrip";
static char __pyx_k_stdout[] = "stdout";
static char __pyx_k_randint[] = "randint";
static char __pyx_k_snp_num[] = "snp_num";
static char __pyx_k_num_inds[] = "num_inds";
static char __pyx_k_position[] = "_position";
static char __pyx_k_scramble[] = "scramble";
static char __pyx_k_the_file[] = "the file: ";
static char __pyx_k_file_name[] = "file_name";
static char __pyx_k_get_slice[] = "get_slice";
static char __pyx_k_itertools[] = "itertools";
static char __pyx_k_start_snp[] = "start_snp";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_xreadlines[] = "xreadlines";
static char __pyx_k_max_snp_num[] = "max_snp_num";
static char __pyx_k_get_genotype[] = "get_genotype";
static char __pyx_k_last_position[] = "last position: ";
static char __pyx_k_does_not_exist[] = " does not exist!";
static char __pyx_k_first_position[] = "first position: ";
static char __pyx_k_set_ibd_segment[] = "set_ibd_segment";
static char __pyx_k_get_genotype_pair[] = "get_genotype_pair";
static char __pyx_k_unidentified_allele[] = "unidentified allele: ";
static char __pyx_k_composing_individual[] = "composing individual ";
static char __pyx_k_finished_reading_haplos[] = "finished reading haplos.";
static char __pyx_k_reading_from_haplos_file[] = "reading from haplos file: ";
static char __pyx_k_generate_random_haps_inplace[] = "generate_random_haps_inplace";
static char __pyx_k_combinations_with_replacement[] = "combinations_with_replacement";
static char __pyx_k_generate_composite_individuals[] = "generate_composite_individuals";
static char __pyx_k_bad_number_of_haplotypes_quittin[] = "bad number of haplotypes. quitting...";
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__11;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s_bad_number_of_haplotypes_quittin;
static PyObject *__pyx_n_s_combinations_with_replacement;
static PyObject *__pyx_kp_s_composing_individual;
static PyObject *__pyx_kp_s_d;
static PyObject *__pyx_kp_s_does_not_exist;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_exists;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_exit_2;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_file_name;
static PyObject *__pyx_kp_s_finished_reading_haplos;
static PyObject *__pyx_kp_s_first_position;
static PyObject *__pyx_n_s_flush;
static PyObject *__pyx_n_s_generate_composite_individuals;
static PyObject *__pyx_n_s_generate_random_haps_inplace;
static PyObject *__pyx_n_s_get_genotype;
static PyObject *__pyx_n_s_get_genotype_pair;
static PyObject *__pyx_n_s_get_slice;
static PyObject *__pyx_n_s_ids;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_ind1;
static PyObject *__pyx_n_s_ind2;
static PyObject *__pyx_n_s_islice;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_kp_s_last_position;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_snp_num;
static PyObject *__pyx_n_s_num_inds;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_rU;
static PyObject *__pyx_n_s_randint;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_kp_s_reading_from_haplos_file;
static PyObject *__pyx_n_s_rstrip;
static PyObject *__pyx_n_s_scramble;
static PyObject *__pyx_n_s_set_ibd_segment;
static PyObject *__pyx_n_s_snp_num;
static PyObject *__pyx_n_s_start_snp;
static PyObject *__pyx_n_s_stdout;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_the_file;
static PyObject *__pyx_kp_s_unidentified_allele;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_xreadlines;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_200;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;

/* "IBD\TestSet.pyx":18
 * cdef class TestSet(object):
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_3IBD_7TestSet_7TestSet_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IBD_7TestSet_7TestSet_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_3IBD_7TestSet_7TestSet___cinit__(((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_7TestSet_7TestSet___cinit__(CYTHON_UNUSED struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pyx":21
 *         pass
 * 
 *     cpdef TestSet get_slice(self, int start_snp, int snp_num):             # <<<<<<<<<<<<<<
 *         this_type = type(self)
 *         cdef TestSet other = this_type()
 */

static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_3get_slice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_f_3IBD_7TestSet_7TestSet_get_slice(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, int __pyx_v_start_snp, int __pyx_v_snp_num, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_this_type = NULL;
  struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_other = 0;
  int __pyx_v_hap_idx;
  int __pyx_v_snp_idx;
  struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_slice); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_7TestSet_7TestSet_3get_slice)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_start_snp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_snp_num); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_3IBD_7TestSet_TestSet))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\TestSet.pyx":22
 * 
 *     cpdef TestSet get_slice(self, int start_snp, int snp_num):
 *         this_type = type(self)             # <<<<<<<<<<<<<<
 *         cdef TestSet other = this_type()
 *         other._nr_haplos = self._nr_haplos
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
  __pyx_v_this_type = ((PyObject*)((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

  /* "IBD\TestSet.pyx":23
 *     cpdef TestSet get_slice(self, int start_snp, int snp_num):
 *         this_type = type(self)
 *         cdef TestSet other = this_type()             # <<<<<<<<<<<<<<
 *         other._nr_haplos = self._nr_haplos
 *         other._snp_num = min(snp_num, self._snp_num - start_snp)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_this_type), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3IBD_7TestSet_TestSet))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_other = ((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IBD\TestSet.pyx":24
 *         this_type = type(self)
 *         cdef TestSet other = this_type()
 *         other._nr_haplos = self._nr_haplos             # <<<<<<<<<<<<<<
 *         other._snp_num = min(snp_num, self._snp_num - start_snp)
 *         other._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 */
  __pyx_t_5 = __pyx_v_self->_nr_haplos;
  __pyx_v_other->_nr_haplos = __pyx_t_5;

  /* "IBD\TestSet.pyx":25
 *         cdef TestSet other = this_type()
 *         other._nr_haplos = self._nr_haplos
 *         other._snp_num = min(snp_num, self._snp_num - start_snp)             # <<<<<<<<<<<<<<
 *         other._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         cdef int hap_idx
 */
  __pyx_t_5 = (__pyx_v_self->_snp_num - __pyx_v_start_snp);
  __pyx_t_6 = __pyx_v_snp_num;
  if (((__pyx_t_5 < __pyx_t_6) != 0)) {
    __pyx_t_7 = __pyx_t_5;
  } else {
    __pyx_t_7 = __pyx_t_6;
  }
  __pyx_v_other->_snp_num = __pyx_t_7;

  /* "IBD\TestSet.pyx":26
 *         other._nr_haplos = self._nr_haplos
 *         other._snp_num = min(snp_num, self._snp_num - start_snp)
 *         other._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))             # <<<<<<<<<<<<<<
 *         cdef int hap_idx
 *         cdef int snp_idx
 */
  __pyx_v_other->_haplos = ((bool **)malloc((__pyx_v_self->_nr_haplos * (sizeof(bool *)))));

  /* "IBD\TestSet.pyx":29
 *         cdef int hap_idx
 *         cdef int snp_idx
 *         for hap_idx in range(self._nr_haplos):             # <<<<<<<<<<<<<<
 *             other._haplos[hap_idx] = <bool *> malloc((other._snp_num) * sizeof(bool))
 *             #TODO: change this to pointer arithmetics instead of copy
 */
  __pyx_t_7 = __pyx_v_self->_nr_haplos;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_7; __pyx_t_5+=1) {
    __pyx_v_hap_idx = __pyx_t_5;

    /* "IBD\TestSet.pyx":30
 *         cdef int snp_idx
 *         for hap_idx in range(self._nr_haplos):
 *             other._haplos[hap_idx] = <bool *> malloc((other._snp_num) * sizeof(bool))             # <<<<<<<<<<<<<<
 *             #TODO: change this to pointer arithmetics instead of copy
 *             for snp_idx in range(other._snp_num):
 */
    (__pyx_v_other->_haplos[__pyx_v_hap_idx]) = ((bool *)malloc((__pyx_v_other->_snp_num * (sizeof(bool)))));

    /* "IBD\TestSet.pyx":32
 *             other._haplos[hap_idx] = <bool *> malloc((other._snp_num) * sizeof(bool))
 *             #TODO: change this to pointer arithmetics instead of copy
 *             for snp_idx in range(other._snp_num):             # <<<<<<<<<<<<<<
 *                 other._haplos[hap_idx][snp_idx] = self._haplos[hap_idx][snp_idx+start_snp]
 *         return other
 */
    __pyx_t_6 = __pyx_v_other->_snp_num;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_6; __pyx_t_8+=1) {
      __pyx_v_snp_idx = __pyx_t_8;

      /* "IBD\TestSet.pyx":33
 *             #TODO: change this to pointer arithmetics instead of copy
 *             for snp_idx in range(other._snp_num):
 *                 other._haplos[hap_idx][snp_idx] = self._haplos[hap_idx][snp_idx+start_snp]             # <<<<<<<<<<<<<<
 *         return other
 * 
 */
      ((__pyx_v_other->_haplos[__pyx_v_hap_idx])[__pyx_v_snp_idx]) = ((__pyx_v_self->_haplos[__pyx_v_hap_idx])[(__pyx_v_snp_idx + __pyx_v_start_snp)]);
    }
  }

  /* "IBD\TestSet.pyx":34
 *             for snp_idx in range(other._snp_num):
 *                 other._haplos[hap_idx][snp_idx] = self._haplos[hap_idx][snp_idx+start_snp]
 *         return other             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_other));
  __pyx_r = __pyx_v_other;
  goto __pyx_L0;

  /* "IBD\TestSet.pyx":21
 *         pass
 * 
 *     cpdef TestSet get_slice(self, int start_snp, int snp_num):             # <<<<<<<<<<<<<<
 *         this_type = type(self)
 *         cdef TestSet other = this_type()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("IBD.TestSet.TestSet.get_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_this_type);
  __Pyx_XDECREF((PyObject *)__pyx_v_other);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_3get_slice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_3get_slice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_start_snp;
  int __pyx_v_snp_num;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_slice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_snp,&__pyx_n_s_snp_num,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_snp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_snp_num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_slice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_slice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_start_snp = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_start_snp == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_snp_num = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_snp_num == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_slice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("IBD.TestSet.TestSet.get_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IBD_7TestSet_7TestSet_2get_slice(((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_v_self), __pyx_v_start_snp, __pyx_v_snp_num);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_2get_slice(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, int __pyx_v_start_snp, int __pyx_v_snp_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3IBD_7TestSet_TestSet *)__pyx_v_self->__pyx_vtab)->get_slice(__pyx_v_self, __pyx_v_start_snp, __pyx_v_snp_num, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.TestSet.TestSet.get_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pyx":36
 *         return other
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef int hap_idx
 *         for hap_idx in range(self._nr_haplos):
 */

/* Python wrapper */
static void __pyx_pw_3IBD_7TestSet_7TestSet_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3IBD_7TestSet_7TestSet_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3IBD_7TestSet_7TestSet_4__dealloc__(((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3IBD_7TestSet_7TestSet_4__dealloc__(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self) {
  int __pyx_v_hap_idx;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "IBD\TestSet.pyx":38
 *     def __dealloc__(self):
 *         cdef int hap_idx
 *         for hap_idx in range(self._nr_haplos):             # <<<<<<<<<<<<<<
 *             free(self._haplos[hap_idx])
 *         free(self._haplos)
 */
  __pyx_t_1 = __pyx_v_self->_nr_haplos;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_hap_idx = __pyx_t_2;

    /* "IBD\TestSet.pyx":39
 *         cdef int hap_idx
 *         for hap_idx in range(self._nr_haplos):
 *             free(self._haplos[hap_idx])             # <<<<<<<<<<<<<<
 *         free(self._haplos)
 * 
 */
    free((__pyx_v_self->_haplos[__pyx_v_hap_idx]));
  }

  /* "IBD\TestSet.pyx":40
 *         for hap_idx in range(self._nr_haplos):
 *             free(self._haplos[hap_idx])
 *         free(self._haplos)             # <<<<<<<<<<<<<<
 * 
 *     cpdef GenotypePair get_genotype_pair(self, int ind1, int ind2):
 */
  free(__pyx_v_self->_haplos);

  /* "IBD\TestSet.pyx":36
 *         return other
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef int hap_idx
 *         for hap_idx in range(self._nr_haplos):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "IBD\TestSet.pyx":42
 *         free(self._haplos)
 * 
 *     cpdef GenotypePair get_genotype_pair(self, int ind1, int ind2):             # <<<<<<<<<<<<<<
 *         '''
 *         ind1 and ind2 should be zero based
 */

static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_7get_genotype_pair(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_f_3IBD_7TestSet_7TestSet_get_genotype_pair(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, int __pyx_v_ind1, int __pyx_v_ind2, int __pyx_skip_dispatch) {
  CYTHON_UNUSED PyObject *__pyx_v_this_type = NULL;
  struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_other = 0;
  int __pyx_v_hap_idx;
  int __pyx_v_snp_idx;
  struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_genotype_pair", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_genotype_pair); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_7TestSet_7TestSet_7get_genotype_pair)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ind1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_ind2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_3IBD_7TestSet_GenotypePair))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_3IBD_7TestSet_GenotypePair *)__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\TestSet.pyx":46
 *         ind1 and ind2 should be zero based
 *         '''
 *         this_type = type(self)             # <<<<<<<<<<<<<<
 *         cdef GenotypePair other = GenotypePair()
 *         other._snp_num = self._snp_num
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
  __pyx_v_this_type = ((PyObject*)((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

  /* "IBD\TestSet.pyx":47
 *         '''
 *         this_type = type(self)
 *         cdef GenotypePair other = GenotypePair()             # <<<<<<<<<<<<<<
 *         other._snp_num = self._snp_num
 *         other._haplos = <bool **> malloc(other._nr_haplos * sizeof(bool *))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3IBD_7TestSet_GenotypePair)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_other = ((struct __pyx_obj_3IBD_7TestSet_GenotypePair *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IBD\TestSet.pyx":48
 *         this_type = type(self)
 *         cdef GenotypePair other = GenotypePair()
 *         other._snp_num = self._snp_num             # <<<<<<<<<<<<<<
 *         other._haplos = <bool **> malloc(other._nr_haplos * sizeof(bool *))
 *         cdef int hap_idx
 */
  __pyx_t_5 = __pyx_v_self->_snp_num;
  __pyx_v_other->__pyx_base._snp_num = __pyx_t_5;

  /* "IBD\TestSet.pyx":49
 *         cdef GenotypePair other = GenotypePair()
 *         other._snp_num = self._snp_num
 *         other._haplos = <bool **> malloc(other._nr_haplos * sizeof(bool *))             # <<<<<<<<<<<<<<
 *         cdef int hap_idx
 *         cdef int snp_idx
 */
  __pyx_v_other->__pyx_base._haplos = ((bool **)malloc((__pyx_v_other->__pyx_base._nr_haplos * (sizeof(bool *)))));

  /* "IBD\TestSet.pyx":52
 *         cdef int hap_idx
 *         cdef int snp_idx
 *         for hap_idx in range(self._nr_haplos):             # <<<<<<<<<<<<<<
 *             other._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))
 *         for snp_idx in range(self._snp_num):
 */
  __pyx_t_5 = __pyx_v_self->_nr_haplos;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_hap_idx = __pyx_t_6;

    /* "IBD\TestSet.pyx":53
 *         cdef int snp_idx
 *         for hap_idx in range(self._nr_haplos):
 *             other._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))             # <<<<<<<<<<<<<<
 *         for snp_idx in range(self._snp_num):
 *             other._haplos[0][snp_idx] = self._haplos[ind1*2][snp_idx]
 */
    (__pyx_v_other->__pyx_base._haplos[__pyx_v_hap_idx]) = ((bool *)malloc((__pyx_v_self->_snp_num * (sizeof(bool)))));
  }

  /* "IBD\TestSet.pyx":54
 *         for hap_idx in range(self._nr_haplos):
 *             other._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))
 *         for snp_idx in range(self._snp_num):             # <<<<<<<<<<<<<<
 *             other._haplos[0][snp_idx] = self._haplos[ind1*2][snp_idx]
 *             other._haplos[1][snp_idx] = self._haplos[ind1*2+1][snp_idx]
 */
  __pyx_t_5 = __pyx_v_self->_snp_num;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_snp_idx = __pyx_t_6;

    /* "IBD\TestSet.pyx":55
 *             other._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))
 *         for snp_idx in range(self._snp_num):
 *             other._haplos[0][snp_idx] = self._haplos[ind1*2][snp_idx]             # <<<<<<<<<<<<<<
 *             other._haplos[1][snp_idx] = self._haplos[ind1*2+1][snp_idx]
 *             other._haplos[2][snp_idx] = self._haplos[ind2*2][snp_idx]
 */
    ((__pyx_v_other->__pyx_base._haplos[0])[__pyx_v_snp_idx]) = ((__pyx_v_self->_haplos[(__pyx_v_ind1 * 2)])[__pyx_v_snp_idx]);

    /* "IBD\TestSet.pyx":56
 *         for snp_idx in range(self._snp_num):
 *             other._haplos[0][snp_idx] = self._haplos[ind1*2][snp_idx]
 *             other._haplos[1][snp_idx] = self._haplos[ind1*2+1][snp_idx]             # <<<<<<<<<<<<<<
 *             other._haplos[2][snp_idx] = self._haplos[ind2*2][snp_idx]
 *             other._haplos[3][snp_idx] = self._haplos[ind2*2+1][snp_idx]
 */
    ((__pyx_v_other->__pyx_base._haplos[1])[__pyx_v_snp_idx]) = ((__pyx_v_self->_haplos[((__pyx_v_ind1 * 2) + 1)])[__pyx_v_snp_idx]);

    /* "IBD\TestSet.pyx":57
 *             other._haplos[0][snp_idx] = self._haplos[ind1*2][snp_idx]
 *             other._haplos[1][snp_idx] = self._haplos[ind1*2+1][snp_idx]
 *             other._haplos[2][snp_idx] = self._haplos[ind2*2][snp_idx]             # <<<<<<<<<<<<<<
 *             other._haplos[3][snp_idx] = self._haplos[ind2*2+1][snp_idx]
 *         return other
 */
    ((__pyx_v_other->__pyx_base._haplos[2])[__pyx_v_snp_idx]) = ((__pyx_v_self->_haplos[(__pyx_v_ind2 * 2)])[__pyx_v_snp_idx]);

    /* "IBD\TestSet.pyx":58
 *             other._haplos[1][snp_idx] = self._haplos[ind1*2+1][snp_idx]
 *             other._haplos[2][snp_idx] = self._haplos[ind2*2][snp_idx]
 *             other._haplos[3][snp_idx] = self._haplos[ind2*2+1][snp_idx]             # <<<<<<<<<<<<<<
 *         return other
 * 
 */
    ((__pyx_v_other->__pyx_base._haplos[3])[__pyx_v_snp_idx]) = ((__pyx_v_self->_haplos[((__pyx_v_ind2 * 2) + 1)])[__pyx_v_snp_idx]);
  }

  /* "IBD\TestSet.pyx":59
 *             other._haplos[2][snp_idx] = self._haplos[ind2*2][snp_idx]
 *             other._haplos[3][snp_idx] = self._haplos[ind2*2+1][snp_idx]
 *         return other             # <<<<<<<<<<<<<<
 * 
 *     def read_haplos(self, file_name, int max_snp_num=1000000000, ids = None, scramble=False):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_other));
  __pyx_r = __pyx_v_other;
  goto __pyx_L0;

  /* "IBD\TestSet.pyx":42
 *         free(self._haplos)
 * 
 *     cpdef GenotypePair get_genotype_pair(self, int ind1, int ind2):             # <<<<<<<<<<<<<<
 *         '''
 *         ind1 and ind2 should be zero based
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("IBD.TestSet.TestSet.get_genotype_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_this_type);
  __Pyx_XDECREF((PyObject *)__pyx_v_other);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_7get_genotype_pair(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3IBD_7TestSet_7TestSet_6get_genotype_pair[] = "\n        ind1 and ind2 should be zero based\n        ";
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_7get_genotype_pair(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ind1;
  int __pyx_v_ind2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_genotype_pair (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ind1,&__pyx_n_s_ind2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ind1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ind2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_genotype_pair", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_genotype_pair") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ind1 = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_ind1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_ind2 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_ind2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_genotype_pair", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("IBD.TestSet.TestSet.get_genotype_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IBD_7TestSet_7TestSet_6get_genotype_pair(((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_v_self), __pyx_v_ind1, __pyx_v_ind2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_6get_genotype_pair(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, int __pyx_v_ind1, int __pyx_v_ind2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_genotype_pair", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3IBD_7TestSet_TestSet *)__pyx_v_self->__pyx_vtab)->get_genotype_pair(__pyx_v_self, __pyx_v_ind1, __pyx_v_ind2, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.TestSet.TestSet.get_genotype_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pyx":61
 *         return other
 * 
 *     def read_haplos(self, file_name, int max_snp_num=1000000000, ids = None, scramble=False):             # <<<<<<<<<<<<<<
 * 
 *         if not os.path.exists(file_name):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_9read_haplos(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_9read_haplos(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_name = 0;
  int __pyx_v_max_snp_num;
  PyObject *__pyx_v_ids = 0;
  PyObject *__pyx_v_scramble = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_haplos (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_name,&__pyx_n_s_max_snp_num,&__pyx_n_s_ids,&__pyx_n_s_scramble,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_snp_num);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ids);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_scramble);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_haplos") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file_name = values[0];
    if (values[1]) {
      __pyx_v_max_snp_num = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_max_snp_num == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_max_snp_num = ((int)1000000000);
    }
    __pyx_v_ids = values[2];
    __pyx_v_scramble = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_haplos", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("IBD.TestSet.TestSet.read_haplos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IBD_7TestSet_7TestSet_8read_haplos(((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_v_self), __pyx_v_file_name, __pyx_v_max_snp_num, __pyx_v_ids, __pyx_v_scramble);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_8read_haplos(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, PyObject *__pyx_v_file_name, int __pyx_v_max_snp_num, PyObject *__pyx_v_ids, PyObject *__pyx_v_scramble) {
  PyObject *__pyx_v_count = NULL;
  PyObject *__pyx_v_haplos_file = NULL;
  PyObject *__pyx_v_line = NULL;
  CYTHON_UNUSED int __pyx_v_first_read;
  int __pyx_v_done;
  long __pyx_v_buffer_size;
  PyObject *__pyx_v_hap_idx = NULL;
  PyObject *__pyx_v_lines = NULL;
  PyObject *__pyx_v_line_trunc = NULL;
  int __pyx_v_snp_idx;
  PyObject *__pyx_v_switch = NULL;
  PyObject *__pyx_v_temp_allele = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  bool __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_haplos", 0);
  __Pyx_INCREF(__pyx_v_ids);

  /* "IBD\TestSet.pyx":63
 *     def read_haplos(self, file_name, int max_snp_num=1000000000, ids = None, scramble=False):
 * 
 *         if not os.path.exists(file_name):             # <<<<<<<<<<<<<<
 *             print "the file: " + file_name + " does not exist!"
 *             exit(-1)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exists); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_file_name);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_file_name);
  __Pyx_GIVEREF(__pyx_v_file_name);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (__pyx_t_5) {

    /* "IBD\TestSet.pyx":64
 * 
 *         if not os.path.exists(file_name):
 *             print "the file: " + file_name + " does not exist!"             # <<<<<<<<<<<<<<
 *             exit(-1)
 * 
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_the_file, __pyx_v_file_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_does_not_exist); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "IBD\TestSet.pyx":65
 *         if not os.path.exists(file_name):
 *             print "the file: " + file_name + " does not exist!"
 *             exit(-1)             # <<<<<<<<<<<<<<
 * 
 *         count = 0
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "IBD\TestSet.pyx":67
 *             exit(-1)
 * 
 *         count = 0             # <<<<<<<<<<<<<<
 *         with open(file_name, 'rU') as haplos_file:
 *             for line in haplos_file.xreadlines(  ):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_count = __pyx_int_0;

  /* "IBD\TestSet.pyx":68
 * 
 *         count = 0
 *         with open(file_name, 'rU') as haplos_file:             # <<<<<<<<<<<<<<
 *             for line in haplos_file.xreadlines(  ):
 *                 if count == 0:
 */
  /*with:*/ {
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_file_name);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_file_name);
    __Pyx_GIVEREF(__pyx_v_file_name);
    __Pyx_INCREF(__pyx_n_s_rU);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_rU);
    __Pyx_GIVEREF(__pyx_n_s_rU);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    /*try:*/ {
      {
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __Pyx_INCREF(__pyx_t_1);
          __pyx_v_haplos_file = __pyx_t_1;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "IBD\TestSet.pyx":69
 *         count = 0
 *         with open(file_name, 'rU') as haplos_file:
 *             for line in haplos_file.xreadlines(  ):             # <<<<<<<<<<<<<<
 *                 if count == 0:
 *                     self._snp_num = len(line.rstrip('\r\n')) if len(line.rstrip('\r\n')) <= max_snp_num else max_snp_num
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_haplos_file, __pyx_n_s_xreadlines); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
            __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1); __pyx_t_10 = 0;
            __pyx_t_11 = NULL;
          } else {
            __pyx_t_10 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          for (;;) {
            if (!__pyx_t_11 && PyList_CheckExact(__pyx_t_1)) {
              if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              #endif
            } else if (!__pyx_t_11 && PyTuple_CheckExact(__pyx_t_1)) {
              if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              #endif
            } else {
              __pyx_t_3 = __pyx_t_11(__pyx_t_1);
              if (unlikely(!__pyx_t_3)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_3);
            }
            __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "IBD\TestSet.pyx":70
 *         with open(file_name, 'rU') as haplos_file:
 *             for line in haplos_file.xreadlines(  ):
 *                 if count == 0:             # <<<<<<<<<<<<<<
 *                     self._snp_num = len(line.rstrip('\r\n')) if len(line.rstrip('\r\n')) <= max_snp_num else max_snp_num
 *                 if len(line.rstrip('\r\n')) < self._snp_num:
 */
            __pyx_t_3 = PyObject_RichCompare(__pyx_v_count, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (__pyx_t_5) {

              /* "IBD\TestSet.pyx":71
 *             for line in haplos_file.xreadlines(  ):
 *                 if count == 0:
 *                     self._snp_num = len(line.rstrip('\r\n')) if len(line.rstrip('\r\n')) <= max_snp_num else max_snp_num             # <<<<<<<<<<<<<<
 *                 if len(line.rstrip('\r\n')) < self._snp_num:
 *                     raise ValueError
 */
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_rstrip); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_13 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (((__pyx_t_13 <= __pyx_v_max_snp_num) != 0)) {
                __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_rstrip); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __pyx_t_14 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_12 = __pyx_t_14;
              } else {
                __pyx_t_12 = __pyx_v_max_snp_num;
              }
              __pyx_v_self->_snp_num = __pyx_t_12;
              goto __pyx_L19;
            }
            __pyx_L19:;

            /* "IBD\TestSet.pyx":72
 *                 if count == 0:
 *                     self._snp_num = len(line.rstrip('\r\n')) if len(line.rstrip('\r\n')) <= max_snp_num else max_snp_num
 *                 if len(line.rstrip('\r\n')) < self._snp_num:             # <<<<<<<<<<<<<<
 *                     raise ValueError
 *                 count += 1
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_rstrip); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_12 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_5 = ((__pyx_t_12 < __pyx_v_self->_snp_num) != 0);
            if (__pyx_t_5) {

              /* "IBD\TestSet.pyx":73
 *                     self._snp_num = len(line.rstrip('\r\n')) if len(line.rstrip('\r\n')) <= max_snp_num else max_snp_num
 *                 if len(line.rstrip('\r\n')) < self._snp_num:
 *                     raise ValueError             # <<<<<<<<<<<<<<
 *                 count += 1
 * 
 */
              __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            }

            /* "IBD\TestSet.pyx":74
 *                 if len(line.rstrip('\r\n')) < self._snp_num:
 *                     raise ValueError
 *                 count += 1             # <<<<<<<<<<<<<<
 * 
 *         if count == 0 or count % 2 == 1:
 */
            __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_count, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L8_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF_SET(__pyx_v_count, __pyx_t_2);
            __pyx_t_2 = 0;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L15_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "IBD\TestSet.pyx":68
 * 
 *         count = 0
 *         with open(file_name, 'rU') as haplos_file:             # <<<<<<<<<<<<<<
 *             for line in haplos_file.xreadlines(  ):
 *                 if count == 0:
 */
        /*except:*/ {
          __Pyx_AddTraceback("IBD.TestSet.TestSet.read_haplos", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_15 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (__pyx_t_5 < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          __pyx_t_4 = ((!(__pyx_t_5 != 0)) != 0);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestore(__pyx_t_1, __pyx_t_2, __pyx_t_3);
            __pyx_t_1 = 0; __pyx_t_2 = 0; __pyx_t_3 = 0; 
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L10_except_error;}
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L15_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__6, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L24;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L24:;
  }

  /* "IBD\TestSet.pyx":76
 *                 count += 1
 * 
 *         if count == 0 or count % 2 == 1:             # <<<<<<<<<<<<<<
 *             print "bad number of haplotypes. quitting..."
 *             exit(-1)
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_count, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
    __pyx_t_3 = PyNumber_Remainder(__pyx_v_count, __pyx_int_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_17 = __pyx_t_5;
  } else {
    __pyx_t_17 = __pyx_t_4;
  }
  if (__pyx_t_17) {

    /* "IBD\TestSet.pyx":77
 * 
 *         if count == 0 or count % 2 == 1:
 *             print "bad number of haplotypes. quitting..."             # <<<<<<<<<<<<<<
 *             exit(-1)
 * 
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_bad_number_of_haplotypes_quittin) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "IBD\TestSet.pyx":78
 *         if count == 0 or count % 2 == 1:
 *             print "bad number of haplotypes. quitting..."
 *             exit(-1)             # <<<<<<<<<<<<<<
 * 
 *         if ids == None:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L25;
  }
  __pyx_L25:;

  /* "IBD\TestSet.pyx":80
 *             exit(-1)
 * 
 *         if ids == None:             # <<<<<<<<<<<<<<
 *             self._nr_haplos = count
 *             ids = range(self._nr_haplos)
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_ids, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_17 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_17) {

    /* "IBD\TestSet.pyx":81
 * 
 *         if ids == None:
 *             self._nr_haplos = count             # <<<<<<<<<<<<<<
 *             ids = range(self._nr_haplos)
 *         else:
 */
    __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_count); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->_nr_haplos = __pyx_t_18;

    /* "IBD\TestSet.pyx":82
 *         if ids == None:
 *             self._nr_haplos = count
 *             ids = range(self._nr_haplos)             # <<<<<<<<<<<<<<
 *         else:
 *             self._nr_haplos = len(ids)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_nr_haplos); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_ids, __pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L26;
  }
  /*else*/ {

    /* "IBD\TestSet.pyx":84
 *             ids = range(self._nr_haplos)
 *         else:
 *             self._nr_haplos = len(ids)             # <<<<<<<<<<<<<<
 * 
 *         print "reading from haplos file: " + file_name
 */
    __pyx_t_10 = PyObject_Length(__pyx_v_ids); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->_nr_haplos = __pyx_t_10;
  }
  __pyx_L26:;

  /* "IBD\TestSet.pyx":86
 *             self._nr_haplos = len(ids)
 * 
 *         print "reading from haplos file: " + file_name             # <<<<<<<<<<<<<<
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 * 
 */
  __pyx_t_2 = PyNumber_Add(__pyx_kp_s_reading_from_haplos_file, __pyx_v_file_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "IBD\TestSet.pyx":87
 * 
 *         print "reading from haplos file: " + file_name
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))             # <<<<<<<<<<<<<<
 * 
 *         with open(file_name, 'rU') as haplos_file:
 */
  __pyx_v_self->_haplos = ((bool **)malloc((__pyx_v_self->_nr_haplos * (sizeof(bool *)))));

  /* "IBD\TestSet.pyx":89
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 * 
 *         with open(file_name, 'rU') as haplos_file:             # <<<<<<<<<<<<<<
 * 
 *             first_read = True
 */
  /*with:*/ {
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_file_name);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_file_name);
    __Pyx_GIVEREF(__pyx_v_file_name);
    __Pyx_INCREF(__pyx_n_s_rU);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_rU);
    __Pyx_GIVEREF(__pyx_n_s_rU);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L27_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L27_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    /*try:*/ {
      {
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_7);
        /*try:*/ {
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_XDECREF_SET(__pyx_v_haplos_file, __pyx_t_1);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "IBD\TestSet.pyx":91
 *         with open(file_name, 'rU') as haplos_file:
 * 
 *             first_read = True             # <<<<<<<<<<<<<<
 *             done = False
 *             buffer_size = 100
 */
          __pyx_v_first_read = 1;

          /* "IBD\TestSet.pyx":92
 * 
 *             first_read = True
 *             done = False             # <<<<<<<<<<<<<<
 *             buffer_size = 100
 *             hap_idx = 0
 */
          __pyx_v_done = 0;

          /* "IBD\TestSet.pyx":93
 *             first_read = True
 *             done = False
 *             buffer_size = 100             # <<<<<<<<<<<<<<
 *             hap_idx = 0
 * 
 */
          __pyx_v_buffer_size = 100;

          /* "IBD\TestSet.pyx":94
 *             done = False
 *             buffer_size = 100
 *             hap_idx = 0             # <<<<<<<<<<<<<<
 * 
 *             while True:
 */
          __Pyx_INCREF(__pyx_int_0);
          __pyx_v_hap_idx = __pyx_int_0;

          /* "IBD\TestSet.pyx":96
 *             hap_idx = 0
 * 
 *             while True:             # <<<<<<<<<<<<<<
 * 
 *                 if done:
 */
          while (1) {

            /* "IBD\TestSet.pyx":98
 *             while True:
 * 
 *                 if done:             # <<<<<<<<<<<<<<
 *                     break
 *                 # read next buffer_size lines from the file
 */
            __pyx_t_17 = (__pyx_v_done != 0);
            if (__pyx_t_17) {

              /* "IBD\TestSet.pyx":99
 * 
 *                 if done:
 *                     break             # <<<<<<<<<<<<<<
 *                 # read next buffer_size lines from the file
 *                 lines = list(islice(haplos_file, buffer_size))
 */
              goto __pyx_L41_break;
            }

            /* "IBD\TestSet.pyx":101
 *                     break
 *                 # read next buffer_size lines from the file
 *                 lines = list(islice(haplos_file, buffer_size))             # <<<<<<<<<<<<<<
 * 
 *                 if len(lines) == 0:
 */
            __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_islice); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_buffer_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_INCREF(__pyx_v_haplos_file);
            PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_haplos_file);
            __Pyx_GIVEREF(__pyx_v_haplos_file);
            PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
            __Pyx_GOTREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyList_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF_SET(__pyx_v_lines, ((PyObject*)__pyx_t_3));
            __pyx_t_3 = 0;

            /* "IBD\TestSet.pyx":103
 *                 lines = list(islice(haplos_file, buffer_size))
 * 
 *                 if len(lines) == 0:             # <<<<<<<<<<<<<<
 *                     done = True
 * 
 */
            __pyx_t_10 = PyList_GET_SIZE(__pyx_v_lines); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
            __pyx_t_17 = ((__pyx_t_10 == 0) != 0);
            if (__pyx_t_17) {

              /* "IBD\TestSet.pyx":104
 * 
 *                 if len(lines) == 0:
 *                     done = True             # <<<<<<<<<<<<<<
 * 
 *                 for line in lines:
 */
              __pyx_v_done = 1;
              goto __pyx_L43;
            }
            __pyx_L43:;

            /* "IBD\TestSet.pyx":106
 *                     done = True
 * 
 *                 for line in lines:             # <<<<<<<<<<<<<<
 *                     if hap_idx in ids:
 *                         line_trunc = line.rstrip('\r\n')[:self._snp_num]
 */
            __pyx_t_3 = __pyx_v_lines; __Pyx_INCREF(__pyx_t_3); __pyx_t_10 = 0;
            for (;;) {
              if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_2); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
              #endif
              __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_2);
              __pyx_t_2 = 0;

              /* "IBD\TestSet.pyx":107
 * 
 *                 for line in lines:
 *                     if hap_idx in ids:             # <<<<<<<<<<<<<<
 *                         line_trunc = line.rstrip('\r\n')[:self._snp_num]
 *                         self._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))
 */
              __pyx_t_17 = (__Pyx_PySequence_Contains(__pyx_v_hap_idx, __pyx_v_ids, Py_EQ)); if (unlikely(__pyx_t_17 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
              __pyx_t_4 = (__pyx_t_17 != 0);
              if (__pyx_t_4) {

                /* "IBD\TestSet.pyx":108
 *                 for line in lines:
 *                     if hap_idx in ids:
 *                         line_trunc = line.rstrip('\r\n')[:self._snp_num]             # <<<<<<<<<<<<<<
 *                         self._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))
 *                         for snp_idx in range(self._snp_num):
 */
                __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_rstrip); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, __pyx_v_self->_snp_num, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_XDECREF_SET(__pyx_v_line_trunc, __pyx_t_2);
                __pyx_t_2 = 0;

                /* "IBD\TestSet.pyx":109
 *                     if hap_idx in ids:
 *                         line_trunc = line.rstrip('\r\n')[:self._snp_num]
 *                         self._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))             # <<<<<<<<<<<<<<
 *                         for snp_idx in range(self._snp_num):
 * #                             print "snp: " + str(snp_idx)
 */
                __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_hap_idx); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                (__pyx_v_self->_haplos[__pyx_t_12]) = ((bool *)malloc((__pyx_v_self->_snp_num * (sizeof(bool)))));

                /* "IBD\TestSet.pyx":110
 *                         line_trunc = line.rstrip('\r\n')[:self._snp_num]
 *                         self._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))
 *                         for snp_idx in range(self._snp_num):             # <<<<<<<<<<<<<<
 * #                             print "snp: " + str(snp_idx)
 *                             if int(line_trunc[snp_idx]) == 0:
 */
                __pyx_t_18 = __pyx_v_self->_snp_num;
                for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
                  __pyx_v_snp_idx = __pyx_t_19;

                  /* "IBD\TestSet.pyx":112
 *                         for snp_idx in range(self._snp_num):
 * #                             print "snp: " + str(snp_idx)
 *                             if int(line_trunc[snp_idx]) == 0:             # <<<<<<<<<<<<<<
 *                                 self._haplos[hap_idx][snp_idx] = 0
 *                             else:
 */
                  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_line_trunc, __pyx_v_snp_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L31_error;};
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_1 = PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (__pyx_t_4) {

                    /* "IBD\TestSet.pyx":113
 * #                             print "snp: " + str(snp_idx)
 *                             if int(line_trunc[snp_idx]) == 0:
 *                                 self._haplos[hap_idx][snp_idx] = 0             # <<<<<<<<<<<<<<
 *                             else:
 *                                 if int(line_trunc[snp_idx]) == 1:
 */
                    __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_hap_idx); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                    ((__pyx_v_self->_haplos[__pyx_t_12])[__pyx_v_snp_idx]) = 0;
                    goto __pyx_L49;
                  }
                  /*else*/ {

                    /* "IBD\TestSet.pyx":115
 *                                 self._haplos[hap_idx][snp_idx] = 0
 *                             else:
 *                                 if int(line_trunc[snp_idx]) == 1:             # <<<<<<<<<<<<<<
 *                                     self._haplos[hap_idx][snp_idx] = 1
 *                                 else:
 */
                    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_line_trunc, __pyx_v_snp_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L31_error;};
                    __Pyx_GOTREF(__pyx_t_2);
                    __pyx_t_1 = PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                    __Pyx_GOTREF(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    if (__pyx_t_4) {

                      /* "IBD\TestSet.pyx":116
 *                             else:
 *                                 if int(line_trunc[snp_idx]) == 1:
 *                                     self._haplos[hap_idx][snp_idx] = 1             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     print "unidentified allele: " + str(int(line_trunc[snp_idx]))
 */
                      __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_hap_idx); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                      ((__pyx_v_self->_haplos[__pyx_t_12])[__pyx_v_snp_idx]) = 1;
                      goto __pyx_L50;
                    }
                    /*else*/ {

                      /* "IBD\TestSet.pyx":118
 *                                     self._haplos[hap_idx][snp_idx] = 1
 *                                 else:
 *                                     print "unidentified allele: " + str(int(line_trunc[snp_idx]))             # <<<<<<<<<<<<<<
 *                                     break
 *                         #self._haplos[hap_idx] = <char *> malloc((self._snp_num) * sizeof(char))
 */
                      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_line_trunc, __pyx_v_snp_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L31_error;};
                      __Pyx_GOTREF(__pyx_t_2);
                      __pyx_t_1 = PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                      __Pyx_GOTREF(__pyx_t_2);
                      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
                      __Pyx_GIVEREF(__pyx_t_1);
                      __pyx_t_1 = 0;
                      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_unidentified_allele, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                      __Pyx_GOTREF(__pyx_t_2);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                      /* "IBD\TestSet.pyx":119
 *                                 else:
 *                                     print "unidentified allele: " + str(int(line_trunc[snp_idx]))
 *                                     break             # <<<<<<<<<<<<<<
 *                         #self._haplos[hap_idx] = <char *> malloc((self._snp_num) * sizeof(char))
 *                         #strncpy(self._haplos[hap_idx], line_trunc,self._snp_num)
 */
                      goto __pyx_L48_break;
                    }
                    __pyx_L50:;
                  }
                  __pyx_L49:;
                }
                __pyx_L48_break:;
                goto __pyx_L46;
              }
              __pyx_L46:;

              /* "IBD\TestSet.pyx":122
 *                         #self._haplos[hap_idx] = <char *> malloc((self._snp_num) * sizeof(char))
 *                         #strncpy(self._haplos[hap_idx], line_trunc,self._snp_num)
 *                     hap_idx += 1             # <<<<<<<<<<<<<<
 *                     if hap_idx >= count:
 *                         done = True;
 */
              __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_hap_idx, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF_SET(__pyx_v_hap_idx, __pyx_t_2);
              __pyx_t_2 = 0;

              /* "IBD\TestSet.pyx":123
 *                         #strncpy(self._haplos[hap_idx], line_trunc,self._snp_num)
 *                     hap_idx += 1
 *                     if hap_idx >= count:             # <<<<<<<<<<<<<<
 *                         done = True;
 *                         break
 */
              __pyx_t_2 = PyObject_RichCompare(__pyx_v_hap_idx, __pyx_v_count, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
              __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L31_error;}
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (__pyx_t_4) {

                /* "IBD\TestSet.pyx":124
 *                     hap_idx += 1
 *                     if hap_idx >= count:
 *                         done = True;             # <<<<<<<<<<<<<<
 *                         break
 * 
 */
                __pyx_v_done = 1;

                /* "IBD\TestSet.pyx":125
 *                     if hap_idx >= count:
 *                         done = True;
 *                         break             # <<<<<<<<<<<<<<
 * 
 *         if scramble:
 */
                goto __pyx_L45_break;
              }
            }
            __pyx_L45_break:;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_L41_break:;
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L38_try_end;
        __pyx_L31_error:;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "IBD\TestSet.pyx":89
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 * 
 *         with open(file_name, 'rU') as haplos_file:             # <<<<<<<<<<<<<<
 * 
 *             first_read = True
 */
        /*except:*/ {
          __Pyx_AddTraceback("IBD.TestSet.TestSet.read_haplos", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L33_except_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_15 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L33_except_error;}
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L33_except_error;}
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (__pyx_t_4 < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L33_except_error;}
          __pyx_t_17 = ((!(__pyx_t_4 != 0)) != 0);
          if (__pyx_t_17) {
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_ErrRestore(__pyx_t_3, __pyx_t_2, __pyx_t_1);
            __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; 
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L33_except_error;}
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L32_exception_handled;
        }
        __pyx_L33_except_error:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
        goto __pyx_L1_error;
        __pyx_L32_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
        __pyx_L38_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__9, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        goto __pyx_L30;
      }
      __pyx_L30:;
    }
    goto __pyx_L55;
    __pyx_L27_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L55:;
  }

  /* "IBD\TestSet.pyx":127
 *                         break
 * 
 *         if scramble:             # <<<<<<<<<<<<<<
 *             for hap_idx in range(0,self._nr_haplos,2):
 *                 for snp_idx in range(self._snp_num):
 */
  __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_v_scramble); if (unlikely(__pyx_t_17 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_17) {

    /* "IBD\TestSet.pyx":128
 * 
 *         if scramble:
 *             for hap_idx in range(0,self._nr_haplos,2):             # <<<<<<<<<<<<<<
 *                 for snp_idx in range(self._snp_num):
 *                     switch = random.randint(0, 1)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_nr_haplos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = Py_TYPE(__pyx_t_2)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (!__pyx_t_11 && PyList_CheckExact(__pyx_t_2)) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_11 && PyTuple_CheckExact(__pyx_t_2)) {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_1 = __pyx_t_11(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_hap_idx, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "IBD\TestSet.pyx":129
 *         if scramble:
 *             for hap_idx in range(0,self._nr_haplos,2):
 *                 for snp_idx in range(self._snp_num):             # <<<<<<<<<<<<<<
 *                     switch = random.randint(0, 1)
 *                     if switch == 1:
 */
      __pyx_t_18 = __pyx_v_self->_snp_num;
      for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
        __pyx_v_snp_idx = __pyx_t_19;

        /* "IBD\TestSet.pyx":130
 *             for hap_idx in range(0,self._nr_haplos,2):
 *                 for snp_idx in range(self._snp_num):
 *                     switch = random.randint(0, 1)             # <<<<<<<<<<<<<<
 *                     if switch == 1:
 *                         temp_allele = self._haplos[hap_idx][snp_idx]
 */
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_randint); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_switch, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "IBD\TestSet.pyx":131
 *                 for snp_idx in range(self._snp_num):
 *                     switch = random.randint(0, 1)
 *                     if switch == 1:             # <<<<<<<<<<<<<<
 *                         temp_allele = self._haplos[hap_idx][snp_idx]
 *                         self._haplos[hap_idx][snp_idx] = self._haplos[hap_idx+1][snp_idx]
 */
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_switch, __pyx_int_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_17 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_17) {

          /* "IBD\TestSet.pyx":132
 *                     switch = random.randint(0, 1)
 *                     if switch == 1:
 *                         temp_allele = self._haplos[hap_idx][snp_idx]             # <<<<<<<<<<<<<<
 *                         self._haplos[hap_idx][snp_idx] = self._haplos[hap_idx+1][snp_idx]
 *                         self._haplos[hap_idx+1][snp_idx] = temp_allele
 */
          __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_hap_idx); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_1 = __Pyx_PyBool_FromLong(((__pyx_v_self->_haplos[__pyx_t_12])[__pyx_v_snp_idx])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XDECREF_SET(__pyx_v_temp_allele, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "IBD\TestSet.pyx":133
 *                     if switch == 1:
 *                         temp_allele = self._haplos[hap_idx][snp_idx]
 *                         self._haplos[hap_idx][snp_idx] = self._haplos[hap_idx+1][snp_idx]             # <<<<<<<<<<<<<<
 *                         self._haplos[hap_idx+1][snp_idx] = temp_allele
 * 
 */
          __pyx_t_1 = PyNumber_Add(__pyx_v_hap_idx, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_hap_idx); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          ((__pyx_v_self->_haplos[__pyx_t_13])[__pyx_v_snp_idx]) = ((__pyx_v_self->_haplos[__pyx_t_12])[__pyx_v_snp_idx]);

          /* "IBD\TestSet.pyx":134
 *                         temp_allele = self._haplos[hap_idx][snp_idx]
 *                         self._haplos[hap_idx][snp_idx] = self._haplos[hap_idx+1][snp_idx]
 *                         self._haplos[hap_idx+1][snp_idx] = temp_allele             # <<<<<<<<<<<<<<
 * 
 *         print "finished reading haplos."
 */
          __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_v_temp_allele); if (unlikely((__pyx_t_20 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_1 = PyNumber_Add(__pyx_v_hap_idx, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          ((__pyx_v_self->_haplos[__pyx_t_12])[__pyx_v_snp_idx]) = __pyx_t_20;
          goto __pyx_L61;
        }
        __pyx_L61:;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L56;
  }
  __pyx_L56:;

  /* "IBD\TestSet.pyx":136
 *                         self._haplos[hap_idx+1][snp_idx] = temp_allele
 * 
 *         print "finished reading haplos."             # <<<<<<<<<<<<<<
 *         return self._nr_haplos
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_finished_reading_haplos) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "IBD\TestSet.pyx":137
 * 
 *         print "finished reading haplos."
 *         return self._nr_haplos             # <<<<<<<<<<<<<<
 * 
 *     def write_haplos(self, file_name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_nr_haplos); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "IBD\TestSet.pyx":61
 *         return other
 * 
 *     def read_haplos(self, file_name, int max_snp_num=1000000000, ids = None, scramble=False):             # <<<<<<<<<<<<<<
 * 
 *         if not os.path.exists(file_name):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("IBD.TestSet.TestSet.read_haplos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_count);
  __Pyx_XDECREF(__pyx_v_haplos_file);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_hap_idx);
  __Pyx_XDECREF(__pyx_v_lines);
  __Pyx_XDECREF(__pyx_v_line_trunc);
  __Pyx_XDECREF(__pyx_v_switch);
  __Pyx_XDECREF(__pyx_v_temp_allele);
  __Pyx_XDECREF(__pyx_v_ids);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pyx":139
 *         return self._nr_haplos
 * 
 *     def write_haplos(self, file_name):             # <<<<<<<<<<<<<<
 *         with open(file_name, "w") as output_file:
 *             for hap_idx in range(self._nr_haplos):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_11write_haplos(PyObject *__pyx_v_self, PyObject *__pyx_v_file_name); /*proto*/
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_11write_haplos(PyObject *__pyx_v_self, PyObject *__pyx_v_file_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_haplos (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_7TestSet_7TestSet_10write_haplos(((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_v_self), ((PyObject *)__pyx_v_file_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_10write_haplos(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, PyObject *__pyx_v_file_name) {
  PyObject *__pyx_v_output_file = NULL;
  int __pyx_v_hap_idx;
  int __pyx_v_snp_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_haplos", 0);

  /* "IBD\TestSet.pyx":140
 * 
 *     def write_haplos(self, file_name):
 *         with open(file_name, "w") as output_file:             # <<<<<<<<<<<<<<
 *             for hap_idx in range(self._nr_haplos):
 *                 for snp_idx in range(self._snp_num):
 */
  /*with:*/ {
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_file_name);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_file_name);
    __Pyx_GIVEREF(__pyx_v_file_name);
    __Pyx_INCREF(__pyx_n_s_w);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_w);
    __Pyx_GIVEREF(__pyx_n_s_w);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_5);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        /*try:*/ {
          __Pyx_INCREF(__pyx_t_4);
          __pyx_v_output_file = __pyx_t_4;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "IBD\TestSet.pyx":141
 *     def write_haplos(self, file_name):
 *         with open(file_name, "w") as output_file:
 *             for hap_idx in range(self._nr_haplos):             # <<<<<<<<<<<<<<
 *                 for snp_idx in range(self._snp_num):
 *                     output_file.write(str(int(self._haplos[hap_idx][snp_idx])))
 */
          __pyx_t_8 = __pyx_v_self->_nr_haplos;
          for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
            __pyx_v_hap_idx = __pyx_t_9;

            /* "IBD\TestSet.pyx":142
 *         with open(file_name, "w") as output_file:
 *             for hap_idx in range(self._nr_haplos):
 *                 for snp_idx in range(self._snp_num):             # <<<<<<<<<<<<<<
 *                     output_file.write(str(int(self._haplos[hap_idx][snp_idx])))
 *                 output_file.write("\n")
 */
            __pyx_t_10 = __pyx_v_self->_snp_num;
            for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
              __pyx_v_snp_idx = __pyx_t_11;

              /* "IBD\TestSet.pyx":143
 *             for hap_idx in range(self._nr_haplos):
 *                 for snp_idx in range(self._snp_num):
 *                     output_file.write(str(int(self._haplos[hap_idx][snp_idx])))             # <<<<<<<<<<<<<<
 *                 output_file.write("\n")
 * 
 */
              __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_output_file, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_2 = __Pyx_PyBool_FromLong(((__pyx_v_self->_haplos[__pyx_v_hap_idx])[__pyx_v_snp_idx])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
              __Pyx_GOTREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_2);
              __pyx_t_2 = 0;
              __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
              __Pyx_GOTREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_2);
              __pyx_t_2 = 0;
              __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
              __Pyx_GOTREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_2);
              __pyx_t_2 = 0;
              __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }

            /* "IBD\TestSet.pyx":144
 *                 for snp_idx in range(self._snp_num):
 *                     output_file.write(str(int(self._haplos[hap_idx][snp_idx])))
 *                 output_file.write("\n")             # <<<<<<<<<<<<<<
 * 
 *     cpdef generate_composite_individuals(self, LDModel m, num_inds):
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_output_file, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
        }
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "IBD\TestSet.pyx":140
 * 
 *     def write_haplos(self, file_name):
 *         with open(file_name, "w") as output_file:             # <<<<<<<<<<<<<<
 *             for hap_idx in range(self._nr_haplos):
 *                 for snp_idx in range(self._snp_num):
 */
        /*except:*/ {
          __Pyx_AddTraceback("IBD.TestSet.TestSet.write_haplos", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_12 = PyTuple_Pack(3, __pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_12, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (__pyx_t_14 < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __pyx_t_15 = ((!(__pyx_t_14 != 0)) != 0);
          if (__pyx_t_15) {
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_4);
            __Pyx_ErrRestore(__pyx_t_1, __pyx_t_2, __pyx_t_4);
            __pyx_t_1 = 0; __pyx_t_2 = 0; __pyx_t_4 = 0; 
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_3) {
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L23;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L1_error;
    __pyx_L23:;
  }

  /* "IBD\TestSet.pyx":139
 *         return self._nr_haplos
 * 
 *     def write_haplos(self, file_name):             # <<<<<<<<<<<<<<
 *         with open(file_name, "w") as output_file:
 *             for hap_idx in range(self._nr_haplos):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("IBD.TestSet.TestSet.write_haplos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pyx":146
 *                 output_file.write("\n")
 * 
 *     cpdef generate_composite_individuals(self, LDModel m, num_inds):             # <<<<<<<<<<<<<<
 * 
 *         self._nr_haplos = 2 * num_inds
 */

static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_13generate_composite_individuals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3IBD_7TestSet_7TestSet_generate_composite_individuals(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m, PyObject *__pyx_v_num_inds, int __pyx_skip_dispatch) {
  bool **__pyx_v_new_haplos;
  int __pyx_v_hap_idx;
  int __pyx_v_i;
  PyObject *__pyx_v_start = NULL;
  PyObject *__pyx_v_end = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_v_same_j = NULL;
  PyObject *__pyx_v_last_j = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_composite_individuals", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_generate_composite_individuals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_7TestSet_7TestSet_13generate_composite_individuals)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_m));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_m));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_m));
      __Pyx_INCREF(__pyx_v_num_inds);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_num_inds);
      __Pyx_GIVEREF(__pyx_v_num_inds);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\TestSet.pyx":148
 *     cpdef generate_composite_individuals(self, LDModel m, num_inds):
 * 
 *         self._nr_haplos = 2 * num_inds             # <<<<<<<<<<<<<<
 *         new_haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         for hap_idx in range(self._nr_haplos):
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_v_num_inds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_nr_haplos = __pyx_t_4;

  /* "IBD\TestSet.pyx":149
 * 
 *         self._nr_haplos = 2 * num_inds
 *         new_haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))             # <<<<<<<<<<<<<<
 *         for hap_idx in range(self._nr_haplos):
 *             new_haplos[hap_idx] = <bool *> malloc(m._snp_num * sizeof(bool))
 */
  __pyx_v_new_haplos = ((bool **)malloc((__pyx_v_self->_nr_haplos * (sizeof(bool *)))));

  /* "IBD\TestSet.pyx":150
 *         self._nr_haplos = 2 * num_inds
 *         new_haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         for hap_idx in range(self._nr_haplos):             # <<<<<<<<<<<<<<
 *             new_haplos[hap_idx] = <bool *> malloc(m._snp_num * sizeof(bool))
 * 
 */
  __pyx_t_4 = __pyx_v_self->_nr_haplos;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_hap_idx = __pyx_t_5;

    /* "IBD\TestSet.pyx":151
 *         new_haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         for hap_idx in range(self._nr_haplos):
 *             new_haplos[hap_idx] = <bool *> malloc(m._snp_num * sizeof(bool))             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self._nr_haplos):
 */
    (__pyx_v_new_haplos[__pyx_v_hap_idx]) = ((bool *)malloc((__pyx_v_m->_snp_num * (sizeof(bool)))));
  }

  /* "IBD\TestSet.pyx":153
 *             new_haplos[hap_idx] = <bool *> malloc(m._snp_num * sizeof(bool))
 * 
 *         for i in range(self._nr_haplos):             # <<<<<<<<<<<<<<
 *             print "composing individual " + str(i)
 *             print "first position: " + str(m._gm._position[0])
 */
  __pyx_t_4 = __pyx_v_self->_nr_haplos;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "IBD\TestSet.pyx":154
 * 
 *         for i in range(self._nr_haplos):
 *             print "composing individual " + str(i)             # <<<<<<<<<<<<<<
 *             print "first position: " + str(m._gm._position[0])
 *             print "last position: " + str(m._gm._position[self._snp_num-1])
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_composing_individual, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "IBD\TestSet.pyx":155
 *         for i in range(self._nr_haplos):
 *             print "composing individual " + str(i)
 *             print "first position: " + str(m._gm._position[0])             # <<<<<<<<<<<<<<
 *             print "last position: " + str(m._gm._position[self._snp_num-1])
 *             start = 0
 */
    __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_m->_gm->_position[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_first_position, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "IBD\TestSet.pyx":156
 *             print "composing individual " + str(i)
 *             print "first position: " + str(m._gm._position[0])
 *             print "last position: " + str(m._gm._position[self._snp_num-1])             # <<<<<<<<<<<<<<
 *             start = 0
 *             end = 0
 */
    __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_m->_gm->_position[(__pyx_v_self->_snp_num - 1)])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_last_position, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "IBD\TestSet.pyx":157
 *             print "first position: " + str(m._gm._position[0])
 *             print "last position: " + str(m._gm._position[self._snp_num-1])
 *             start = 0             # <<<<<<<<<<<<<<
 *             end = 0
 *             length = int(200 * (self._position[m._snp_num-1] - m._gm._position[0]) / m._snp_num)
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_XDECREF_SET(__pyx_v_start, __pyx_int_0);

    /* "IBD\TestSet.pyx":158
 *             print "last position: " + str(m._gm._position[self._snp_num-1])
 *             start = 0
 *             end = 0             # <<<<<<<<<<<<<<
 *             length = int(200 * (self._position[m._snp_num-1] - m._gm._position[0]) / m._snp_num)
 *             same_j = 0
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_XDECREF_SET(__pyx_v_end, __pyx_int_0);

    /* "IBD\TestSet.pyx":159
 *             start = 0
 *             end = 0
 *             length = int(200 * (self._position[m._snp_num-1] - m._gm._position[0]) / m._snp_num)             # <<<<<<<<<<<<<<
 *             same_j = 0
 *             last_j = -1
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_position); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = (__pyx_v_m->_snp_num - 1);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_m->_gm->_position[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_int_200, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_m->_snp_num); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "IBD\TestSet.pyx":160
 *             end = 0
 *             length = int(200 * (self._position[m._snp_num-1] - m._gm._position[0]) / m._snp_num)
 *             same_j = 0             # <<<<<<<<<<<<<<
 *             last_j = -1
 *             while end < m._snp_num - 1:
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_XDECREF_SET(__pyx_v_same_j, __pyx_int_0);

    /* "IBD\TestSet.pyx":161
 *             length = int(200 * (self._position[m._snp_num-1] - m._gm._position[0]) / m._snp_num)
 *             same_j = 0
 *             last_j = -1             # <<<<<<<<<<<<<<
 *             while end < m._snp_num - 1:
 *                 stdout.write("%d," % start)
 */
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_XDECREF_SET(__pyx_v_last_j, __pyx_int_neg_1);

    /* "IBD\TestSet.pyx":162
 *             same_j = 0
 *             last_j = -1
 *             while end < m._snp_num - 1:             # <<<<<<<<<<<<<<
 *                 stdout.write("%d," % start)
 *                 stdout.flush()
 */
    while (1) {
      __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_m->_snp_num - 1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_end, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!__pyx_t_7) break;

      /* "IBD\TestSet.pyx":163
 *             last_j = -1
 *             while end < m._snp_num - 1:
 *                 stdout.write("%d," % start)             # <<<<<<<<<<<<<<
 *                 stdout.flush()
 *                 start = end
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_stdout); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_d, __pyx_v_start); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "IBD\TestSet.pyx":164
 *             while end < m._snp_num - 1:
 *                 stdout.write("%d," % start)
 *                 stdout.flush()             # <<<<<<<<<<<<<<
 *                 start = end
 *                 end = min(m._snp_num-1,start+length)
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_stdout); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_flush); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "IBD\TestSet.pyx":165
 *                 stdout.write("%d," % start)
 *                 stdout.flush()
 *                 start = end             # <<<<<<<<<<<<<<
 *                 end = min(m._snp_num-1,start+length)
 *                 #dists_c = [abs(x-self._genetic_dist[start]-length) for x in self._genetic_dist]
 */
      __Pyx_INCREF(__pyx_v_end);
      __Pyx_DECREF_SET(__pyx_v_start, __pyx_v_end);

      /* "IBD\TestSet.pyx":166
 *                 stdout.flush()
 *                 start = end
 *                 end = min(m._snp_num-1,start+length)             # <<<<<<<<<<<<<<
 *                 #dists_c = [abs(x-self._genetic_dist[start]-length) for x in self._genetic_dist]
 *                 #end = dists_c.index(min(dists_c))
 */
      __pyx_t_1 = PyNumber_Add(__pyx_v_start, __pyx_v_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = (__pyx_v_m->_snp_num - 1);
      __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_7) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1;
      } else {
        __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = __pyx_t_8;
        __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_t_3;
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_end, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "IBD\TestSet.pyx":169
 *                 #dists_c = [abs(x-self._genetic_dist[start]-length) for x in self._genetic_dist]
 *                 #end = dists_c.index(min(dists_c))
 *                 j = random.randint(0, self._nr_haplos)             # <<<<<<<<<<<<<<
 *                 if last_j == j:
 *                     same_j+=1
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_randint); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_nr_haplos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "IBD\TestSet.pyx":170
 *                 #end = dists_c.index(min(dists_c))
 *                 j = random.randint(0, self._nr_haplos)
 *                 if last_j == j:             # <<<<<<<<<<<<<<
 *                     same_j+=1
 *                     if same_j >= 8:
 */
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_last_j, __pyx_v_j, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_7) {

        /* "IBD\TestSet.pyx":171
 *                 j = random.randint(0, self._nr_haplos)
 *                 if last_j == j:
 *                     same_j+=1             # <<<<<<<<<<<<<<
 *                     if same_j >= 8:
 *                         while True:
 */
        __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_same_j, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_same_j, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "IBD\TestSet.pyx":172
 *                 if last_j == j:
 *                     same_j+=1
 *                     if same_j >= 8:             # <<<<<<<<<<<<<<
 *                         while True:
 *                             j = random.randint(0, self._nr_haplos)
 */
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_same_j, __pyx_int_8, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_7) {

          /* "IBD\TestSet.pyx":173
 *                     same_j+=1
 *                     if same_j >= 8:
 *                         while True:             # <<<<<<<<<<<<<<
 *                             j = random.randint(0, self._nr_haplos)
 *                             if last_j != j:
 */
          while (1) {

            /* "IBD\TestSet.pyx":174
 *                     if same_j >= 8:
 *                         while True:
 *                             j = random.randint(0, self._nr_haplos)             # <<<<<<<<<<<<<<
 *                             if last_j != j:
 *                                 same_j = 0
 */
            __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_randint); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_nr_haplos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_INCREF(__pyx_int_0);
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);
            __Pyx_GIVEREF(__pyx_int_0);
            PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF_SET(__pyx_v_j, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "IBD\TestSet.pyx":175
 *                         while True:
 *                             j = random.randint(0, self._nr_haplos)
 *                             if last_j != j:             # <<<<<<<<<<<<<<
 *                                 same_j = 0
 *                                 break
 */
            __pyx_t_1 = PyObject_RichCompare(__pyx_v_last_j, __pyx_v_j, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__pyx_t_7) {

              /* "IBD\TestSet.pyx":176
 *                             j = random.randint(0, self._nr_haplos)
 *                             if last_j != j:
 *                                 same_j = 0             # <<<<<<<<<<<<<<
 *                                 break
 *                 else:
 */
              __Pyx_INCREF(__pyx_int_0);
              __Pyx_DECREF_SET(__pyx_v_same_j, __pyx_int_0);

              /* "IBD\TestSet.pyx":177
 *                             if last_j != j:
 *                                 same_j = 0
 *                                 break             # <<<<<<<<<<<<<<
 *                 else:
 *                     same_j = 0
 */
              goto __pyx_L12_break;
            }
          }
          __pyx_L12_break:;
          goto __pyx_L10;
        }
        __pyx_L10:;
        goto __pyx_L9;
      }
      /*else*/ {

        /* "IBD\TestSet.pyx":179
 *                                 break
 *                 else:
 *                     same_j = 0             # <<<<<<<<<<<<<<
 * 
 *                 last_j = j
 */
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_DECREF_SET(__pyx_v_same_j, __pyx_int_0);
      }
      __pyx_L9:;

      /* "IBD\TestSet.pyx":181
 *                     same_j = 0
 * 
 *                 last_j = j             # <<<<<<<<<<<<<<
 *                 #strncpy(self._haplos[hap_idx], line_trunc,self._snp_num)
 *                 #new_haplos[i][start:end] = self._haplos[j][start:end]
 */
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_DECREF_SET(__pyx_v_last_j, __pyx_v_j);
    }
  }

  /* "IBD\TestSet.pyx":146
 *                 output_file.write("\n")
 * 
 *     cpdef generate_composite_individuals(self, LDModel m, num_inds):             # <<<<<<<<<<<<<<
 * 
 *         self._nr_haplos = 2 * num_inds
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("IBD.TestSet.TestSet.generate_composite_individuals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_start);
  __Pyx_XDECREF(__pyx_v_end);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XDECREF(__pyx_v_same_j);
  __Pyx_XDECREF(__pyx_v_last_j);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_13generate_composite_individuals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_13generate_composite_individuals(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m = 0;
  PyObject *__pyx_v_num_inds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_composite_individuals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m,&__pyx_n_s_num_inds,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_inds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("generate_composite_individuals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate_composite_individuals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_m = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)values[0]);
    __pyx_v_num_inds = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_composite_individuals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("IBD.TestSet.TestSet.generate_composite_individuals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m), __pyx_ptype_3IBD_7LDModel_LDModel, 1, "m", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3IBD_7TestSet_7TestSet_12generate_composite_individuals(((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_v_self), __pyx_v_m, __pyx_v_num_inds);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_12generate_composite_individuals(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m, PyObject *__pyx_v_num_inds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_composite_individuals", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_7TestSet_TestSet *)__pyx_v_self->__pyx_vtab)->generate_composite_individuals(__pyx_v_self, __pyx_v_m, __pyx_v_num_inds, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.TestSet.TestSet.generate_composite_individuals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pxd":13
 * 
 *     # number of snps (layers) in the model
 *     cdef public int _snp_num             # <<<<<<<<<<<<<<
 * 
 *     # number of haplotypes to analyze
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_8_snp_num_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_8_snp_num_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_7TestSet_7TestSet_8_snp_num___get__(((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_8_snp_num___get__(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_snp_num); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.TestSet.TestSet._snp_num.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_7TestSet_7TestSet_8_snp_num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3IBD_7TestSet_7TestSet_8_snp_num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_7TestSet_7TestSet_8_snp_num_2__set__(((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_7TestSet_7TestSet_8_snp_num_2__set__(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_snp_num = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("IBD.TestSet.TestSet._snp_num.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pxd":16
 * 
 *     # number of haplotypes to analyze
 *     cdef public int _nr_haplos             # <<<<<<<<<<<<<<
 * 
 *     cdef char _allele_0
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_10_nr_haplos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3IBD_7TestSet_7TestSet_10_nr_haplos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_7TestSet_7TestSet_10_nr_haplos___get__(((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_7TestSet_7TestSet_10_nr_haplos___get__(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_nr_haplos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.TestSet.TestSet._nr_haplos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_7TestSet_7TestSet_10_nr_haplos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3IBD_7TestSet_7TestSet_10_nr_haplos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_7TestSet_7TestSet_10_nr_haplos_2__set__(((struct __pyx_obj_3IBD_7TestSet_TestSet *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_7TestSet_7TestSet_10_nr_haplos_2__set__(struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_nr_haplos = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("IBD.TestSet.TestSet._nr_haplos.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pyx":187
 * cdef class GenotypePair(TestSet):
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._nr_haplos = 4
 * 
 */

/* Python wrapper */
static int __pyx_pw_3IBD_7TestSet_12GenotypePair_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IBD_7TestSet_12GenotypePair_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_3IBD_7TestSet_12GenotypePair___cinit__(((struct __pyx_obj_3IBD_7TestSet_GenotypePair *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_7TestSet_12GenotypePair___cinit__(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "IBD\TestSet.pyx":188
 * 
 *     def __cinit__(self):
 *         self._nr_haplos = 4             # <<<<<<<<<<<<<<
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=1000000000):
 */
  __pyx_v_self->__pyx_base._nr_haplos = 4;

  /* "IBD\TestSet.pyx":187
 * cdef class GenotypePair(TestSet):
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._nr_haplos = 4
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pyx":190
 *         self._nr_haplos = 4
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=1000000000):             # <<<<<<<<<<<<<<
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num
 */

static PyObject *__pyx_pw_3IBD_7TestSet_12GenotypePair_3generate_random_haps_inplace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3IBD_7TestSet_12GenotypePair_generate_random_haps_inplace(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m, int __pyx_skip_dispatch, struct __pyx_opt_args_3IBD_7TestSet_12GenotypePair_generate_random_haps_inplace *__pyx_optional_args) {
  int __pyx_v_snp_num = ((int)1000000000);
  long __pyx_v_hap_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_random_haps_inplace", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_snp_num = __pyx_optional_args->snp_num;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_generate_random_haps_inplace); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_7TestSet_12GenotypePair_3generate_random_haps_inplace)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_snp_num); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_m));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_m));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_m));
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\TestSet.pyx":191
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=1000000000):
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))             # <<<<<<<<<<<<<<
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num
 *         for hap_idx in range(4):
 */
  __pyx_v_self->__pyx_base._haplos = ((bool **)malloc((__pyx_v_self->__pyx_base._nr_haplos * (sizeof(bool *)))));

  /* "IBD\TestSet.pyx":192
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=1000000000):
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num             # <<<<<<<<<<<<<<
 *         for hap_idx in range(4):
 *             self._haplos[hap_idx] = m.generate_random_hap(snp_num)
 */
  if (((__pyx_v_m->_snp_num <= __pyx_v_snp_num) != 0)) {
    __pyx_t_4 = __pyx_v_m->_snp_num;
  } else {
    __pyx_t_4 = __pyx_v_snp_num;
  }
  __pyx_v_self->__pyx_base._snp_num = __pyx_t_4;

  /* "IBD\TestSet.pyx":193
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num
 *         for hap_idx in range(4):             # <<<<<<<<<<<<<<
 *             self._haplos[hap_idx] = m.generate_random_hap(snp_num)
 * 
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=1) {
    __pyx_v_hap_idx = __pyx_t_5;

    /* "IBD\TestSet.pyx":194
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num
 *         for hap_idx in range(4):
 *             self._haplos[hap_idx] = m.generate_random_hap(snp_num)             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_ibd_segment(self, int start_snp, int snp_num):
 */
    (__pyx_v_self->__pyx_base._haplos[__pyx_v_hap_idx]) = ((struct __pyx_vtabstruct_3IBD_7LDModel_LDModel *)__pyx_v_m->__pyx_vtab)->generate_random_hap(__pyx_v_m, __pyx_v_snp_num);
  }

  /* "IBD\TestSet.pyx":190
 *         self._nr_haplos = 4
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=1000000000):             # <<<<<<<<<<<<<<
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IBD.TestSet.GenotypePair.generate_random_haps_inplace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_7TestSet_12GenotypePair_3generate_random_haps_inplace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3IBD_7TestSet_12GenotypePair_3generate_random_haps_inplace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m = 0;
  int __pyx_v_snp_num;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_random_haps_inplace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m,&__pyx_n_s_snp_num,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_snp_num);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate_random_haps_inplace") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_m = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)values[0]);
    if (values[1]) {
      __pyx_v_snp_num = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_snp_num == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_snp_num = ((int)1000000000);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_random_haps_inplace", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("IBD.TestSet.GenotypePair.generate_random_haps_inplace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m), __pyx_ptype_3IBD_7LDModel_LDModel, 1, "m", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3IBD_7TestSet_12GenotypePair_2generate_random_haps_inplace(((struct __pyx_obj_3IBD_7TestSet_GenotypePair *)__pyx_v_self), __pyx_v_m, __pyx_v_snp_num);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_7TestSet_12GenotypePair_2generate_random_haps_inplace(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m, int __pyx_v_snp_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_3IBD_7TestSet_12GenotypePair_generate_random_haps_inplace __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_random_haps_inplace", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.snp_num = __pyx_v_snp_num;
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_7TestSet_GenotypePair *)__pyx_v_self->__pyx_base.__pyx_vtab)->generate_random_haps_inplace(__pyx_v_self, __pyx_v_m, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.TestSet.GenotypePair.generate_random_haps_inplace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pyx":196
 *             self._haplos[hap_idx] = m.generate_random_hap(snp_num)
 * 
 *     cpdef set_ibd_segment(self, int start_snp, int snp_num):             # <<<<<<<<<<<<<<
 *         cdef int snp_idx
 *         for snp_idx in range(start_snp,start_snp+snp_num):
 */

static PyObject *__pyx_pw_3IBD_7TestSet_12GenotypePair_5set_ibd_segment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3IBD_7TestSet_12GenotypePair_set_ibd_segment(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, int __pyx_v_start_snp, int __pyx_v_snp_num, int __pyx_skip_dispatch) {
  int __pyx_v_snp_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_ibd_segment", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_ibd_segment); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_7TestSet_12GenotypePair_5set_ibd_segment)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_start_snp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_snp_num); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\TestSet.pyx":198
 *     cpdef set_ibd_segment(self, int start_snp, int snp_num):
 *         cdef int snp_idx
 *         for snp_idx in range(start_snp,start_snp+snp_num):             # <<<<<<<<<<<<<<
 *             self._haplos[2][snp_idx] = self._haplos[0][snp_idx]
 * 
 */
  __pyx_t_5 = (__pyx_v_start_snp + __pyx_v_snp_num);
  for (__pyx_t_6 = __pyx_v_start_snp; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_snp_idx = __pyx_t_6;

    /* "IBD\TestSet.pyx":199
 *         cdef int snp_idx
 *         for snp_idx in range(start_snp,start_snp+snp_num):
 *             self._haplos[2][snp_idx] = self._haplos[0][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cpdef Genotype get_genotype(self, int ind):
 */
    ((__pyx_v_self->__pyx_base._haplos[2])[__pyx_v_snp_idx]) = ((__pyx_v_self->__pyx_base._haplos[0])[__pyx_v_snp_idx]);
  }

  /* "IBD\TestSet.pyx":196
 *             self._haplos[hap_idx] = m.generate_random_hap(snp_num)
 * 
 *     cpdef set_ibd_segment(self, int start_snp, int snp_num):             # <<<<<<<<<<<<<<
 *         cdef int snp_idx
 *         for snp_idx in range(start_snp,start_snp+snp_num):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("IBD.TestSet.GenotypePair.set_ibd_segment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_7TestSet_12GenotypePair_5set_ibd_segment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3IBD_7TestSet_12GenotypePair_5set_ibd_segment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_start_snp;
  int __pyx_v_snp_num;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ibd_segment (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_snp,&__pyx_n_s_snp_num,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_snp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_snp_num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_ibd_segment", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_ibd_segment") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_start_snp = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_start_snp == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_snp_num = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_snp_num == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_ibd_segment", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("IBD.TestSet.GenotypePair.set_ibd_segment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IBD_7TestSet_12GenotypePair_4set_ibd_segment(((struct __pyx_obj_3IBD_7TestSet_GenotypePair *)__pyx_v_self), __pyx_v_start_snp, __pyx_v_snp_num);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_7TestSet_12GenotypePair_4set_ibd_segment(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, int __pyx_v_start_snp, int __pyx_v_snp_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_ibd_segment", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_7TestSet_GenotypePair *)__pyx_v_self->__pyx_base.__pyx_vtab)->set_ibd_segment(__pyx_v_self, __pyx_v_start_snp, __pyx_v_snp_num, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.TestSet.GenotypePair.set_ibd_segment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pyx":201
 *             self._haplos[2][snp_idx] = self._haplos[0][snp_idx]
 * 
 *     cpdef Genotype get_genotype(self, int ind):             # <<<<<<<<<<<<<<
 *         if ind != 0 and ind != 1:
 *             raise ValueError
 */

static PyObject *__pyx_pw_3IBD_7TestSet_12GenotypePair_7get_genotype(PyObject *__pyx_v_self, PyObject *__pyx_arg_ind); /*proto*/
static struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_f_3IBD_7TestSet_12GenotypePair_get_genotype(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, int __pyx_v_ind, int __pyx_skip_dispatch) {
  struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_v_other = 0;
  int __pyx_v_hap_idx;
  int __pyx_v_snp_idx;
  struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_genotype", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_genotype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_7TestSet_12GenotypePair_7get_genotype)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_3IBD_7TestSet_Genotype))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_3IBD_7TestSet_Genotype *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\TestSet.pyx":202
 * 
 *     cpdef Genotype get_genotype(self, int ind):
 *         if ind != 0 and ind != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError
 *         cdef Genotype other = Genotype()
 */
  switch (__pyx_v_ind) {
    case 0:
    case 1:
    __pyx_t_4 = 0;
    break;
    default:
    __pyx_t_4 = 1;
    break;
  }
  if (__pyx_t_4) {

    /* "IBD\TestSet.pyx":203
 *     cpdef Genotype get_genotype(self, int ind):
 *         if ind != 0 and ind != 1:
 *             raise ValueError             # <<<<<<<<<<<<<<
 *         cdef Genotype other = Genotype()
 *         other._snp_num = self._snp_num
 */
    __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "IBD\TestSet.pyx":204
 *         if ind != 0 and ind != 1:
 *             raise ValueError
 *         cdef Genotype other = Genotype()             # <<<<<<<<<<<<<<
 *         other._snp_num = self._snp_num
 *         other._haplos = <bool **> malloc(other._nr_haplos * sizeof(bool *))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3IBD_7TestSet_Genotype)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_other = ((struct __pyx_obj_3IBD_7TestSet_Genotype *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IBD\TestSet.pyx":205
 *             raise ValueError
 *         cdef Genotype other = Genotype()
 *         other._snp_num = self._snp_num             # <<<<<<<<<<<<<<
 *         other._haplos = <bool **> malloc(other._nr_haplos * sizeof(bool *))
 *         cdef int hap_idx
 */
  __pyx_t_5 = __pyx_v_self->__pyx_base._snp_num;
  __pyx_v_other->__pyx_base._snp_num = __pyx_t_5;

  /* "IBD\TestSet.pyx":206
 *         cdef Genotype other = Genotype()
 *         other._snp_num = self._snp_num
 *         other._haplos = <bool **> malloc(other._nr_haplos * sizeof(bool *))             # <<<<<<<<<<<<<<
 *         cdef int hap_idx
 *         cdef int snp_idx
 */
  __pyx_v_other->__pyx_base._haplos = ((bool **)malloc((__pyx_v_other->__pyx_base._nr_haplos * (sizeof(bool *)))));

  /* "IBD\TestSet.pyx":209
 *         cdef int hap_idx
 *         cdef int snp_idx
 *         for hap_idx in range(self._nr_haplos):             # <<<<<<<<<<<<<<
 *             other._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))
 *         for snp_idx in range(self._snp_num):
 */
  __pyx_t_5 = __pyx_v_self->__pyx_base._nr_haplos;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_hap_idx = __pyx_t_6;

    /* "IBD\TestSet.pyx":210
 *         cdef int snp_idx
 *         for hap_idx in range(self._nr_haplos):
 *             other._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))             # <<<<<<<<<<<<<<
 *         for snp_idx in range(self._snp_num):
 *             other._haplos[0][snp_idx] = self._haplos[ind*2][snp_idx]
 */
    (__pyx_v_other->__pyx_base._haplos[__pyx_v_hap_idx]) = ((bool *)malloc((__pyx_v_self->__pyx_base._snp_num * (sizeof(bool)))));
  }

  /* "IBD\TestSet.pyx":211
 *         for hap_idx in range(self._nr_haplos):
 *             other._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))
 *         for snp_idx in range(self._snp_num):             # <<<<<<<<<<<<<<
 *             other._haplos[0][snp_idx] = self._haplos[ind*2][snp_idx]
 *             other._haplos[1][snp_idx] = self._haplos[ind*2+1][snp_idx]
 */
  __pyx_t_5 = __pyx_v_self->__pyx_base._snp_num;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_snp_idx = __pyx_t_6;

    /* "IBD\TestSet.pyx":212
 *             other._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))
 *         for snp_idx in range(self._snp_num):
 *             other._haplos[0][snp_idx] = self._haplos[ind*2][snp_idx]             # <<<<<<<<<<<<<<
 *             other._haplos[1][snp_idx] = self._haplos[ind*2+1][snp_idx]
 *         return other
 */
    ((__pyx_v_other->__pyx_base._haplos[0])[__pyx_v_snp_idx]) = ((__pyx_v_self->__pyx_base._haplos[(__pyx_v_ind * 2)])[__pyx_v_snp_idx]);

    /* "IBD\TestSet.pyx":213
 *         for snp_idx in range(self._snp_num):
 *             other._haplos[0][snp_idx] = self._haplos[ind*2][snp_idx]
 *             other._haplos[1][snp_idx] = self._haplos[ind*2+1][snp_idx]             # <<<<<<<<<<<<<<
 *         return other
 * 
 */
    ((__pyx_v_other->__pyx_base._haplos[1])[__pyx_v_snp_idx]) = ((__pyx_v_self->__pyx_base._haplos[((__pyx_v_ind * 2) + 1)])[__pyx_v_snp_idx]);
  }

  /* "IBD\TestSet.pyx":214
 *             other._haplos[0][snp_idx] = self._haplos[ind*2][snp_idx]
 *             other._haplos[1][snp_idx] = self._haplos[ind*2+1][snp_idx]
 *         return other             # <<<<<<<<<<<<<<
 * 
 * cdef class Genotype(TestSet):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_other));
  __pyx_r = __pyx_v_other;
  goto __pyx_L0;

  /* "IBD\TestSet.pyx":201
 *             self._haplos[2][snp_idx] = self._haplos[0][snp_idx]
 * 
 *     cpdef Genotype get_genotype(self, int ind):             # <<<<<<<<<<<<<<
 *         if ind != 0 and ind != 1:
 *             raise ValueError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IBD.TestSet.GenotypePair.get_genotype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_other);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_7TestSet_12GenotypePair_7get_genotype(PyObject *__pyx_v_self, PyObject *__pyx_arg_ind); /*proto*/
static PyObject *__pyx_pw_3IBD_7TestSet_12GenotypePair_7get_genotype(PyObject *__pyx_v_self, PyObject *__pyx_arg_ind) {
  int __pyx_v_ind;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_genotype (wrapper)", 0);
  assert(__pyx_arg_ind); {
    __pyx_v_ind = __Pyx_PyInt_As_int(__pyx_arg_ind); if (unlikely((__pyx_v_ind == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("IBD.TestSet.GenotypePair.get_genotype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IBD_7TestSet_12GenotypePair_6get_genotype(((struct __pyx_obj_3IBD_7TestSet_GenotypePair *)__pyx_v_self), ((int)__pyx_v_ind));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_7TestSet_12GenotypePair_6get_genotype(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, int __pyx_v_ind) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_genotype", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3IBD_7TestSet_GenotypePair *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_genotype(__pyx_v_self, __pyx_v_ind, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.TestSet.GenotypePair.get_genotype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pyx":218
 * cdef class Genotype(TestSet):
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._nr_haplos = 2
 * 
 */

/* Python wrapper */
static int __pyx_pw_3IBD_7TestSet_8Genotype_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IBD_7TestSet_8Genotype_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_3IBD_7TestSet_8Genotype___cinit__(((struct __pyx_obj_3IBD_7TestSet_Genotype *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_7TestSet_8Genotype___cinit__(struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "IBD\TestSet.pyx":219
 * 
 *     def __cinit__(self):
 *         self._nr_haplos = 2             # <<<<<<<<<<<<<<
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=1000000000):
 */
  __pyx_v_self->__pyx_base._nr_haplos = 2;

  /* "IBD\TestSet.pyx":218
 * cdef class Genotype(TestSet):
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._nr_haplos = 2
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pyx":221
 *         self._nr_haplos = 2
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=1000000000):             # <<<<<<<<<<<<<<
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num
 */

static PyObject *__pyx_pw_3IBD_7TestSet_8Genotype_3generate_random_haps_inplace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_3IBD_7TestSet_8Genotype_generate_random_haps_inplace(struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_v_self, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m, int __pyx_skip_dispatch, struct __pyx_opt_args_3IBD_7TestSet_8Genotype_generate_random_haps_inplace *__pyx_optional_args) {
  int __pyx_v_snp_num = ((int)1000000000);
  long __pyx_v_hap_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_random_haps_inplace", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_snp_num = __pyx_optional_args->snp_num;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_generate_random_haps_inplace); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_7TestSet_8Genotype_3generate_random_haps_inplace)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_snp_num); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_m));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_m));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_m));
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\TestSet.pyx":222
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=1000000000):
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))             # <<<<<<<<<<<<<<
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num
 *         for hap_idx in range(2):
 */
  __pyx_v_self->__pyx_base._haplos = ((bool **)malloc((__pyx_v_self->__pyx_base._nr_haplos * (sizeof(bool *)))));

  /* "IBD\TestSet.pyx":223
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=1000000000):
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num             # <<<<<<<<<<<<<<
 *         for hap_idx in range(2):
 *             self._haplos[hap_idx] = m.generate_random_hap(snp_num)
 */
  if (((__pyx_v_m->_snp_num <= __pyx_v_snp_num) != 0)) {
    __pyx_t_4 = __pyx_v_m->_snp_num;
  } else {
    __pyx_t_4 = __pyx_v_snp_num;
  }
  __pyx_v_self->__pyx_base._snp_num = __pyx_t_4;

  /* "IBD\TestSet.pyx":224
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num
 *         for hap_idx in range(2):             # <<<<<<<<<<<<<<
 *             self._haplos[hap_idx] = m.generate_random_hap(snp_num)
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < 2; __pyx_t_5+=1) {
    __pyx_v_hap_idx = __pyx_t_5;

    /* "IBD\TestSet.pyx":225
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num
 *         for hap_idx in range(2):
 *             self._haplos[hap_idx] = m.generate_random_hap(snp_num)             # <<<<<<<<<<<<<<
 */
    (__pyx_v_self->__pyx_base._haplos[__pyx_v_hap_idx]) = ((struct __pyx_vtabstruct_3IBD_7LDModel_LDModel *)__pyx_v_m->__pyx_vtab)->generate_random_hap(__pyx_v_m, __pyx_v_snp_num);
  }

  /* "IBD\TestSet.pyx":221
 *         self._nr_haplos = 2
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=1000000000):             # <<<<<<<<<<<<<<
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 *         self._snp_num = m._snp_num if m._snp_num <= snp_num else snp_num
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IBD.TestSet.Genotype.generate_random_haps_inplace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_7TestSet_8Genotype_3generate_random_haps_inplace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3IBD_7TestSet_8Genotype_3generate_random_haps_inplace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m = 0;
  int __pyx_v_snp_num;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_random_haps_inplace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m,&__pyx_n_s_snp_num,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_snp_num);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "generate_random_haps_inplace") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_m = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)values[0]);
    if (values[1]) {
      __pyx_v_snp_num = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_snp_num == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_snp_num = ((int)1000000000);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_random_haps_inplace", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("IBD.TestSet.Genotype.generate_random_haps_inplace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m), __pyx_ptype_3IBD_7LDModel_LDModel, 1, "m", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3IBD_7TestSet_8Genotype_2generate_random_haps_inplace(((struct __pyx_obj_3IBD_7TestSet_Genotype *)__pyx_v_self), __pyx_v_m, __pyx_v_snp_num);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_7TestSet_8Genotype_2generate_random_haps_inplace(struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_v_self, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m, int __pyx_v_snp_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_3IBD_7TestSet_8Genotype_generate_random_haps_inplace __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_random_haps_inplace", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.snp_num = __pyx_v_snp_num;
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_7TestSet_Genotype *)__pyx_v_self->__pyx_base.__pyx_vtab)->generate_random_haps_inplace(__pyx_v_self, __pyx_v_m, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.TestSet.Genotype.generate_random_haps_inplace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pxd":33
 * cdef class GenotypePair(TestSet):
 * 
 *     cdef inline bool chr1(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[0][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr1(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("chr1", 0);

  /* "IBD\TestSet.pxd":34
 * 
 *     cdef inline bool chr1(self, snp_idx):
 *         return self._haplos[0][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr2(self, snp_idx):
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[0])[__pyx_t_1]);
  goto __pyx_L0;

  /* "IBD\TestSet.pxd":33
 * cdef class GenotypePair(TestSet):
 * 
 *     cdef inline bool chr1(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[0][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.GenotypePair.chr1", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pxd":36
 *         return self._haplos[0][snp_idx]
 * 
 *     cdef inline bool chr2(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[1][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr2(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("chr2", 0);

  /* "IBD\TestSet.pxd":37
 * 
 *     cdef inline bool chr2(self, snp_idx):
 *         return self._haplos[1][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr3(self, snp_idx):
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[1])[__pyx_t_1]);
  goto __pyx_L0;

  /* "IBD\TestSet.pxd":36
 *         return self._haplos[0][snp_idx]
 * 
 *     cdef inline bool chr2(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[1][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.GenotypePair.chr2", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pxd":39
 *         return self._haplos[1][snp_idx]
 * 
 *     cdef inline bool chr3(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[2][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr3(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("chr3", 0);

  /* "IBD\TestSet.pxd":40
 * 
 *     cdef inline bool chr3(self, snp_idx):
 *         return self._haplos[2][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr4(self, snp_idx):
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[2])[__pyx_t_1]);
  goto __pyx_L0;

  /* "IBD\TestSet.pxd":39
 *         return self._haplos[1][snp_idx]
 * 
 *     cdef inline bool chr3(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[2][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.GenotypePair.chr3", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pxd":42
 *         return self._haplos[2][snp_idx]
 * 
 *     cdef inline bool chr4(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[3][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr4(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("chr4", 0);

  /* "IBD\TestSet.pxd":43
 * 
 *     cdef inline bool chr4(self, snp_idx):
 *         return self._haplos[3][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=*)
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[3])[__pyx_t_1]);
  goto __pyx_L0;

  /* "IBD\TestSet.pxd":42
 *         return self._haplos[2][snp_idx]
 * 
 *     cdef inline bool chr4(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[3][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.GenotypePair.chr4", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pxd":53
 * cdef class Genotype(TestSet):
 * 
 *     cdef inline bool chr1(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[0][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_8Genotype_chr1(struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("chr1", 0);

  /* "IBD\TestSet.pxd":54
 * 
 *     cdef inline bool chr1(self, snp_idx):
 *         return self._haplos[0][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr2(self, snp_idx):
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[0])[__pyx_t_1]);
  goto __pyx_L0;

  /* "IBD\TestSet.pxd":53
 * cdef class Genotype(TestSet):
 * 
 *     cdef inline bool chr1(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[0][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.Genotype.chr1", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\TestSet.pxd":56
 *         return self._haplos[0][snp_idx]
 * 
 *     cdef inline bool chr2(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[1][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_8Genotype_chr2(struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("chr2", 0);

  /* "IBD\TestSet.pxd":57
 * 
 *     cdef inline bool chr2(self, snp_idx):
 *         return self._haplos[1][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=*)
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[1])[__pyx_t_1]);
  goto __pyx_L0;

  /* "IBD\TestSet.pxd":56
 *         return self._haplos[0][snp_idx]
 * 
 *     cdef inline bool chr2(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[1][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.Genotype.chr2", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_3IBD_7TestSet_TestSet __pyx_vtable_3IBD_7TestSet_TestSet;

static PyObject *__pyx_tp_new_3IBD_7TestSet_TestSet(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3IBD_7TestSet_TestSet *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3IBD_7TestSet_TestSet *)o);
  p->__pyx_vtab = __pyx_vtabptr_3IBD_7TestSet_TestSet;
  if (unlikely(__pyx_pw_3IBD_7TestSet_7TestSet_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3IBD_7TestSet_TestSet(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3IBD_7TestSet_7TestSet_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_3IBD_7TestSet_7TestSet__snp_num(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3IBD_7TestSet_7TestSet_8_snp_num_1__get__(o);
}

static int __pyx_setprop_3IBD_7TestSet_7TestSet__snp_num(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3IBD_7TestSet_7TestSet_8_snp_num_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3IBD_7TestSet_7TestSet__nr_haplos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3IBD_7TestSet_7TestSet_10_nr_haplos_1__get__(o);
}

static int __pyx_setprop_3IBD_7TestSet_7TestSet__nr_haplos(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3IBD_7TestSet_7TestSet_10_nr_haplos_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_3IBD_7TestSet_TestSet[] = {
  {__Pyx_NAMESTR("get_slice"), (PyCFunction)__pyx_pw_3IBD_7TestSet_7TestSet_3get_slice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_genotype_pair"), (PyCFunction)__pyx_pw_3IBD_7TestSet_7TestSet_7get_genotype_pair, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_3IBD_7TestSet_7TestSet_6get_genotype_pair)},
  {__Pyx_NAMESTR("read_haplos"), (PyCFunction)__pyx_pw_3IBD_7TestSet_7TestSet_9read_haplos, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("write_haplos"), (PyCFunction)__pyx_pw_3IBD_7TestSet_7TestSet_11write_haplos, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("generate_composite_individuals"), (PyCFunction)__pyx_pw_3IBD_7TestSet_7TestSet_13generate_composite_individuals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3IBD_7TestSet_TestSet[] = {
  {(char *)"_snp_num", __pyx_getprop_3IBD_7TestSet_7TestSet__snp_num, __pyx_setprop_3IBD_7TestSet_7TestSet__snp_num, 0, 0},
  {(char *)"_nr_haplos", __pyx_getprop_3IBD_7TestSet_7TestSet__nr_haplos, __pyx_setprop_3IBD_7TestSet_7TestSet__nr_haplos, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3IBD_7TestSet_TestSet = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("IBD.TestSet.TestSet"), /*tp_name*/
  sizeof(struct __pyx_obj_3IBD_7TestSet_TestSet), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IBD_7TestSet_TestSet, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IBD_7TestSet_TestSet, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3IBD_7TestSet_TestSet, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IBD_7TestSet_TestSet, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_3IBD_7TestSet_GenotypePair __pyx_vtable_3IBD_7TestSet_GenotypePair;

static PyObject *__pyx_tp_new_3IBD_7TestSet_GenotypePair(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3IBD_7TestSet_GenotypePair *p;
  PyObject *o = __pyx_tp_new_3IBD_7TestSet_TestSet(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3IBD_7TestSet_GenotypePair *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_3IBD_7TestSet_TestSet*)__pyx_vtabptr_3IBD_7TestSet_GenotypePair;
  if (unlikely(__pyx_pw_3IBD_7TestSet_12GenotypePair_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static PyMethodDef __pyx_methods_3IBD_7TestSet_GenotypePair[] = {
  {__Pyx_NAMESTR("generate_random_haps_inplace"), (PyCFunction)__pyx_pw_3IBD_7TestSet_12GenotypePair_3generate_random_haps_inplace, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_ibd_segment"), (PyCFunction)__pyx_pw_3IBD_7TestSet_12GenotypePair_5set_ibd_segment, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_genotype"), (PyCFunction)__pyx_pw_3IBD_7TestSet_12GenotypePair_7get_genotype, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3IBD_7TestSet_GenotypePair = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("IBD.TestSet.GenotypePair"), /*tp_name*/
  sizeof(struct __pyx_obj_3IBD_7TestSet_GenotypePair), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IBD_7TestSet_TestSet, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IBD_7TestSet_GenotypePair, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IBD_7TestSet_GenotypePair, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_3IBD_7TestSet_Genotype __pyx_vtable_3IBD_7TestSet_Genotype;

static PyObject *__pyx_tp_new_3IBD_7TestSet_Genotype(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3IBD_7TestSet_Genotype *p;
  PyObject *o = __pyx_tp_new_3IBD_7TestSet_TestSet(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3IBD_7TestSet_Genotype *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_3IBD_7TestSet_TestSet*)__pyx_vtabptr_3IBD_7TestSet_Genotype;
  if (unlikely(__pyx_pw_3IBD_7TestSet_8Genotype_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static PyMethodDef __pyx_methods_3IBD_7TestSet_Genotype[] = {
  {__Pyx_NAMESTR("generate_random_haps_inplace"), (PyCFunction)__pyx_pw_3IBD_7TestSet_8Genotype_3generate_random_haps_inplace, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3IBD_7TestSet_Genotype = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("IBD.TestSet.Genotype"), /*tp_name*/
  sizeof(struct __pyx_obj_3IBD_7TestSet_Genotype), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IBD_7TestSet_TestSet, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IBD_7TestSet_Genotype, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IBD_7TestSet_Genotype, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("TestSet"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 0, 1, 0},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s_bad_number_of_haplotypes_quittin, __pyx_k_bad_number_of_haplotypes_quittin, sizeof(__pyx_k_bad_number_of_haplotypes_quittin), 0, 0, 1, 0},
  {&__pyx_n_s_combinations_with_replacement, __pyx_k_combinations_with_replacement, sizeof(__pyx_k_combinations_with_replacement), 0, 0, 1, 1},
  {&__pyx_kp_s_composing_individual, __pyx_k_composing_individual, sizeof(__pyx_k_composing_individual), 0, 0, 1, 0},
  {&__pyx_kp_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 0},
  {&__pyx_kp_s_does_not_exist, __pyx_k_does_not_exist, sizeof(__pyx_k_does_not_exist), 0, 0, 1, 0},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_exit_2, __pyx_k_exit_2, sizeof(__pyx_k_exit_2), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_file_name, __pyx_k_file_name, sizeof(__pyx_k_file_name), 0, 0, 1, 1},
  {&__pyx_kp_s_finished_reading_haplos, __pyx_k_finished_reading_haplos, sizeof(__pyx_k_finished_reading_haplos), 0, 0, 1, 0},
  {&__pyx_kp_s_first_position, __pyx_k_first_position, sizeof(__pyx_k_first_position), 0, 0, 1, 0},
  {&__pyx_n_s_flush, __pyx_k_flush, sizeof(__pyx_k_flush), 0, 0, 1, 1},
  {&__pyx_n_s_generate_composite_individuals, __pyx_k_generate_composite_individuals, sizeof(__pyx_k_generate_composite_individuals), 0, 0, 1, 1},
  {&__pyx_n_s_generate_random_haps_inplace, __pyx_k_generate_random_haps_inplace, sizeof(__pyx_k_generate_random_haps_inplace), 0, 0, 1, 1},
  {&__pyx_n_s_get_genotype, __pyx_k_get_genotype, sizeof(__pyx_k_get_genotype), 0, 0, 1, 1},
  {&__pyx_n_s_get_genotype_pair, __pyx_k_get_genotype_pair, sizeof(__pyx_k_get_genotype_pair), 0, 0, 1, 1},
  {&__pyx_n_s_get_slice, __pyx_k_get_slice, sizeof(__pyx_k_get_slice), 0, 0, 1, 1},
  {&__pyx_n_s_ids, __pyx_k_ids, sizeof(__pyx_k_ids), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_ind1, __pyx_k_ind1, sizeof(__pyx_k_ind1), 0, 0, 1, 1},
  {&__pyx_n_s_ind2, __pyx_k_ind2, sizeof(__pyx_k_ind2), 0, 0, 1, 1},
  {&__pyx_n_s_islice, __pyx_k_islice, sizeof(__pyx_k_islice), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_kp_s_last_position, __pyx_k_last_position, sizeof(__pyx_k_last_position), 0, 0, 1, 0},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_snp_num, __pyx_k_max_snp_num, sizeof(__pyx_k_max_snp_num), 0, 0, 1, 1},
  {&__pyx_n_s_num_inds, __pyx_k_num_inds, sizeof(__pyx_k_num_inds), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_rU, __pyx_k_rU, sizeof(__pyx_k_rU), 0, 0, 1, 1},
  {&__pyx_n_s_randint, __pyx_k_randint, sizeof(__pyx_k_randint), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_kp_s_reading_from_haplos_file, __pyx_k_reading_from_haplos_file, sizeof(__pyx_k_reading_from_haplos_file), 0, 0, 1, 0},
  {&__pyx_n_s_rstrip, __pyx_k_rstrip, sizeof(__pyx_k_rstrip), 0, 0, 1, 1},
  {&__pyx_n_s_scramble, __pyx_k_scramble, sizeof(__pyx_k_scramble), 0, 0, 1, 1},
  {&__pyx_n_s_set_ibd_segment, __pyx_k_set_ibd_segment, sizeof(__pyx_k_set_ibd_segment), 0, 0, 1, 1},
  {&__pyx_n_s_snp_num, __pyx_k_snp_num, sizeof(__pyx_k_snp_num), 0, 0, 1, 1},
  {&__pyx_n_s_start_snp, __pyx_k_start_snp, sizeof(__pyx_k_start_snp), 0, 0, 1, 1},
  {&__pyx_n_s_stdout, __pyx_k_stdout, sizeof(__pyx_k_stdout), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_the_file, __pyx_k_the_file, sizeof(__pyx_k_the_file), 0, 0, 1, 0},
  {&__pyx_kp_s_unidentified_allele, __pyx_k_unidentified_allele, sizeof(__pyx_k_unidentified_allele), 0, 0, 1, 0},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_xreadlines, __pyx_k_xreadlines, sizeof(__pyx_k_xreadlines), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_exit = __Pyx_GetBuiltinName(__pyx_n_s_exit); if (!__pyx_builtin_exit) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "IBD\TestSet.pyx":65
 *         if not os.path.exists(file_name):
 *             print "the file: " + file_name + " does not exist!"
 *             exit(-1)             # <<<<<<<<<<<<<<
 * 
 *         count = 0
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "IBD\TestSet.pyx":71
 *             for line in haplos_file.xreadlines(  ):
 *                 if count == 0:
 *                     self._snp_num = len(line.rstrip('\r\n')) if len(line.rstrip('\r\n')) <= max_snp_num else max_snp_num             # <<<<<<<<<<<<<<
 *                 if len(line.rstrip('\r\n')) < self._snp_num:
 *                     raise ValueError
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s__2); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s__2); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "IBD\TestSet.pyx":72
 *                 if count == 0:
 *                     self._snp_num = len(line.rstrip('\r\n')) if len(line.rstrip('\r\n')) <= max_snp_num else max_snp_num
 *                 if len(line.rstrip('\r\n')) < self._snp_num:             # <<<<<<<<<<<<<<
 *                     raise ValueError
 *                 count += 1
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s__2); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "IBD\TestSet.pyx":68
 * 
 *         count = 0
 *         with open(file_name, 'rU') as haplos_file:             # <<<<<<<<<<<<<<
 *             for line in haplos_file.xreadlines(  ):
 *                 if count == 0:
 */
  __pyx_tuple__6 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "IBD\TestSet.pyx":78
 *         if count == 0 or count % 2 == 1:
 *             print "bad number of haplotypes. quitting..."
 *             exit(-1)             # <<<<<<<<<<<<<<
 * 
 *         if ids == None:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "IBD\TestSet.pyx":108
 *                 for line in lines:
 *                     if hap_idx in ids:
 *                         line_trunc = line.rstrip('\r\n')[:self._snp_num]             # <<<<<<<<<<<<<<
 *                         self._haplos[hap_idx] = <bool *> malloc((self._snp_num) * sizeof(bool))
 *                         for snp_idx in range(self._snp_num):
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s__2); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "IBD\TestSet.pyx":89
 *         self._haplos = <bool **> malloc(self._nr_haplos * sizeof(bool *))
 * 
 *         with open(file_name, 'rU') as haplos_file:             # <<<<<<<<<<<<<<
 * 
 *             first_read = True
 */
  __pyx_tuple__9 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "IBD\TestSet.pyx":130
 *             for hap_idx in range(0,self._nr_haplos,2):
 *                 for snp_idx in range(self._snp_num):
 *                     switch = random.randint(0, 1)             # <<<<<<<<<<<<<<
 *                     if switch == 1:
 *                         temp_allele = self._haplos[hap_idx][snp_idx]
 */
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "IBD\TestSet.pyx":144
 *                 for snp_idx in range(self._snp_num):
 *                     output_file.write(str(int(self._haplos[hap_idx][snp_idx])))
 *                 output_file.write("\n")             # <<<<<<<<<<<<<<
 * 
 *     cpdef generate_composite_individuals(self, LDModel m, num_inds):
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s__11); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "IBD\TestSet.pyx":140
 * 
 *     def write_haplos(self, file_name):
 *         with open(file_name, "w") as output_file:             # <<<<<<<<<<<<<<
 *             for hap_idx in range(self._nr_haplos):
 *                 for snp_idx in range(self._snp_num):
 */
  __pyx_tuple__13 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_200 = PyInt_FromLong(200); if (unlikely(!__pyx_int_200)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initTestSet(void); /*proto*/
PyMODINIT_FUNC initTestSet(void)
#else
PyMODINIT_FUNC PyInit_TestSet(void); /*proto*/
PyMODINIT_FUNC PyInit_TestSet(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_TestSet(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("TestSet"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_IBD__TestSet) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "IBD.TestSet")) {
      if (unlikely(PyDict_SetItemString(modules, "IBD.TestSet", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_3IBD_7TestSet_TestSet = &__pyx_vtable_3IBD_7TestSet_TestSet;
  __pyx_vtable_3IBD_7TestSet_TestSet.get_slice = (struct __pyx_obj_3IBD_7TestSet_TestSet *(*)(struct __pyx_obj_3IBD_7TestSet_TestSet *, int, int, int __pyx_skip_dispatch))__pyx_f_3IBD_7TestSet_7TestSet_get_slice;
  __pyx_vtable_3IBD_7TestSet_TestSet.get_genotype_pair = (struct __pyx_obj_3IBD_7TestSet_GenotypePair *(*)(struct __pyx_obj_3IBD_7TestSet_TestSet *, int, int, int __pyx_skip_dispatch))__pyx_f_3IBD_7TestSet_7TestSet_get_genotype_pair;
  __pyx_vtable_3IBD_7TestSet_TestSet.generate_composite_individuals = (PyObject *(*)(struct __pyx_obj_3IBD_7TestSet_TestSet *, struct __pyx_obj_3IBD_7LDModel_LDModel *, PyObject *, int __pyx_skip_dispatch))__pyx_f_3IBD_7TestSet_7TestSet_generate_composite_individuals;
  if (PyType_Ready(&__pyx_type_3IBD_7TestSet_TestSet) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3IBD_7TestSet_TestSet.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_3IBD_7TestSet_TestSet.tp_dict, __pyx_vtabptr_3IBD_7TestSet_TestSet) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "TestSet", (PyObject *)&__pyx_type_3IBD_7TestSet_TestSet) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3IBD_7TestSet_TestSet = &__pyx_type_3IBD_7TestSet_TestSet;
  __pyx_vtabptr_3IBD_7TestSet_GenotypePair = &__pyx_vtable_3IBD_7TestSet_GenotypePair;
  __pyx_vtable_3IBD_7TestSet_GenotypePair.__pyx_base = *__pyx_vtabptr_3IBD_7TestSet_TestSet;
  __pyx_vtable_3IBD_7TestSet_GenotypePair.chr1 = (bool (*)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *))__pyx_f_3IBD_7TestSet_12GenotypePair_chr1;
  __pyx_vtable_3IBD_7TestSet_GenotypePair.chr2 = (bool (*)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *))__pyx_f_3IBD_7TestSet_12GenotypePair_chr2;
  __pyx_vtable_3IBD_7TestSet_GenotypePair.chr3 = (bool (*)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *))__pyx_f_3IBD_7TestSet_12GenotypePair_chr3;
  __pyx_vtable_3IBD_7TestSet_GenotypePair.chr4 = (bool (*)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *))__pyx_f_3IBD_7TestSet_12GenotypePair_chr4;
  __pyx_vtable_3IBD_7TestSet_GenotypePair.generate_random_haps_inplace = (PyObject *(*)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, struct __pyx_obj_3IBD_7LDModel_LDModel *, int __pyx_skip_dispatch, struct __pyx_opt_args_3IBD_7TestSet_12GenotypePair_generate_random_haps_inplace *__pyx_optional_args))__pyx_f_3IBD_7TestSet_12GenotypePair_generate_random_haps_inplace;
  __pyx_vtable_3IBD_7TestSet_GenotypePair.set_ibd_segment = (PyObject *(*)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, int, int, int __pyx_skip_dispatch))__pyx_f_3IBD_7TestSet_12GenotypePair_set_ibd_segment;
  __pyx_vtable_3IBD_7TestSet_GenotypePair.get_genotype = (struct __pyx_obj_3IBD_7TestSet_Genotype *(*)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, int, int __pyx_skip_dispatch))__pyx_f_3IBD_7TestSet_12GenotypePair_get_genotype;
  __pyx_type_3IBD_7TestSet_GenotypePair.tp_base = __pyx_ptype_3IBD_7TestSet_TestSet;
  if (PyType_Ready(&__pyx_type_3IBD_7TestSet_GenotypePair) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3IBD_7TestSet_GenotypePair.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_3IBD_7TestSet_GenotypePair.tp_dict, __pyx_vtabptr_3IBD_7TestSet_GenotypePair) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "GenotypePair", (PyObject *)&__pyx_type_3IBD_7TestSet_GenotypePair) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3IBD_7TestSet_GenotypePair = &__pyx_type_3IBD_7TestSet_GenotypePair;
  __pyx_vtabptr_3IBD_7TestSet_Genotype = &__pyx_vtable_3IBD_7TestSet_Genotype;
  __pyx_vtable_3IBD_7TestSet_Genotype.__pyx_base = *__pyx_vtabptr_3IBD_7TestSet_TestSet;
  __pyx_vtable_3IBD_7TestSet_Genotype.chr1 = (bool (*)(struct __pyx_obj_3IBD_7TestSet_Genotype *, PyObject *))__pyx_f_3IBD_7TestSet_8Genotype_chr1;
  __pyx_vtable_3IBD_7TestSet_Genotype.chr2 = (bool (*)(struct __pyx_obj_3IBD_7TestSet_Genotype *, PyObject *))__pyx_f_3IBD_7TestSet_8Genotype_chr2;
  __pyx_vtable_3IBD_7TestSet_Genotype.generate_random_haps_inplace = (PyObject *(*)(struct __pyx_obj_3IBD_7TestSet_Genotype *, struct __pyx_obj_3IBD_7LDModel_LDModel *, int __pyx_skip_dispatch, struct __pyx_opt_args_3IBD_7TestSet_8Genotype_generate_random_haps_inplace *__pyx_optional_args))__pyx_f_3IBD_7TestSet_8Genotype_generate_random_haps_inplace;
  __pyx_type_3IBD_7TestSet_Genotype.tp_base = __pyx_ptype_3IBD_7TestSet_TestSet;
  if (PyType_Ready(&__pyx_type_3IBD_7TestSet_Genotype) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3IBD_7TestSet_Genotype.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_3IBD_7TestSet_Genotype.tp_dict, __pyx_vtabptr_3IBD_7TestSet_Genotype) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Genotype", (PyObject *)&__pyx_type_3IBD_7TestSet_Genotype) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3IBD_7TestSet_Genotype = &__pyx_type_3IBD_7TestSet_Genotype;
  /*--- Type import code ---*/
  __pyx_ptype_3IBD_10GeneticMap_GeneticMap = __Pyx_ImportType("IBD.GeneticMap", "GeneticMap", sizeof(struct __pyx_obj_3IBD_10GeneticMap_GeneticMap), 1); if (unlikely(!__pyx_ptype_3IBD_10GeneticMap_GeneticMap)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_3IBD_10GeneticMap_GeneticMap = (struct __pyx_vtabstruct_3IBD_10GeneticMap_GeneticMap*)__Pyx_GetVtable(__pyx_ptype_3IBD_10GeneticMap_GeneticMap->tp_dict); if (unlikely(!__pyx_vtabptr_3IBD_10GeneticMap_GeneticMap)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3IBD_7LDModel_LDModel = __Pyx_ImportType("IBD.LDModel", "LDModel", sizeof(struct __pyx_obj_3IBD_7LDModel_LDModel), 1); if (unlikely(!__pyx_ptype_3IBD_7LDModel_LDModel)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_3IBD_7LDModel_LDModel = (struct __pyx_vtabstruct_3IBD_7LDModel_LDModel*)__Pyx_GetVtable(__pyx_ptype_3IBD_7LDModel_LDModel->tp_dict); if (unlikely(!__pyx_vtabptr_3IBD_7LDModel_LDModel)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "IBD\TestSet.pyx":6
 * #cython.nonecheck=False
 * 
 * import random             # <<<<<<<<<<<<<<
 * import os
 * from libc.stdlib cimport malloc, free
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_random, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IBD\TestSet.pyx":7
 * 
 * import random
 * import os             # <<<<<<<<<<<<<<
 * from libc.stdlib cimport malloc, free
 * from itertools import islice, combinations_with_replacement
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IBD\TestSet.pyx":9
 * import os
 * from libc.stdlib cimport malloc, free
 * from itertools import islice, combinations_with_replacement             # <<<<<<<<<<<<<<
 * from sys import stdout
 * 
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_islice);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_islice);
  __Pyx_GIVEREF(__pyx_n_s_islice);
  __Pyx_INCREF(__pyx_n_s_combinations_with_replacement);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_combinations_with_replacement);
  __Pyx_GIVEREF(__pyx_n_s_combinations_with_replacement);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_islice); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_islice, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_combinations_with_replacement); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_combinations_with_replacement, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "IBD\TestSet.pyx":10
 * from libc.stdlib cimport malloc, free
 * from itertools import islice, combinations_with_replacement
 * from sys import stdout             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "string.h":
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_stdout);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_stdout);
  __Pyx_GIVEREF(__pyx_n_s_stdout);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_stdout); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stdout, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IBD\TestSet.pyx":1
 * #cython: boundscheck=False             # <<<<<<<<<<<<<<
 * #cython: cdivision=True
 * #cython.wraparound=False
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IBD\TestSet.pxd":56
 *         return self._haplos[0][snp_idx]
 * 
 *     cdef inline bool chr2(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[1][snp_idx]
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    __Pyx_AddTraceback("init IBD.TestSet", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init IBD.TestSet");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
#endif
    result = (*call)(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    Py_LeaveRecursiveCall();
#endif
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    goto bad;
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
