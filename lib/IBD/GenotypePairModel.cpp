/* Generated by Cython 0.20.1 on Fri Aug 01 14:39:12 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20_1"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__IBD__GenotypePairModel
#define __PYX_HAVE_API__IBD__GenotypePairModel
#include "string.h"
#include "structs.h"
#include "math.h"
#include "float.h"
#include "limits.h"
#include "stdlib.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "GenotypePairModel.pyx",
  "GenotypePairModel.pxd",
  "TestSet.pxd",
  "GeneticMap.pxd",
  "LDModel.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_3IBD_10GeneticMap_GeneticMap;
struct __pyx_obj_3IBD_7LDModel_LDModel;
struct __pyx_obj_3IBD_7TestSet_TestSet;
struct __pyx_obj_3IBD_7TestSet_GenotypePair;
struct __pyx_obj_3IBD_7TestSet_Genotype;
struct __pyx_obj_3IBD_10InnerModel_InnerModel;
struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel;
struct __pyx_opt_args_3IBD_7TestSet_12GenotypePair_generate_random_haps_inplace;
struct __pyx_opt_args_3IBD_7TestSet_8Genotype_generate_random_haps_inplace;

/* "TestSet.pxd":47
 *         return self._haplos[3][snp_idx]
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=*)             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_ibd_segment(self, int start_snp, int snp_num)
 */
struct __pyx_opt_args_3IBD_7TestSet_12GenotypePair_generate_random_haps_inplace {
  int __pyx_n;
  int snp_num;
};

/* "TestSet.pxd":59
 *         return self._haplos[1][snp_idx]
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_3IBD_7TestSet_8Genotype_generate_random_haps_inplace {
  int __pyx_n;
  int snp_num;
};
struct __pyx_opt_args_3IBD_10InnerModel_10InnerModel_calc_likelihood;

/* "InnerModel.pxd":19
 *     cpdef double trans_prob(self, InnerModel other)
 * 
 *     cpdef double calc_likelihood(self, TestSet obs_data, bool free_mem=?)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_3IBD_10InnerModel_10InnerModel_calc_likelihood {
  int __pyx_n;
  bool free_mem;
};
struct __pyx_opt_args_3IBD_17GenotypePairModel_17GenotypePairModel_calc_likelihood;

/* "IBD\GenotypePairModel.pyx":342
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * self._backward_scale_factor[snp_idx]
 * 
 *     cpdef double calc_likelihood(self, TestSet obs_data, bool free_mem=True):             # <<<<<<<<<<<<<<
 *         cdef GenotypePair gp = <GenotypePair?>obs_data
 *         cdef int snp_idx
 */
struct __pyx_opt_args_3IBD_17GenotypePairModel_17GenotypePairModel_calc_likelihood {
  int __pyx_n;
  bool free_mem;
};

/* "GeneticMap.pxd":8
 * from libcpp cimport bool
 * 
 * cdef class GeneticMap(object):             # <<<<<<<<<<<<<<
 *     '''
 *     represents the genetic map data for a chromosome
 */
struct __pyx_obj_3IBD_10GeneticMap_GeneticMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_3IBD_10GeneticMap_GeneticMap *__pyx_vtab;
  bool _is_slice;
  int _snp_num;
  long *_position;
  double *_genetic_dist;
};


/* "LDModel.pxd":32
 *     gen_map_entry create_gen_map_entry(int position, double recomb_rate, double genetic_dist)
 * 
 * cdef class LDModel(object):             # <<<<<<<<<<<<<<
 *     '''
 *     Hidden Markov Model for a single ancestral population
 */
struct __pyx_obj_3IBD_7LDModel_LDModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_3IBD_7LDModel_LDModel *__pyx_vtab;
  bool _is_slice;
  double eps;
  double _alpha;
  int _anc;
  double _t_0_1;
  double _t_1_0;
  double *_pi;
  state **_states;
  double ***_trans;
  int ***_trans_idx;
  double ***_back_trans;
  int ***_back_trans_idx;
  char **_snp_ids;
  int *_layer_state_nums;
  struct __pyx_obj_3IBD_10GeneticMap_GeneticMap *_gm;
  int _snp_num;
  char _allele_0;
  char _allele_1;
};


/* "TestSet.pxd":10
 * from LDModel cimport LDModel
 * 
 * cdef class TestSet(object):             # <<<<<<<<<<<<<<
 * 
 *     # number of snps (layers) in the model
 */
struct __pyx_obj_3IBD_7TestSet_TestSet {
  PyObject_HEAD
  struct __pyx_vtabstruct_3IBD_7TestSet_TestSet *__pyx_vtab;
  int _snp_num;
  int _nr_haplos;
  char _allele_0;
  char _allele_1;
  bool **_haplos;
};


/* "TestSet.pxd":33
 *     cpdef generate_composite_individuals(self, LDModel m, num_inds)
 * 
 * cdef class GenotypePair(TestSet):             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr1(self, snp_idx):
 */
struct __pyx_obj_3IBD_7TestSet_GenotypePair {
  struct __pyx_obj_3IBD_7TestSet_TestSet __pyx_base;
};


/* "TestSet.pxd":51
 *     cpdef set_ibd_segment(self, int start_snp, int snp_num)
 * 
 * cdef class Genotype(TestSet):             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr1(self, snp_idx):
 */
struct __pyx_obj_3IBD_7TestSet_Genotype {
  struct __pyx_obj_3IBD_7TestSet_TestSet __pyx_base;
};


/* "InnerModel.pxd":10
 * from libcpp cimport bool
 * 
 * cdef class InnerModel(object):             # <<<<<<<<<<<<<<
 * 
 *     # initial probability of this model (use in Windowed Model)
 */
struct __pyx_obj_3IBD_10InnerModel_InnerModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_3IBD_10InnerModel_InnerModel *__pyx_vtab;
  double _prior;
};


/* "IBD\GenotypePairModel.pxd":23
 *         return first._alpha * second._alpha
 * 
 * cdef class GenotypePairModel(InnerModel):             # <<<<<<<<<<<<<<
 * 
 *     cdef public bool _phased
 */
struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel {
  struct __pyx_obj_3IBD_10InnerModel_InnerModel __pyx_base;
  bool _phased;
  int _ibd;
  int _g;
  struct __pyx_obj_3IBD_7LDModel_LDModel *_m1;
  struct __pyx_obj_3IBD_7LDModel_LDModel *_m2;
  struct __pyx_obj_3IBD_7LDModel_LDModel *_m3;
  struct __pyx_obj_3IBD_7LDModel_LDModel *_m4;
  double *****_forward_prob;
  double *****_backward_prob;
  double *****_emission_prob;
  double *_scale_factor;
  double *_backward_scale_factor;
};



/* "GeneticMap.pxd":8
 * from libcpp cimport bool
 * 
 * cdef class GeneticMap(object):             # <<<<<<<<<<<<<<
 *     '''
 *     represents the genetic map data for a chromosome
 */

struct __pyx_vtabstruct_3IBD_10GeneticMap_GeneticMap {
  struct __pyx_obj_3IBD_10GeneticMap_GeneticMap *(*get_slice)(struct __pyx_obj_3IBD_10GeneticMap_GeneticMap *, int, int, int __pyx_skip_dispatch);
  PyObject *(*get_position_dict)(struct __pyx_obj_3IBD_10GeneticMap_GeneticMap *, int __pyx_skip_dispatch);
  PyObject *(*get_genetic_dist_list)(struct __pyx_obj_3IBD_10GeneticMap_GeneticMap *, int __pyx_skip_dispatch);
  float (*get_length)(struct __pyx_obj_3IBD_10GeneticMap_GeneticMap *, int, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3IBD_10GeneticMap_GeneticMap *__pyx_vtabptr_3IBD_10GeneticMap_GeneticMap;


/* "LDModel.pxd":32
 *     gen_map_entry create_gen_map_entry(int position, double recomb_rate, double genetic_dist)
 * 
 * cdef class LDModel(object):             # <<<<<<<<<<<<<<
 *     '''
 *     Hidden Markov Model for a single ancestral population
 */

struct __pyx_vtabstruct_3IBD_7LDModel_LDModel {
  struct __pyx_obj_3IBD_7LDModel_LDModel *(*get_slice_model)(struct __pyx_obj_3IBD_7LDModel_LDModel *, int, int, int __pyx_skip_dispatch);
  int (*start_position)(struct __pyx_obj_3IBD_7LDModel_LDModel *, int __pyx_skip_dispatch);
  int (*end_position)(struct __pyx_obj_3IBD_7LDModel_LDModel *, int __pyx_skip_dispatch);
  int (*get_position)(struct __pyx_obj_3IBD_7LDModel_LDModel *, int, int __pyx_skip_dispatch);
  bool *(*generate_random_hap)(struct __pyx_obj_3IBD_7LDModel_LDModel *, int);
};
static struct __pyx_vtabstruct_3IBD_7LDModel_LDModel *__pyx_vtabptr_3IBD_7LDModel_LDModel;


/* "TestSet.pxd":10
 * from LDModel cimport LDModel
 * 
 * cdef class TestSet(object):             # <<<<<<<<<<<<<<
 * 
 *     # number of snps (layers) in the model
 */

struct __pyx_vtabstruct_3IBD_7TestSet_TestSet {
  struct __pyx_obj_3IBD_7TestSet_TestSet *(*get_slice)(struct __pyx_obj_3IBD_7TestSet_TestSet *, int, int, int __pyx_skip_dispatch);
  struct __pyx_obj_3IBD_7TestSet_GenotypePair *(*get_genotype_pair)(struct __pyx_obj_3IBD_7TestSet_TestSet *, int, int, int __pyx_skip_dispatch);
  struct __pyx_obj_3IBD_7TestSet_Genotype *(*get_genotype)(struct __pyx_obj_3IBD_7TestSet_TestSet *, int, int __pyx_skip_dispatch);
  PyObject *(*generate_composite_individuals)(struct __pyx_obj_3IBD_7TestSet_TestSet *, struct __pyx_obj_3IBD_7LDModel_LDModel *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3IBD_7TestSet_TestSet *__pyx_vtabptr_3IBD_7TestSet_TestSet;


/* "TestSet.pxd":33
 *     cpdef generate_composite_individuals(self, LDModel m, num_inds)
 * 
 * cdef class GenotypePair(TestSet):             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr1(self, snp_idx):
 */

struct __pyx_vtabstruct_3IBD_7TestSet_GenotypePair {
  struct __pyx_vtabstruct_3IBD_7TestSet_TestSet __pyx_base;
  bool (*chr1)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
  bool (*chr2)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
  bool (*chr3)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
  bool (*chr4)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
  PyObject *(*generate_random_haps_inplace)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, struct __pyx_obj_3IBD_7LDModel_LDModel *, int __pyx_skip_dispatch, struct __pyx_opt_args_3IBD_7TestSet_12GenotypePair_generate_random_haps_inplace *__pyx_optional_args);
  PyObject *(*set_ibd_segment)(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, int, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3IBD_7TestSet_GenotypePair *__pyx_vtabptr_3IBD_7TestSet_GenotypePair;
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr1(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr2(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr3(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr4(struct __pyx_obj_3IBD_7TestSet_GenotypePair *, PyObject *);


/* "TestSet.pxd":51
 *     cpdef set_ibd_segment(self, int start_snp, int snp_num)
 * 
 * cdef class Genotype(TestSet):             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr1(self, snp_idx):
 */

struct __pyx_vtabstruct_3IBD_7TestSet_Genotype {
  struct __pyx_vtabstruct_3IBD_7TestSet_TestSet __pyx_base;
  bool (*chr1)(struct __pyx_obj_3IBD_7TestSet_Genotype *, PyObject *);
  bool (*chr2)(struct __pyx_obj_3IBD_7TestSet_Genotype *, PyObject *);
  PyObject *(*generate_random_haps_inplace)(struct __pyx_obj_3IBD_7TestSet_Genotype *, struct __pyx_obj_3IBD_7LDModel_LDModel *, int __pyx_skip_dispatch, struct __pyx_opt_args_3IBD_7TestSet_8Genotype_generate_random_haps_inplace *__pyx_optional_args);
};
static struct __pyx_vtabstruct_3IBD_7TestSet_Genotype *__pyx_vtabptr_3IBD_7TestSet_Genotype;
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_8Genotype_chr1(struct __pyx_obj_3IBD_7TestSet_Genotype *, PyObject *);
static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_8Genotype_chr2(struct __pyx_obj_3IBD_7TestSet_Genotype *, PyObject *);


/* "InnerModel.pxd":10
 * from libcpp cimport bool
 * 
 * cdef class InnerModel(object):             # <<<<<<<<<<<<<<
 * 
 *     # initial probability of this model (use in Windowed Model)
 */

struct __pyx_vtabstruct_3IBD_10InnerModel_InnerModel {
  struct __pyx_obj_3IBD_10InnerModel_InnerModel *(*slice_from_model)(struct __pyx_obj_3IBD_10InnerModel_InnerModel *, int, int, int __pyx_skip_dispatch);
  double (*trans_prob)(struct __pyx_obj_3IBD_10InnerModel_InnerModel *, struct __pyx_obj_3IBD_10InnerModel_InnerModel *, int __pyx_skip_dispatch);
  double (*calc_likelihood)(struct __pyx_obj_3IBD_10InnerModel_InnerModel *, struct __pyx_obj_3IBD_7TestSet_TestSet *, int __pyx_skip_dispatch, struct __pyx_opt_args_3IBD_10InnerModel_10InnerModel_calc_likelihood *__pyx_optional_args);
};
static struct __pyx_vtabstruct_3IBD_10InnerModel_InnerModel *__pyx_vtabptr_3IBD_10InnerModel_InnerModel;


/* "IBD\GenotypePairModel.pyx":27
 * #inner_forward_probs_logger = logging.getLogger('innerforwardprobs')
 * 
 * cdef class GenotypePairModel(InnerModel):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, LDModel m1, LDModel m2, LDModel m3, LDModel m4, bool phased=False, int ibd=0, int g=8):
 */

struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel {
  struct __pyx_vtabstruct_3IBD_10InnerModel_InnerModel __pyx_base;
  PyObject *(*alloc_mem)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch);
  PyObject *(*free_mem)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch);
  PyObject *(*calc_emission_probs)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, struct __pyx_obj_3IBD_7TestSet_GenotypePair *, int __pyx_skip_dispatch);
  PyObject *(*calc_forward_probs)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch);
  PyObject *(*calc_backward_probs)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch);
  PyObject *(*rescale_forward)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int);
  PyObject *(*rescale_backward)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int);
  double (*ibd_trans_prob)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch);
  double (*anc_trans_prob)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch);
  PyObject *(*print_inner_prob)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_vtabptr_3IBD_17GenotypePairModel_GenotypePairModel;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

#ifndef CYTHON_PROFILE
  #define CYTHON_PROFILE 1
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL Py_CLEAR(__pyx_frame)
  #endif
  #define __Pyx_TraceDeclarations                                     \
  static PyCodeObject *__pyx_frame_code = NULL;                      \
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;           \
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)                            \
  if (unlikely(PyThreadState_GET()->use_tracing &&                                   \
          (PyThreadState_GET()->c_profilefunc || (CYTHON_TRACE && PyThreadState_GET()->c_tracefunc)))) {      \
      __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);  \
  }
  #define __Pyx_TraceException()                                                           \
  if (unlikely(__Pyx_use_tracing) && PyThreadState_GET()->use_tracing &&                   \
          (PyThreadState_GET()->c_profilefunc || (CYTHON_TRACE && PyThreadState_GET()->c_tracefunc))) {  \
      PyThreadState* tstate = PyThreadState_GET();                                         \
      tstate->use_tracing = 0;                                                             \
      PyObject *exc_info = __Pyx_GetExceptionTuple();                                      \
      if (exc_info) {                                                                      \
          if (CYTHON_TRACE && tstate->c_tracefunc)                                         \
              tstate->c_tracefunc(                                                         \
                  tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);          \
          tstate->c_profilefunc(                                                           \
              tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);            \
          Py_DECREF(exc_info);                                                             \
      }                                                                                    \
      tstate->use_tracing = 1;                                                             \
  }
  #define __Pyx_TraceReturn(result)                                                  \
  if (unlikely(__Pyx_use_tracing) && PyThreadState_GET()->use_tracing) {             \
      PyThreadState* tstate = PyThreadState_GET();                                   \
      tstate->use_tracing = 0;                                                        \
      if (CYTHON_TRACE && tstate->c_tracefunc)                                       \
          tstate->c_tracefunc(                                                       \
              tstate->c_traceobj, __pyx_frame, PyTrace_RETURN, (PyObject*)result);  \
      if (tstate->c_profilefunc)                                                     \
          tstate->c_profilefunc(                                                     \
              tstate->c_profileobj, __pyx_frame, PyTrace_RETURN, (PyObject*)result);  \
      CYTHON_FRAME_DEL;                                                              \
      tstate->use_tracing = 1;                                                       \
  }
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno); /*proto*/
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, const char *funcname, const char *srcfile, int firstlineno); /*proto*/
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result)
#endif /* CYTHON_PROFILE */
#if CYTHON_TRACE
  #define __Pyx_TraceLine(lineno)                                                          \
  if (unlikely(__Pyx_use_tracing) && unlikely(PyThreadState_GET()->use_tracing && PyThreadState_GET()->c_tracefunc)) {    \
      PyThreadState* tstate = PyThreadState_GET();                                         \
      __pyx_frame->f_lineno = lineno;                                                     \
      tstate->use_tracing = 0;                                                             \
      tstate->c_tracefunc(tstate->c_traceobj, __pyx_frame, PyTrace_LINE, NULL);           \
      tstate->use_tracing = 1;                                                             \
  }
#else
  #define __Pyx_TraceLine(lineno)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

static void* __Pyx_GetVtable(PyObject *dict); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp' */

/* Module declarations from 'IBD.GeneticMap' */
static PyTypeObject *__pyx_ptype_3IBD_10GeneticMap_GeneticMap = 0;

/* Module declarations from 'IBD.LDModel' */
static PyTypeObject *__pyx_ptype_3IBD_7LDModel_LDModel = 0;

/* Module declarations from 'IBD.TestSet' */
static PyTypeObject *__pyx_ptype_3IBD_7TestSet_TestSet = 0;
static PyTypeObject *__pyx_ptype_3IBD_7TestSet_GenotypePair = 0;
static PyTypeObject *__pyx_ptype_3IBD_7TestSet_Genotype = 0;

/* Module declarations from 'IBD.InnerModel' */
static PyTypeObject *__pyx_ptype_3IBD_10InnerModel_InnerModel = 0;

/* Module declarations from 'libc.math' */

/* Module declarations from 'libc.float' */

/* Module declarations from 'libc.limits' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'IBD.GenotypePairModel' */
static PyTypeObject *__pyx_ptype_3IBD_17GenotypePairModel_GenotypePairModel = 0;
static CYTHON_INLINE double __pyx_f_3IBD_17GenotypePairModel_single_anc_trans_prob(struct __pyx_obj_3IBD_7LDModel_LDModel *, struct __pyx_obj_3IBD_7LDModel_LDModel *); /*proto*/
#define __Pyx_MODULE_NAME "IBD.GenotypePairModel"
int __pyx_module_is_main_IBD__GenotypePairModel = 0;

/* Implementation of 'IBD.GenotypePairModel' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_reversed;
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel___cinit__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m1, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m2, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m3, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m4, bool __pyx_v_phased, int __pyx_v_ibd, int __pyx_v_g); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_2slice_from_model(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, int __pyx_v_start_snp, int __pyx_v_snp_num); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_4alloc_mem(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_6free_mem(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_8calc_emission_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_10calc_forward_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_12calc_backward_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_14calc_likelihood(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_obs_data, bool __pyx_v_free_mem); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_16ibd_trans_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_18anc_trans_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_20trans_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_10InnerModel_InnerModel *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_22print_inner_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_24get_ems_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_26get_forward_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_28get_scale_factors(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_2_g___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_2_g_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_4__del__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_4__del__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_4__del__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_4__del__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_3IBD_17GenotypePairModel_GenotypePairModel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_[] = " ";
static char __pyx_k_g[] = "g";
static char __pyx_k_m1[] = "m1";
static char __pyx_k_m2[] = "m2";
static char __pyx_k_m3[] = "m3";
static char __pyx_k_m4[] = "m4";
static char __pyx_k_os[] = "os";
static char __pyx_k_end[] = "end";
static char __pyx_k_ibd[] = "ibd";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_math[] = "math";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_islice[] = "islice";
static char __pyx_k_phased[] = "phased";
static char __pyx_k_LDModel[] = "LDModel";
static char __pyx_k_TestSet[] = "TestSet";
static char __pyx_k_logging[] = "logging";
static char __pyx_k_snp_num[] = "snp_num";
static char __pyx_k_free_mem[] = "free_mem";
static char __pyx_k_obs_data[] = "obs_data";
static char __pyx_k_reversed[] = "reversed";
static char __pyx_k_alloc_mem[] = "alloc_mem";
static char __pyx_k_itertools[] = "itertools";
static char __pyx_k_start_snp[] = "start_snp";
static char __pyx_k_InnerModel[] = "InnerModel";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_trans_prob[] = "trans_prob";
static char __pyx_k_GenotypePair[] = "GenotypePair";
static char __pyx_k_emission_prob[] = "_emission_prob";
static char __pyx_k_anc_trans_prob[] = "anc_trans_prob";
static char __pyx_k_ibd_trans_prob[] = "ibd_trans_prob";
static char __pyx_k_calc_likelihood[] = "calc_likelihood";
static char __pyx_k_layer_state_num[] = "_layer_state_num";
static char __pyx_k_print_inner_prob[] = "print_inner_prob";
static char __pyx_k_slice_from_model[] = "slice_from_model";
static char __pyx_k_calc_forward_probs[] = "calc_forward_probs";
static char __pyx_k_calc_backward_probs[] = "calc_backward_probs";
static char __pyx_k_calc_emission_probs[] = "calc_emission_probs";
static char __pyx_k_combinations_with_replacement[] = "combinations_with_replacement";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_GenotypePair;
static PyObject *__pyx_n_s_InnerModel;
static PyObject *__pyx_n_s_LDModel;
static PyObject *__pyx_n_s_TestSet;
static PyObject *__pyx_n_s_alloc_mem;
static PyObject *__pyx_n_s_anc_trans_prob;
static PyObject *__pyx_n_s_calc_backward_probs;
static PyObject *__pyx_n_s_calc_emission_probs;
static PyObject *__pyx_n_s_calc_forward_probs;
static PyObject *__pyx_n_s_calc_likelihood;
static PyObject *__pyx_n_s_combinations_with_replacement;
static PyObject *__pyx_n_s_emission_prob;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_free_mem;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_ibd;
static PyObject *__pyx_n_s_ibd_trans_prob;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_islice;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_layer_state_num;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_m1;
static PyObject *__pyx_n_s_m2;
static PyObject *__pyx_n_s_m3;
static PyObject *__pyx_n_s_m4;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_obs_data;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_phased;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_print_inner_prob;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reversed;
static PyObject *__pyx_n_s_slice_from_model;
static PyObject *__pyx_n_s_snp_num;
static PyObject *__pyx_n_s_start_snp;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_trans_prob;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;

/* "IBD\GenotypePairModel.pyx":29
 * cdef class GenotypePairModel(InnerModel):
 * 
 *     def __cinit__(self, LDModel m1, LDModel m2, LDModel m3, LDModel m4, bool phased=False, int ibd=0, int g=8):             # <<<<<<<<<<<<<<
 *         self._phased = phased
 *         self._ibd = ibd
 */

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m1 = 0;
  struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m2 = 0;
  struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m3 = 0;
  struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m4 = 0;
  bool __pyx_v_phased;
  int __pyx_v_ibd;
  int __pyx_v_g;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m1,&__pyx_n_s_m2,&__pyx_n_s_m3,&__pyx_n_s_m4,&__pyx_n_s_phased,&__pyx_n_s_ibd,&__pyx_n_s_g,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_m1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_m2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 7, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_m3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 7, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_m4)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 7, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phased);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ibd);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_m1 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)values[0]);
    __pyx_v_m2 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)values[1]);
    __pyx_v_m3 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)values[2]);
    __pyx_v_m4 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)values[3]);
    if (values[4]) {
      __pyx_v_phased = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_phased == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_phased = ((bool)0);
    }
    if (values[5]) {
      __pyx_v_ibd = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_ibd == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_ibd = ((int)0);
    }
    if (values[6]) {
      __pyx_v_g = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_g == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_g = ((int)8);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 4, 7, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m1), __pyx_ptype_3IBD_7LDModel_LDModel, 1, "m1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m2), __pyx_ptype_3IBD_7LDModel_LDModel, 1, "m2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m3), __pyx_ptype_3IBD_7LDModel_LDModel, 1, "m3", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_m4), __pyx_ptype_3IBD_7LDModel_LDModel, 1, "m4", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel___cinit__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), __pyx_v_m1, __pyx_v_m2, __pyx_v_m3, __pyx_v_m4, __pyx_v_phased, __pyx_v_ibd, __pyx_v_g);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel___cinit__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m1, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m2, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m3, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_m4, bool __pyx_v_phased, int __pyx_v_ibd, int __pyx_v_g) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 29);

  /* "IBD\GenotypePairModel.pyx":30
 * 
 *     def __cinit__(self, LDModel m1, LDModel m2, LDModel m3, LDModel m4, bool phased=False, int ibd=0, int g=8):
 *         self._phased = phased             # <<<<<<<<<<<<<<
 *         self._ibd = ibd
 *         self._g = g
 */
  __pyx_v_self->_phased = __pyx_v_phased;

  /* "IBD\GenotypePairModel.pyx":31
 *     def __cinit__(self, LDModel m1, LDModel m2, LDModel m3, LDModel m4, bool phased=False, int ibd=0, int g=8):
 *         self._phased = phased
 *         self._ibd = ibd             # <<<<<<<<<<<<<<
 *         self._g = g
 *         self._m1 = m1
 */
  __pyx_v_self->_ibd = __pyx_v_ibd;

  /* "IBD\GenotypePairModel.pyx":32
 *         self._phased = phased
 *         self._ibd = ibd
 *         self._g = g             # <<<<<<<<<<<<<<
 *         self._m1 = m1
 *         self._m2 = m2
 */
  __pyx_v_self->_g = __pyx_v_g;

  /* "IBD\GenotypePairModel.pyx":33
 *         self._ibd = ibd
 *         self._g = g
 *         self._m1 = m1             # <<<<<<<<<<<<<<
 *         self._m2 = m2
 *         self._m3 = m3
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_m1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_m1));
  __Pyx_GOTREF(__pyx_v_self->_m1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m1));
  __pyx_v_self->_m1 = __pyx_v_m1;

  /* "IBD\GenotypePairModel.pyx":34
 *         self._g = g
 *         self._m1 = m1
 *         self._m2 = m2             # <<<<<<<<<<<<<<
 *         self._m3 = m3
 *         self._m4 = m4
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_m2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_m2));
  __Pyx_GOTREF(__pyx_v_self->_m2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m2));
  __pyx_v_self->_m2 = __pyx_v_m2;

  /* "IBD\GenotypePairModel.pyx":35
 *         self._m1 = m1
 *         self._m2 = m2
 *         self._m3 = m3             # <<<<<<<<<<<<<<
 *         self._m4 = m4
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_m3));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_m3));
  __Pyx_GOTREF(__pyx_v_self->_m3);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m3));
  __pyx_v_self->_m3 = __pyx_v_m3;

  /* "IBD\GenotypePairModel.pyx":36
 *         self._m2 = m2
 *         self._m3 = m3
 *         self._m4 = m4             # <<<<<<<<<<<<<<
 * 
 *     cpdef InnerModel slice_from_model(self, int start_snp, int snp_num):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_m4));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_m4));
  __Pyx_GOTREF(__pyx_v_self->_m4);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m4));
  __pyx_v_self->_m4 = __pyx_v_m4;

  /* "IBD\GenotypePairModel.pyx":29
 * cdef class GenotypePairModel(InnerModel):
 * 
 *     def __cinit__(self, LDModel m1, LDModel m2, LDModel m3, LDModel m4, bool phased=False, int ibd=0, int g=8):             # <<<<<<<<<<<<<<
 *         self._phased = phased
 *         self._ibd = ibd
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":38
 *         self._m4 = m4
 * 
 *     cpdef InnerModel slice_from_model(self, int start_snp, int snp_num):             # <<<<<<<<<<<<<<
 *         return GenotypePairModel(self._m1.get_slice_model(start_snp,snp_num),
 *                                  self._m2.get_slice_model(start_snp,snp_num),
 */

static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3slice_from_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_3IBD_10InnerModel_InnerModel *__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_slice_from_model(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, int __pyx_v_start_snp, int __pyx_v_snp_num, int __pyx_skip_dispatch) {
  struct __pyx_obj_3IBD_10InnerModel_InnerModel *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("slice_from_model", 0);
  __Pyx_TraceCall("slice_from_model", __pyx_f[0], 38);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_slice_from_model); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3slice_from_model)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_start_snp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_snp_num); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_3IBD_10InnerModel_InnerModel))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_3IBD_10InnerModel_InnerModel *)__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":39
 * 
 *     cpdef InnerModel slice_from_model(self, int start_snp, int snp_num):
 *         return GenotypePairModel(self._m1.get_slice_model(start_snp,snp_num),             # <<<<<<<<<<<<<<
 *                                  self._m2.get_slice_model(start_snp,snp_num),
 *                                  self._m3.get_slice_model(start_snp,snp_num),
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3IBD_7LDModel_LDModel *)__pyx_v_self->_m1->__pyx_vtab)->get_slice_model(__pyx_v_self->_m1, __pyx_v_start_snp, __pyx_v_snp_num, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "IBD\GenotypePairModel.pyx":40
 *     cpdef InnerModel slice_from_model(self, int start_snp, int snp_num):
 *         return GenotypePairModel(self._m1.get_slice_model(start_snp,snp_num),
 *                                  self._m2.get_slice_model(start_snp,snp_num),             # <<<<<<<<<<<<<<
 *                                  self._m3.get_slice_model(start_snp,snp_num),
 *                                  self._m4.get_slice_model(start_snp,snp_num),
 */
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_3IBD_7LDModel_LDModel *)__pyx_v_self->_m2->__pyx_vtab)->get_slice_model(__pyx_v_self->_m2, __pyx_v_start_snp, __pyx_v_snp_num, 0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "IBD\GenotypePairModel.pyx":41
 *         return GenotypePairModel(self._m1.get_slice_model(start_snp,snp_num),
 *                                  self._m2.get_slice_model(start_snp,snp_num),
 *                                  self._m3.get_slice_model(start_snp,snp_num),             # <<<<<<<<<<<<<<
 *                                  self._m4.get_slice_model(start_snp,snp_num),
 *                                  self._phased,
 */
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_3IBD_7LDModel_LDModel *)__pyx_v_self->_m3->__pyx_vtab)->get_slice_model(__pyx_v_self->_m3, __pyx_v_start_snp, __pyx_v_snp_num, 0)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "IBD\GenotypePairModel.pyx":42
 *                                  self._m2.get_slice_model(start_snp,snp_num),
 *                                  self._m3.get_slice_model(start_snp,snp_num),
 *                                  self._m4.get_slice_model(start_snp,snp_num),             # <<<<<<<<<<<<<<
 *                                  self._phased,
 *                                  self._ibd,
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_3IBD_7LDModel_LDModel *)__pyx_v_self->_m4->__pyx_vtab)->get_slice_model(__pyx_v_self->_m4, __pyx_v_start_snp, __pyx_v_snp_num, 0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "IBD\GenotypePairModel.pyx":43
 *                                  self._m3.get_slice_model(start_snp,snp_num),
 *                                  self._m4.get_slice_model(start_snp,snp_num),
 *                                  self._phased,             # <<<<<<<<<<<<<<
 *                                  self._ibd,
 *                                  self._g)
 */
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_self->_phased); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "IBD\GenotypePairModel.pyx":44
 *                                  self._m4.get_slice_model(start_snp,snp_num),
 *                                  self._phased,
 *                                  self._ibd,             # <<<<<<<<<<<<<<
 *                                  self._g)
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->_ibd); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);

  /* "IBD\GenotypePairModel.pyx":45
 *                                  self._phased,
 *                                  self._ibd,
 *                                  self._g)             # <<<<<<<<<<<<<<
 * 
 *     cpdef alloc_mem(self):
 */
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->_g); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "IBD\GenotypePairModel.pyx":39
 * 
 *     cpdef InnerModel slice_from_model(self, int start_snp, int snp_num):
 *         return GenotypePairModel(self._m1.get_slice_model(start_snp,snp_num),             # <<<<<<<<<<<<<<
 *                                  self._m2.get_slice_model(start_snp,snp_num),
 *                                  self._m3.get_slice_model(start_snp,snp_num),
 */
  __pyx_t_8 = PyTuple_New(7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_3IBD_17GenotypePairModel_GenotypePairModel)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = ((struct __pyx_obj_3IBD_10InnerModel_InnerModel *)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "IBD\GenotypePairModel.pyx":38
 *         self._m4 = m4
 * 
 *     cpdef InnerModel slice_from_model(self, int start_snp, int snp_num):             # <<<<<<<<<<<<<<
 *         return GenotypePairModel(self._m1.get_slice_model(start_snp,snp_num),
 *                                  self._m2.get_slice_model(start_snp,snp_num),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.slice_from_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3slice_from_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3slice_from_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_start_snp;
  int __pyx_v_snp_num;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slice_from_model (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_snp,&__pyx_n_s_snp_num,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_snp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_snp_num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("slice_from_model", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slice_from_model") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_start_snp = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_start_snp == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_snp_num = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_snp_num == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slice_from_model", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.slice_from_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_2slice_from_model(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), __pyx_v_start_snp, __pyx_v_snp_num);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_2slice_from_model(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, int __pyx_v_start_snp, int __pyx_v_snp_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("slice_from_model", 0);
  __Pyx_TraceCall("slice_from_model", __pyx_f[0], 38);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.slice_from_model(((struct __pyx_obj_3IBD_10InnerModel_InnerModel *)__pyx_v_self), __pyx_v_start_snp, __pyx_v_snp_num, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.slice_from_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":47
 *                                  self._g)
 * 
 *     cpdef alloc_mem(self):             # <<<<<<<<<<<<<<
 *         cdef int snp_idx
 *         cdef int node_idx1
 */

static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_5alloc_mem(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_alloc_mem(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_snp_idx;
  int __pyx_v_node_idx1;
  int __pyx_v_node_idx2;
  int __pyx_v_node_idx3;
  int __pyx_v_node_idx4;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("alloc_mem", 0);
  __Pyx_TraceCall("alloc_mem", __pyx_f[0], 47);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_alloc_mem); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_5alloc_mem)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":54
 *         cdef int node_idx4
 * 
 *         self._forward_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))             # <<<<<<<<<<<<<<
 *         self._backward_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))
 *         self._emission_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))
 */
  __pyx_v_self->_forward_prob = ((double *****)malloc((__pyx_v_self->_m1->_snp_num * (sizeof(double ****)))));

  /* "IBD\GenotypePairModel.pyx":55
 * 
 *         self._forward_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))
 *         self._backward_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))             # <<<<<<<<<<<<<<
 *         self._emission_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))
 *         self._scale_factor = <double *> malloc((self._m1._snp_num) * sizeof(double))
 */
  __pyx_v_self->_backward_prob = ((double *****)malloc((__pyx_v_self->_m1->_snp_num * (sizeof(double ****)))));

  /* "IBD\GenotypePairModel.pyx":56
 *         self._forward_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))
 *         self._backward_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))
 *         self._emission_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))             # <<<<<<<<<<<<<<
 *         self._scale_factor = <double *> malloc((self._m1._snp_num) * sizeof(double))
 *         self._backward_scale_factor = <double *> malloc((self._m1._snp_num) * sizeof(double))
 */
  __pyx_v_self->_emission_prob = ((double *****)malloc((__pyx_v_self->_m1->_snp_num * (sizeof(double ****)))));

  /* "IBD\GenotypePairModel.pyx":57
 *         self._backward_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))
 *         self._emission_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))
 *         self._scale_factor = <double *> malloc((self._m1._snp_num) * sizeof(double))             # <<<<<<<<<<<<<<
 *         self._backward_scale_factor = <double *> malloc((self._m1._snp_num) * sizeof(double))
 *         for snp_idx in range(self._m1._snp_num):
 */
  __pyx_v_self->_scale_factor = ((double *)malloc((__pyx_v_self->_m1->_snp_num * (sizeof(double)))));

  /* "IBD\GenotypePairModel.pyx":58
 *         self._emission_prob = <double *****> malloc((self._m1._snp_num) * sizeof(double****))
 *         self._scale_factor = <double *> malloc((self._m1._snp_num) * sizeof(double))
 *         self._backward_scale_factor = <double *> malloc((self._m1._snp_num) * sizeof(double))             # <<<<<<<<<<<<<<
 *         for snp_idx in range(self._m1._snp_num):
 *             self._forward_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 */
  __pyx_v_self->_backward_scale_factor = ((double *)malloc((__pyx_v_self->_m1->_snp_num * (sizeof(double)))));

  /* "IBD\GenotypePairModel.pyx":59
 *         self._scale_factor = <double *> malloc((self._m1._snp_num) * sizeof(double))
 *         self._backward_scale_factor = <double *> malloc((self._m1._snp_num) * sizeof(double))
 *         for snp_idx in range(self._m1._snp_num):             # <<<<<<<<<<<<<<
 *             self._forward_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 *             self._backward_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 */
  __pyx_t_3 = __pyx_v_self->_m1->_snp_num;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_snp_idx = __pyx_t_4;

    /* "IBD\GenotypePairModel.pyx":60
 *         self._backward_scale_factor = <double *> malloc((self._m1._snp_num) * sizeof(double))
 *         for snp_idx in range(self._m1._snp_num):
 *             self._forward_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))             # <<<<<<<<<<<<<<
 *             self._backward_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 *             self._emission_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 */
    (__pyx_v_self->_forward_prob[__pyx_v_snp_idx]) = ((double ****)malloc(((__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double ***)))));

    /* "IBD\GenotypePairModel.pyx":61
 *         for snp_idx in range(self._m1._snp_num):
 *             self._forward_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 *             self._backward_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))             # <<<<<<<<<<<<<<
 *             self._emission_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 *             self._scale_factor[snp_idx] = 0
 */
    (__pyx_v_self->_backward_prob[__pyx_v_snp_idx]) = ((double ****)malloc(((__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double ***)))));

    /* "IBD\GenotypePairModel.pyx":62
 *             self._forward_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 *             self._backward_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 *             self._emission_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))             # <<<<<<<<<<<<<<
 *             self._scale_factor[snp_idx] = 0
 *             self._backward_scale_factor[snp_idx] = 0
 */
    (__pyx_v_self->_emission_prob[__pyx_v_snp_idx]) = ((double ****)malloc(((__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double ***)))));

    /* "IBD\GenotypePairModel.pyx":63
 *             self._backward_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 *             self._emission_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 *             self._scale_factor[snp_idx] = 0             # <<<<<<<<<<<<<<
 *             self._backward_scale_factor[snp_idx] = 0
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 */
    (__pyx_v_self->_scale_factor[__pyx_v_snp_idx]) = 0.0;

    /* "IBD\GenotypePairModel.pyx":64
 *             self._emission_prob[snp_idx]= <double ****> malloc((self._m1._layer_state_nums[snp_idx]) * sizeof(double***))
 *             self._scale_factor[snp_idx] = 0
 *             self._backward_scale_factor[snp_idx] = 0             # <<<<<<<<<<<<<<
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 self._forward_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 */
    (__pyx_v_self->_backward_scale_factor[__pyx_v_snp_idx]) = 0.0;

    /* "IBD\GenotypePairModel.pyx":65
 *             self._scale_factor[snp_idx] = 0
 *             self._backward_scale_factor[snp_idx] = 0
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                 self._forward_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 *                 self._backward_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 */
    __pyx_t_5 = (__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_node_idx1 = __pyx_t_6;

      /* "IBD\GenotypePairModel.pyx":66
 *             self._backward_scale_factor[snp_idx] = 0
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 self._forward_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))             # <<<<<<<<<<<<<<
 *                 self._backward_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 *                 self._emission_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 */
      ((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1]) = ((double ***)malloc(((__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double **)))));

      /* "IBD\GenotypePairModel.pyx":67
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 self._forward_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 *                 self._backward_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))             # <<<<<<<<<<<<<<
 *                 self._emission_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 */
      ((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1]) = ((double ***)malloc(((__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double **)))));

      /* "IBD\GenotypePairModel.pyx":68
 *                 self._forward_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 *                 self._backward_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 *                 self._emission_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))             # <<<<<<<<<<<<<<
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     self._forward_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 */
      ((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1]) = ((double ***)malloc(((__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double **)))));

      /* "IBD\GenotypePairModel.pyx":69
 *                 self._backward_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 *                 self._emission_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                     self._forward_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 *                     self._backward_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 */
      __pyx_t_7 = (__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx]);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_node_idx2 = __pyx_t_8;

        /* "IBD\GenotypePairModel.pyx":70
 *                 self._emission_prob[snp_idx][node_idx1] = <double ***> malloc((self._m2._layer_state_nums[snp_idx]) * sizeof(double**))
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     self._forward_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))             # <<<<<<<<<<<<<<
 *                     self._backward_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 *                     self._emission_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 */
        (((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2]) = ((double **)malloc(((__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double *)))));

        /* "IBD\GenotypePairModel.pyx":71
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     self._forward_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 *                     self._backward_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))             # <<<<<<<<<<<<<<
 *                     self._emission_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 */
        (((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2]) = ((double **)malloc(((__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double *)))));

        /* "IBD\GenotypePairModel.pyx":72
 *                     self._forward_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 *                     self._backward_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 *                     self._emission_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))             # <<<<<<<<<<<<<<
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 */
        (((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2]) = ((double **)malloc(((__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double *)))));

        /* "IBD\GenotypePairModel.pyx":73
 *                     self._backward_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 *                     self._emission_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 */
        __pyx_t_9 = (__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]);
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_node_idx3 = __pyx_t_10;

          /* "IBD\GenotypePairModel.pyx":74
 *                     self._emission_prob[snp_idx][node_idx1][node_idx2] = <double **> malloc((self._m3._layer_state_nums[snp_idx]) * sizeof(double*))
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))             # <<<<<<<<<<<<<<
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 *                         self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 */
          ((((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3]) = ((double *)malloc(((__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double)))));

          /* "IBD\GenotypePairModel.pyx":75
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))             # <<<<<<<<<<<<<<
 *                         self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 */
          ((((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3]) = ((double *)malloc(((__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double)))));

          /* "IBD\GenotypePairModel.pyx":76
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 *                         self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))             # <<<<<<<<<<<<<<
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0
 */
          ((((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3]) = ((double *)malloc(((__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]) * (sizeof(double)))));

          /* "IBD\GenotypePairModel.pyx":77
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 *                         self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                             self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0
 *                             self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0
 */
          __pyx_t_11 = (__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]);
          for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
            __pyx_v_node_idx4 = __pyx_t_12;

            /* "IBD\GenotypePairModel.pyx":78
 *                         self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3] = <double *> malloc((self._m4._layer_state_nums[snp_idx]) * sizeof(double))
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0             # <<<<<<<<<<<<<<
 *                             self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0
 *                             self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0
 */
            (((((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) = 0.0;

            /* "IBD\GenotypePairModel.pyx":79
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0
 *                             self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0             # <<<<<<<<<<<<<<
 *                             self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0
 * 
 */
            (((((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) = 0.0;

            /* "IBD\GenotypePairModel.pyx":80
 *                             self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0
 *                             self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0
 *                             self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef free_mem(self):
 */
            (((((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) = 0.0;
          }
        }
      }
    }
  }

  /* "IBD\GenotypePairModel.pyx":47
 *                                  self._g)
 * 
 *     cpdef alloc_mem(self):             # <<<<<<<<<<<<<<
 *         cdef int snp_idx
 *         cdef int node_idx1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.alloc_mem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_5alloc_mem(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_5alloc_mem(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alloc_mem (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_4alloc_mem(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_4alloc_mem(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("alloc_mem", 0);
  __Pyx_TraceCall("alloc_mem", __pyx_f[0], 47);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->alloc_mem(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.alloc_mem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":82
 *                             self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0
 * 
 *     cpdef free_mem(self):             # <<<<<<<<<<<<<<
 *         cdef int snp_idx
 *         cdef int node_idx1
 */

static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_7free_mem(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_free_mem(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_snp_idx;
  int __pyx_v_node_idx1;
  int __pyx_v_node_idx2;
  int __pyx_v_node_idx3;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("free_mem", 0);
  __Pyx_TraceCall("free_mem", __pyx_f[0], 82);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_free_mem); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_7free_mem)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":89
 *         cdef int node_idx4
 * 
 *         free(self._scale_factor)             # <<<<<<<<<<<<<<
 *         free(self._backward_scale_factor)
 *         for snp_idx in range(self._m1._snp_num):
 */
  free(__pyx_v_self->_scale_factor);

  /* "IBD\GenotypePairModel.pyx":90
 * 
 *         free(self._scale_factor)
 *         free(self._backward_scale_factor)             # <<<<<<<<<<<<<<
 *         for snp_idx in range(self._m1._snp_num):
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 */
  free(__pyx_v_self->_backward_scale_factor);

  /* "IBD\GenotypePairModel.pyx":91
 *         free(self._scale_factor)
 *         free(self._backward_scale_factor)
 *         for snp_idx in range(self._m1._snp_num):             # <<<<<<<<<<<<<<
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 */
  __pyx_t_3 = __pyx_v_self->_m1->_snp_num;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_snp_idx = __pyx_t_4;

    /* "IBD\GenotypePairModel.pyx":92
 *         free(self._backward_scale_factor)
 *         for snp_idx in range(self._m1._snp_num):
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 */
    __pyx_t_5 = (__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_node_idx1 = __pyx_t_6;

      /* "IBD\GenotypePairModel.pyx":93
 *         for snp_idx in range(self._m1._snp_num):
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         free(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 */
      __pyx_t_7 = (__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx]);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_node_idx2 = __pyx_t_8;

        /* "IBD\GenotypePairModel.pyx":94
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                         free(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 *                         free(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 */
        __pyx_t_9 = (__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]);
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_node_idx3 = __pyx_t_10;

          /* "IBD\GenotypePairModel.pyx":95
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         free(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3])             # <<<<<<<<<<<<<<
 *                         free(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 *                         free(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 */
          free(((((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3]));

          /* "IBD\GenotypePairModel.pyx":96
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         free(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 *                         free(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3])             # <<<<<<<<<<<<<<
 *                         free(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 *                     free(self._forward_prob[snp_idx][node_idx1][node_idx2])
 */
          free(((((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3]));

          /* "IBD\GenotypePairModel.pyx":97
 *                         free(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 *                         free(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 *                         free(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3])             # <<<<<<<<<<<<<<
 *                     free(self._forward_prob[snp_idx][node_idx1][node_idx2])
 *                     free(self._backward_prob[snp_idx][node_idx1][node_idx2])
 */
          free(((((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3]));
        }

        /* "IBD\GenotypePairModel.pyx":98
 *                         free(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 *                         free(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 *                     free(self._forward_prob[snp_idx][node_idx1][node_idx2])             # <<<<<<<<<<<<<<
 *                     free(self._backward_prob[snp_idx][node_idx1][node_idx2])
 *                     free(self._emission_prob[snp_idx][node_idx1][node_idx2])
 */
        free((((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2]));

        /* "IBD\GenotypePairModel.pyx":99
 *                         free(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3])
 *                     free(self._forward_prob[snp_idx][node_idx1][node_idx2])
 *                     free(self._backward_prob[snp_idx][node_idx1][node_idx2])             # <<<<<<<<<<<<<<
 *                     free(self._emission_prob[snp_idx][node_idx1][node_idx2])
 *                 free(self._forward_prob[snp_idx][node_idx1])
 */
        free((((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2]));

        /* "IBD\GenotypePairModel.pyx":100
 *                     free(self._forward_prob[snp_idx][node_idx1][node_idx2])
 *                     free(self._backward_prob[snp_idx][node_idx1][node_idx2])
 *                     free(self._emission_prob[snp_idx][node_idx1][node_idx2])             # <<<<<<<<<<<<<<
 *                 free(self._forward_prob[snp_idx][node_idx1])
 *                 free(self._backward_prob[snp_idx][node_idx1])
 */
        free((((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2]));
      }

      /* "IBD\GenotypePairModel.pyx":101
 *                     free(self._backward_prob[snp_idx][node_idx1][node_idx2])
 *                     free(self._emission_prob[snp_idx][node_idx1][node_idx2])
 *                 free(self._forward_prob[snp_idx][node_idx1])             # <<<<<<<<<<<<<<
 *                 free(self._backward_prob[snp_idx][node_idx1])
 *                 free(self._emission_prob[snp_idx][node_idx1])
 */
      free(((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1]));

      /* "IBD\GenotypePairModel.pyx":102
 *                     free(self._emission_prob[snp_idx][node_idx1][node_idx2])
 *                 free(self._forward_prob[snp_idx][node_idx1])
 *                 free(self._backward_prob[snp_idx][node_idx1])             # <<<<<<<<<<<<<<
 *                 free(self._emission_prob[snp_idx][node_idx1])
 *             free(self._forward_prob[snp_idx])
 */
      free(((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1]));

      /* "IBD\GenotypePairModel.pyx":103
 *                 free(self._forward_prob[snp_idx][node_idx1])
 *                 free(self._backward_prob[snp_idx][node_idx1])
 *                 free(self._emission_prob[snp_idx][node_idx1])             # <<<<<<<<<<<<<<
 *             free(self._forward_prob[snp_idx])
 *             free(self._backward_prob[snp_idx])
 */
      free(((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1]));
    }

    /* "IBD\GenotypePairModel.pyx":104
 *                 free(self._backward_prob[snp_idx][node_idx1])
 *                 free(self._emission_prob[snp_idx][node_idx1])
 *             free(self._forward_prob[snp_idx])             # <<<<<<<<<<<<<<
 *             free(self._backward_prob[snp_idx])
 *             free(self._emission_prob[snp_idx])
 */
    free((__pyx_v_self->_forward_prob[__pyx_v_snp_idx]));

    /* "IBD\GenotypePairModel.pyx":105
 *                 free(self._emission_prob[snp_idx][node_idx1])
 *             free(self._forward_prob[snp_idx])
 *             free(self._backward_prob[snp_idx])             # <<<<<<<<<<<<<<
 *             free(self._emission_prob[snp_idx])
 *         free(self._forward_prob)
 */
    free((__pyx_v_self->_backward_prob[__pyx_v_snp_idx]));

    /* "IBD\GenotypePairModel.pyx":106
 *             free(self._forward_prob[snp_idx])
 *             free(self._backward_prob[snp_idx])
 *             free(self._emission_prob[snp_idx])             # <<<<<<<<<<<<<<
 *         free(self._forward_prob)
 *         free(self._backward_prob)
 */
    free((__pyx_v_self->_emission_prob[__pyx_v_snp_idx]));
  }

  /* "IBD\GenotypePairModel.pyx":107
 *             free(self._backward_prob[snp_idx])
 *             free(self._emission_prob[snp_idx])
 *         free(self._forward_prob)             # <<<<<<<<<<<<<<
 *         free(self._backward_prob)
 *         free(self._emission_prob)
 */
  free(__pyx_v_self->_forward_prob);

  /* "IBD\GenotypePairModel.pyx":108
 *             free(self._emission_prob[snp_idx])
 *         free(self._forward_prob)
 *         free(self._backward_prob)             # <<<<<<<<<<<<<<
 *         free(self._emission_prob)
 * 
 */
  free(__pyx_v_self->_backward_prob);

  /* "IBD\GenotypePairModel.pyx":109
 *         free(self._forward_prob)
 *         free(self._backward_prob)
 *         free(self._emission_prob)             # <<<<<<<<<<<<<<
 * 
 *     cpdef calc_emission_probs(self, GenotypePair p):
 */
  free(__pyx_v_self->_emission_prob);

  /* "IBD\GenotypePairModel.pyx":82
 *                             self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = 0
 * 
 *     cpdef free_mem(self):             # <<<<<<<<<<<<<<
 *         cdef int snp_idx
 *         cdef int node_idx1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.free_mem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_7free_mem(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_7free_mem(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("free_mem (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_6free_mem(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_6free_mem(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("free_mem", 0);
  __Pyx_TraceCall("free_mem", __pyx_f[0], 82);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->free_mem(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.free_mem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":111
 *         free(self._emission_prob)
 * 
 *     cpdef calc_emission_probs(self, GenotypePair p):             # <<<<<<<<<<<<<<
 * 
 *         cdef int snp_idx
 */

static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_9calc_emission_probs(PyObject *__pyx_v_self, PyObject *__pyx_v_p); /*proto*/
static PyObject *__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_calc_emission_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_p, int __pyx_skip_dispatch) {
  int __pyx_v_snp_idx;
  int __pyx_v_node_idx1;
  int __pyx_v_node_idx2;
  int __pyx_v_node_idx3;
  int __pyx_v_node_idx4;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("calc_emission_probs", 0);
  __Pyx_TraceCall("calc_emission_probs", __pyx_f[0], 111);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_calc_emission_probs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_9calc_emission_probs)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_p));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_p));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_p));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":119
 *         cdef int node_idx4
 * 
 *         for snp_idx in range(self._m1._snp_num):             # <<<<<<<<<<<<<<
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 */
  __pyx_t_4 = __pyx_v_self->_m1->_snp_num;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_snp_idx = __pyx_t_5;

    /* "IBD\GenotypePairModel.pyx":120
 * 
 *         for snp_idx in range(self._m1._snp_num):
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 */
    __pyx_t_6 = (__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]);
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_node_idx1 = __pyx_t_7;

      /* "IBD\GenotypePairModel.pyx":121
 *         for snp_idx in range(self._m1._snp_num):
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 */
      __pyx_t_8 = (__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx]);
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_node_idx2 = __pyx_t_9;

        /* "IBD\GenotypePairModel.pyx":122
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             if not self._phased:
 */
        __pyx_t_10 = (__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]);
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
          __pyx_v_node_idx3 = __pyx_t_11;

          /* "IBD\GenotypePairModel.pyx":123
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                             if not self._phased:
 *                                 if p.chr1(snp_idx) == p.chr2(snp_idx):
 */
          __pyx_t_12 = (__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]);
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
            __pyx_v_node_idx4 = __pyx_t_13;

            /* "IBD\GenotypePairModel.pyx":124
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             if not self._phased:             # <<<<<<<<<<<<<<
 *                                 if p.chr1(snp_idx) == p.chr2(snp_idx):
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 */
            __pyx_t_14 = ((!(__pyx_v_self->_phased != 0)) != 0);
            if (__pyx_t_14) {

              /* "IBD\GenotypePairModel.pyx":125
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             if not self._phased:
 *                                 if p.chr1(snp_idx) == p.chr2(snp_idx):             # <<<<<<<<<<<<<<
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 *                                     self._m1._states[snp_idx][node_idx1].prob_em[p.chr1(snp_idx)] * self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)]
 */
              __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_14 = ((__pyx_f_3IBD_7TestSet_12GenotypePair_chr1(__pyx_v_p, __pyx_t_1) == __pyx_f_3IBD_7TestSet_12GenotypePair_chr2(__pyx_v_p, __pyx_t_3)) != 0);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (__pyx_t_14) {

                /* "IBD\GenotypePairModel.pyx":127
 *                                 if p.chr1(snp_idx) == p.chr2(snp_idx):
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 *                                     self._m1._states[snp_idx][node_idx1].prob_em[p.chr1(snp_idx)] * self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)]             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 */
                __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_1);

                /* "IBD\GenotypePairModel.pyx":126
 *                             if not self._phased:
 *                                 if p.chr1(snp_idx) == p.chr2(snp_idx):
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \             # <<<<<<<<<<<<<<
 *                                     self._m1._states[snp_idx][node_idx1].prob_em[p.chr1(snp_idx)] * self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)]
 *                                 else:
 */
                (((((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) = ((((__pyx_v_self->_m1->_states[__pyx_v_snp_idx])[__pyx_v_node_idx1]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr1(__pyx_v_p, __pyx_t_3)]) * (((__pyx_v_self->_m2->_states[__pyx_v_snp_idx])[__pyx_v_node_idx2]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr2(__pyx_v_p, __pyx_t_1)]));
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                goto __pyx_L14;
              }
              /*else*/ {

                /* "IBD\GenotypePairModel.pyx":130
 *                                 else:
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 *                                     self._m1._states[snp_idx][node_idx1].prob_em[p.chr1(snp_idx)] * self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)] + \             # <<<<<<<<<<<<<<
 *                                     self._m1._states[snp_idx][node_idx1].prob_em[p.chr2(snp_idx)] * self._m2._states[snp_idx][node_idx2].prob_em[p.chr1(snp_idx)]
 * 
 */
                __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_3);

                /* "IBD\GenotypePairModel.pyx":131
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 *                                     self._m1._states[snp_idx][node_idx1].prob_em[p.chr1(snp_idx)] * self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)] + \
 *                                     self._m1._states[snp_idx][node_idx1].prob_em[p.chr2(snp_idx)] * self._m2._states[snp_idx][node_idx2].prob_em[p.chr1(snp_idx)]             # <<<<<<<<<<<<<<
 * 
 *                                 if p.chr3(snp_idx) == p.chr4(snp_idx):
 */
                __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_15);

                /* "IBD\GenotypePairModel.pyx":129
 *                                     self._m1._states[snp_idx][node_idx1].prob_em[p.chr1(snp_idx)] * self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)]
 *                                 else:
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \             # <<<<<<<<<<<<<<
 *                                     self._m1._states[snp_idx][node_idx1].prob_em[p.chr1(snp_idx)] * self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)] + \
 *                                     self._m1._states[snp_idx][node_idx1].prob_em[p.chr2(snp_idx)] * self._m2._states[snp_idx][node_idx2].prob_em[p.chr1(snp_idx)]
 */
                (((((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) = (((((__pyx_v_self->_m1->_states[__pyx_v_snp_idx])[__pyx_v_node_idx1]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr1(__pyx_v_p, __pyx_t_1)]) * (((__pyx_v_self->_m2->_states[__pyx_v_snp_idx])[__pyx_v_node_idx2]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr2(__pyx_v_p, __pyx_t_3)])) + ((((__pyx_v_self->_m1->_states[__pyx_v_snp_idx])[__pyx_v_node_idx1]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr2(__pyx_v_p, __pyx_t_2)]) * (((__pyx_v_self->_m2->_states[__pyx_v_snp_idx])[__pyx_v_node_idx2]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr1(__pyx_v_p, __pyx_t_15)])));
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              }
              __pyx_L14:;

              /* "IBD\GenotypePairModel.pyx":133
 *                                     self._m1._states[snp_idx][node_idx1].prob_em[p.chr2(snp_idx)] * self._m2._states[snp_idx][node_idx2].prob_em[p.chr1(snp_idx)]
 * 
 *                                 if p.chr3(snp_idx) == p.chr4(snp_idx):             # <<<<<<<<<<<<<<
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] *= \
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)]
 */
              __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_14 = ((__pyx_f_3IBD_7TestSet_12GenotypePair_chr3(__pyx_v_p, __pyx_t_15) == __pyx_f_3IBD_7TestSet_12GenotypePair_chr4(__pyx_v_p, __pyx_t_2)) != 0);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (__pyx_t_14) {

                /* "IBD\GenotypePairModel.pyx":134
 * 
 *                                 if p.chr3(snp_idx) == p.chr4(snp_idx):
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] *= \             # <<<<<<<<<<<<<<
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)]
 *                                 else:
 */
                __pyx_t_16 = __pyx_v_snp_idx;
                __pyx_t_17 = __pyx_v_node_idx1;
                __pyx_t_18 = __pyx_v_node_idx2;
                __pyx_t_19 = __pyx_v_node_idx3;
                __pyx_t_20 = __pyx_v_node_idx4;

                /* "IBD\GenotypePairModel.pyx":135
 *                                 if p.chr3(snp_idx) == p.chr4(snp_idx):
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] *= \
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)]             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] *= \
 */
                __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_15);

                /* "IBD\GenotypePairModel.pyx":134
 * 
 *                                 if p.chr3(snp_idx) == p.chr4(snp_idx):
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] *= \             # <<<<<<<<<<<<<<
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)]
 *                                 else:
 */
                (((((__pyx_v_self->_emission_prob[__pyx_t_16])[__pyx_t_17])[__pyx_t_18])[__pyx_t_19])[__pyx_t_20]) = ((((((__pyx_v_self->_emission_prob[__pyx_t_16])[__pyx_t_17])[__pyx_t_18])[__pyx_t_19])[__pyx_t_20]) * ((((__pyx_v_self->_m3->_states[__pyx_v_snp_idx])[__pyx_v_node_idx3]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr3(__pyx_v_p, __pyx_t_2)]) * (((__pyx_v_self->_m4->_states[__pyx_v_snp_idx])[__pyx_v_node_idx4]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr4(__pyx_v_p, __pyx_t_15)])));
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                goto __pyx_L15;
              }
              /*else*/ {

                /* "IBD\GenotypePairModel.pyx":137
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)]
 *                                 else:
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] *= \             # <<<<<<<<<<<<<<
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)] + \
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr4(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr3(snp_idx)]
 */
                __pyx_t_16 = __pyx_v_snp_idx;
                __pyx_t_17 = __pyx_v_node_idx1;
                __pyx_t_18 = __pyx_v_node_idx2;
                __pyx_t_19 = __pyx_v_node_idx3;
                __pyx_t_20 = __pyx_v_node_idx4;

                /* "IBD\GenotypePairModel.pyx":138
 *                                 else:
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] *= \
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)] + \             # <<<<<<<<<<<<<<
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr4(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr3(snp_idx)]
 *                             else:
 */
                __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_2);

                /* "IBD\GenotypePairModel.pyx":139
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] *= \
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)] + \
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr4(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr3(snp_idx)]             # <<<<<<<<<<<<<<
 *                             else:
 *                                 self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 */
                __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __Pyx_GOTREF(__pyx_t_1);

                /* "IBD\GenotypePairModel.pyx":137
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)]
 *                                 else:
 *                                     self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] *= \             # <<<<<<<<<<<<<<
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)] + \
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr4(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr3(snp_idx)]
 */
                (((((__pyx_v_self->_emission_prob[__pyx_t_16])[__pyx_t_17])[__pyx_t_18])[__pyx_t_19])[__pyx_t_20]) = ((((((__pyx_v_self->_emission_prob[__pyx_t_16])[__pyx_t_17])[__pyx_t_18])[__pyx_t_19])[__pyx_t_20]) * (((((__pyx_v_self->_m3->_states[__pyx_v_snp_idx])[__pyx_v_node_idx3]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr3(__pyx_v_p, __pyx_t_15)]) * (((__pyx_v_self->_m4->_states[__pyx_v_snp_idx])[__pyx_v_node_idx4]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr4(__pyx_v_p, __pyx_t_2)])) + ((((__pyx_v_self->_m3->_states[__pyx_v_snp_idx])[__pyx_v_node_idx3]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr4(__pyx_v_p, __pyx_t_3)]) * (((__pyx_v_self->_m4->_states[__pyx_v_snp_idx])[__pyx_v_node_idx4]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr3(__pyx_v_p, __pyx_t_1)]))));
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              }
              __pyx_L15:;
              goto __pyx_L13;
            }
            /*else*/ {

              /* "IBD\GenotypePairModel.pyx":142
 *                             else:
 *                                 self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 *                                 self._m1._states[snp_idx][node_idx1].prob_em[p.chr1(snp_idx)] * \             # <<<<<<<<<<<<<<
 *                                 self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)] * \
 *                                 self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * \
 */
              __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_1);

              /* "IBD\GenotypePairModel.pyx":143
 *                                 self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 *                                 self._m1._states[snp_idx][node_idx1].prob_em[p.chr1(snp_idx)] * \
 *                                 self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)] * \             # <<<<<<<<<<<<<<
 *                                 self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * \
 *                                 self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)]
 */
              __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_3);

              /* "IBD\GenotypePairModel.pyx":144
 *                                 self._m1._states[snp_idx][node_idx1].prob_em[p.chr1(snp_idx)] * \
 *                                 self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)] * \
 *                                 self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * \             # <<<<<<<<<<<<<<
 *                                 self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)]
 * 
 */
              __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_2);

              /* "IBD\GenotypePairModel.pyx":145
 *                                 self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)] * \
 *                                 self._m3._states[snp_idx][node_idx3].prob_em[p.chr3(snp_idx)] * \
 *                                 self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)]             # <<<<<<<<<<<<<<
 * 
 *     cpdef calc_forward_probs(self):
 */
              __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_15);

              /* "IBD\GenotypePairModel.pyx":141
 *                                     self._m3._states[snp_idx][node_idx3].prob_em[p.chr4(snp_idx)] * self._m4._states[snp_idx][node_idx4].prob_em[p.chr3(snp_idx)]
 *                             else:
 *                                 self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \             # <<<<<<<<<<<<<<
 *                                 self._m1._states[snp_idx][node_idx1].prob_em[p.chr1(snp_idx)] * \
 *                                 self._m2._states[snp_idx][node_idx2].prob_em[p.chr2(snp_idx)] * \
 */
              (((((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) = ((((((__pyx_v_self->_m1->_states[__pyx_v_snp_idx])[__pyx_v_node_idx1]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr1(__pyx_v_p, __pyx_t_1)]) * (((__pyx_v_self->_m2->_states[__pyx_v_snp_idx])[__pyx_v_node_idx2]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr2(__pyx_v_p, __pyx_t_3)])) * (((__pyx_v_self->_m3->_states[__pyx_v_snp_idx])[__pyx_v_node_idx3]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr3(__pyx_v_p, __pyx_t_2)])) * (((__pyx_v_self->_m4->_states[__pyx_v_snp_idx])[__pyx_v_node_idx4]).prob_em[__pyx_f_3IBD_7TestSet_12GenotypePair_chr4(__pyx_v_p, __pyx_t_15)]));
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __pyx_L13:;
          }
        }
      }
    }
  }

  /* "IBD\GenotypePairModel.pyx":111
 *         free(self._emission_prob)
 * 
 *     cpdef calc_emission_probs(self, GenotypePair p):             # <<<<<<<<<<<<<<
 * 
 *         cdef int snp_idx
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.calc_emission_probs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_9calc_emission_probs(PyObject *__pyx_v_self, PyObject *__pyx_v_p); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_9calc_emission_probs(PyObject *__pyx_v_self, PyObject *__pyx_v_p) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_emission_probs (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_3IBD_7TestSet_GenotypePair, 1, "p", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_8calc_emission_probs(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), ((struct __pyx_obj_3IBD_7TestSet_GenotypePair *)__pyx_v_p));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_8calc_emission_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("calc_emission_probs", 0);
  __Pyx_TraceCall("calc_emission_probs", __pyx_f[0], 111);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->calc_emission_probs(__pyx_v_self, __pyx_v_p, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.calc_emission_probs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":147
 *                                 self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)]
 * 
 *     cpdef calc_forward_probs(self):             # <<<<<<<<<<<<<<
 * 
 *         cdef int snp_idx
 */

static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_11calc_forward_probs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_calc_forward_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_snp_idx;
  int __pyx_v_node_idx1;
  int __pyx_v_node_idx2;
  int __pyx_v_node_idx3;
  int __pyx_v_node_idx4;
  int __pyx_v_prev_node_idx1;
  int __pyx_v_prev_node_idx2;
  int __pyx_v_prev_node_idx3;
  int __pyx_v_prev_node_idx4;
  int __pyx_v_prev_node1;
  int __pyx_v_prev_node2;
  int __pyx_v_prev_node3;
  int __pyx_v_prev_node4;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  long __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  long __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  int __pyx_t_26;
  int __pyx_t_27;
  int __pyx_t_28;
  int __pyx_t_29;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("calc_forward_probs", 0);
  __Pyx_TraceCall("calc_forward_probs", __pyx_f[0], 147);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_calc_forward_probs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_11calc_forward_probs)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":165
 * 
 *         # first layer
 *         for node_idx1 in range(self._m1._layer_state_nums[0]):             # <<<<<<<<<<<<<<
 *             for node_idx2 in range(self._m2._layer_state_nums[0]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[0]):
 */
  __pyx_t_3 = (__pyx_v_self->_m1->_layer_state_nums[0]);
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_node_idx1 = __pyx_t_4;

    /* "IBD\GenotypePairModel.pyx":166
 *         # first layer
 *         for node_idx1 in range(self._m1._layer_state_nums[0]):
 *             for node_idx2 in range(self._m2._layer_state_nums[0]):             # <<<<<<<<<<<<<<
 *                 for node_idx3 in range(self._m3._layer_state_nums[0]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[0]):
 */
    __pyx_t_5 = (__pyx_v_self->_m2->_layer_state_nums[0]);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_node_idx2 = __pyx_t_6;

      /* "IBD\GenotypePairModel.pyx":167
 *         for node_idx1 in range(self._m1._layer_state_nums[0]):
 *             for node_idx2 in range(self._m2._layer_state_nums[0]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[0]):             # <<<<<<<<<<<<<<
 *                     for node_idx4 in range(self._m4._layer_state_nums[0]):
 *                         if self._ibd == 0:
 */
      __pyx_t_7 = (__pyx_v_self->_m3->_layer_state_nums[0]);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_node_idx3 = __pyx_t_8;

        /* "IBD\GenotypePairModel.pyx":168
 *             for node_idx2 in range(self._m2._layer_state_nums[0]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[0]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[0]):             # <<<<<<<<<<<<<<
 *                         if self._ibd == 0:
 *                             self._forward_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] = \
 */
        __pyx_t_9 = (__pyx_v_self->_m4->_layer_state_nums[0]);
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_node_idx4 = __pyx_t_10;

          /* "IBD\GenotypePairModel.pyx":169
 *                 for node_idx3 in range(self._m3._layer_state_nums[0]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[0]):
 *                         if self._ibd == 0:             # <<<<<<<<<<<<<<
 *                             self._forward_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] = \
 *                             self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m3._pi[node_idx3] * self._m4._pi[node_idx4] * \
 */
          __pyx_t_11 = ((__pyx_v_self->_ibd == 0) != 0);
          if (__pyx_t_11) {

            /* "IBD\GenotypePairModel.pyx":170
 *                     for node_idx4 in range(self._m4._layer_state_nums[0]):
 *                         if self._ibd == 0:
 *                             self._forward_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] = \             # <<<<<<<<<<<<<<
 *                             self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m3._pi[node_idx3] * self._m4._pi[node_idx4] * \
 *                             self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4]
 */
            (((((__pyx_v_self->_forward_prob[0])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) = (((((__pyx_v_self->_m1->_pi[__pyx_v_node_idx1]) * (__pyx_v_self->_m2->_pi[__pyx_v_node_idx2])) * (__pyx_v_self->_m3->_pi[__pyx_v_node_idx3])) * (__pyx_v_self->_m4->_pi[__pyx_v_node_idx4])) * (((((__pyx_v_self->_emission_prob[0])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]));
            goto __pyx_L11;
          }
          /*else*/ {

            /* "IBD\GenotypePairModel.pyx":174
 *                             self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4]
 *                         else:
 *                             if self._m1._anc == self._m3._anc:             # <<<<<<<<<<<<<<
 *                                 self._forward_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] = \
 *                                 self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m4._pi[node_idx4] * \
 */
            __pyx_t_11 = ((__pyx_v_self->_m1->_anc == __pyx_v_self->_m3->_anc) != 0);
            if (__pyx_t_11) {

              /* "IBD\GenotypePairModel.pyx":175
 *                         else:
 *                             if self._m1._anc == self._m3._anc:
 *                                 self._forward_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] = \             # <<<<<<<<<<<<<<
 *                                 self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m4._pi[node_idx4] * \
 *                                 self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4]
 */
              (((((__pyx_v_self->_forward_prob[0])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) = ((((__pyx_v_self->_m1->_pi[__pyx_v_node_idx1]) * (__pyx_v_self->_m2->_pi[__pyx_v_node_idx2])) * (__pyx_v_self->_m4->_pi[__pyx_v_node_idx4])) * (((((__pyx_v_self->_emission_prob[0])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]));
              goto __pyx_L12;
            }
            __pyx_L12:;
          }
          __pyx_L11:;
        }
      }
    }
  }

  /* "IBD\GenotypePairModel.pyx":179
 *                                 self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4]
 *         # rescaling to avoid underflow
 *         self._scale_factor[0] = 1             # <<<<<<<<<<<<<<
 * 
 *         # all other layers
 */
  (__pyx_v_self->_scale_factor[0]) = 1.0;

  /* "IBD\GenotypePairModel.pyx":182
 * 
 *         # all other layers
 *         for snp_idx in range(self._m1._snp_num-1):             # <<<<<<<<<<<<<<
 *             # calculate forward probabilities
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx+1]):
 */
  __pyx_t_12 = (__pyx_v_self->_m1->_snp_num - 1);
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_12; __pyx_t_3+=1) {
    __pyx_v_snp_idx = __pyx_t_3;

    /* "IBD\GenotypePairModel.pyx":184
 *         for snp_idx in range(self._m1._snp_num-1):
 *             # calculate forward probabilities
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx+1]):             # <<<<<<<<<<<<<<
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx+1]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx+1]):
 */
    __pyx_t_4 = (__pyx_v_self->_m1->_layer_state_nums[(__pyx_v_snp_idx + 1)]);
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_node_idx1 = __pyx_t_5;

      /* "IBD\GenotypePairModel.pyx":185
 *             # calculate forward probabilities
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx+1]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx+1]):             # <<<<<<<<<<<<<<
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx+1]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx+1]):
 */
      __pyx_t_6 = (__pyx_v_self->_m2->_layer_state_nums[(__pyx_v_snp_idx + 1)]);
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_node_idx2 = __pyx_t_7;

        /* "IBD\GenotypePairModel.pyx":186
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx+1]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx+1]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx+1]):             # <<<<<<<<<<<<<<
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx+1]):
 *                             for prev_node_idx1 in range(self._m1._states[snp_idx+1][node_idx1].in_trans_num):
 */
        __pyx_t_8 = (__pyx_v_self->_m3->_layer_state_nums[(__pyx_v_snp_idx + 1)]);
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
          __pyx_v_node_idx3 = __pyx_t_9;

          /* "IBD\GenotypePairModel.pyx":187
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx+1]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx+1]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx+1]):             # <<<<<<<<<<<<<<
 *                             for prev_node_idx1 in range(self._m1._states[snp_idx+1][node_idx1].in_trans_num):
 *                                 for prev_node_idx2 in range(self._m2._states[snp_idx+1][node_idx2].in_trans_num):
 */
          __pyx_t_10 = (__pyx_v_self->_m4->_layer_state_nums[(__pyx_v_snp_idx + 1)]);
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_10; __pyx_t_13+=1) {
            __pyx_v_node_idx4 = __pyx_t_13;

            /* "IBD\GenotypePairModel.pyx":188
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx+1]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx+1]):
 *                             for prev_node_idx1 in range(self._m1._states[snp_idx+1][node_idx1].in_trans_num):             # <<<<<<<<<<<<<<
 *                                 for prev_node_idx2 in range(self._m2._states[snp_idx+1][node_idx2].in_trans_num):
 *                                     for prev_node_idx3 in range(self._m3._states[snp_idx+1][node_idx3].in_trans_num):
 */
            __pyx_t_14 = ((__pyx_v_self->_m1->_states[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx1]).in_trans_num;
            for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
              __pyx_v_prev_node_idx1 = __pyx_t_15;

              /* "IBD\GenotypePairModel.pyx":189
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx+1]):
 *                             for prev_node_idx1 in range(self._m1._states[snp_idx+1][node_idx1].in_trans_num):
 *                                 for prev_node_idx2 in range(self._m2._states[snp_idx+1][node_idx2].in_trans_num):             # <<<<<<<<<<<<<<
 *                                     for prev_node_idx3 in range(self._m3._states[snp_idx+1][node_idx3].in_trans_num):
 *                                         for prev_node_idx4 in range(self._m4._states[snp_idx+1][node_idx4].in_trans_num):
 */
              __pyx_t_16 = ((__pyx_v_self->_m2->_states[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx2]).in_trans_num;
              for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
                __pyx_v_prev_node_idx2 = __pyx_t_17;

                /* "IBD\GenotypePairModel.pyx":190
 *                             for prev_node_idx1 in range(self._m1._states[snp_idx+1][node_idx1].in_trans_num):
 *                                 for prev_node_idx2 in range(self._m2._states[snp_idx+1][node_idx2].in_trans_num):
 *                                     for prev_node_idx3 in range(self._m3._states[snp_idx+1][node_idx3].in_trans_num):             # <<<<<<<<<<<<<<
 *                                         for prev_node_idx4 in range(self._m4._states[snp_idx+1][node_idx4].in_trans_num):
 *                                             prev_node1 = self._m1._back_trans_idx[snp_idx+1][node_idx1][prev_node_idx1]
 */
                __pyx_t_18 = ((__pyx_v_self->_m3->_states[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx3]).in_trans_num;
                for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
                  __pyx_v_prev_node_idx3 = __pyx_t_19;

                  /* "IBD\GenotypePairModel.pyx":191
 *                                 for prev_node_idx2 in range(self._m2._states[snp_idx+1][node_idx2].in_trans_num):
 *                                     for prev_node_idx3 in range(self._m3._states[snp_idx+1][node_idx3].in_trans_num):
 *                                         for prev_node_idx4 in range(self._m4._states[snp_idx+1][node_idx4].in_trans_num):             # <<<<<<<<<<<<<<
 *                                             prev_node1 = self._m1._back_trans_idx[snp_idx+1][node_idx1][prev_node_idx1]
 *                                             prev_node2 = self._m2._back_trans_idx[snp_idx+1][node_idx2][prev_node_idx2]
 */
                  __pyx_t_20 = ((__pyx_v_self->_m4->_states[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx4]).in_trans_num;
                  for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
                    __pyx_v_prev_node_idx4 = __pyx_t_21;

                    /* "IBD\GenotypePairModel.pyx":192
 *                                     for prev_node_idx3 in range(self._m3._states[snp_idx+1][node_idx3].in_trans_num):
 *                                         for prev_node_idx4 in range(self._m4._states[snp_idx+1][node_idx4].in_trans_num):
 *                                             prev_node1 = self._m1._back_trans_idx[snp_idx+1][node_idx1][prev_node_idx1]             # <<<<<<<<<<<<<<
 *                                             prev_node2 = self._m2._back_trans_idx[snp_idx+1][node_idx2][prev_node_idx2]
 *                                             prev_node3 = self._m3._back_trans_idx[snp_idx+1][node_idx3][prev_node_idx3]
 */
                    __pyx_v_prev_node1 = (((__pyx_v_self->_m1->_back_trans_idx[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx1])[__pyx_v_prev_node_idx1]);

                    /* "IBD\GenotypePairModel.pyx":193
 *                                         for prev_node_idx4 in range(self._m4._states[snp_idx+1][node_idx4].in_trans_num):
 *                                             prev_node1 = self._m1._back_trans_idx[snp_idx+1][node_idx1][prev_node_idx1]
 *                                             prev_node2 = self._m2._back_trans_idx[snp_idx+1][node_idx2][prev_node_idx2]             # <<<<<<<<<<<<<<
 *                                             prev_node3 = self._m3._back_trans_idx[snp_idx+1][node_idx3][prev_node_idx3]
 *                                             prev_node4 = self._m4._back_trans_idx[snp_idx+1][node_idx4][prev_node_idx4]
 */
                    __pyx_v_prev_node2 = (((__pyx_v_self->_m2->_back_trans_idx[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx2])[__pyx_v_prev_node_idx2]);

                    /* "IBD\GenotypePairModel.pyx":194
 *                                             prev_node1 = self._m1._back_trans_idx[snp_idx+1][node_idx1][prev_node_idx1]
 *                                             prev_node2 = self._m2._back_trans_idx[snp_idx+1][node_idx2][prev_node_idx2]
 *                                             prev_node3 = self._m3._back_trans_idx[snp_idx+1][node_idx3][prev_node_idx3]             # <<<<<<<<<<<<<<
 *                                             prev_node4 = self._m4._back_trans_idx[snp_idx+1][node_idx4][prev_node_idx4]
 *                                             if self._ibd == 0:
 */
                    __pyx_v_prev_node3 = (((__pyx_v_self->_m3->_back_trans_idx[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx3])[__pyx_v_prev_node_idx3]);

                    /* "IBD\GenotypePairModel.pyx":195
 *                                             prev_node2 = self._m2._back_trans_idx[snp_idx+1][node_idx2][prev_node_idx2]
 *                                             prev_node3 = self._m3._back_trans_idx[snp_idx+1][node_idx3][prev_node_idx3]
 *                                             prev_node4 = self._m4._back_trans_idx[snp_idx+1][node_idx4][prev_node_idx4]             # <<<<<<<<<<<<<<
 *                                             if self._ibd == 0:
 *                                                 self._forward_prob[snp_idx+1][node_idx1][node_idx2][node_idx3][node_idx4] += \
 */
                    __pyx_v_prev_node4 = (((__pyx_v_self->_m4->_back_trans_idx[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx4])[__pyx_v_prev_node_idx4]);

                    /* "IBD\GenotypePairModel.pyx":196
 *                                             prev_node3 = self._m3._back_trans_idx[snp_idx+1][node_idx3][prev_node_idx3]
 *                                             prev_node4 = self._m4._back_trans_idx[snp_idx+1][node_idx4][prev_node_idx4]
 *                                             if self._ibd == 0:             # <<<<<<<<<<<<<<
 *                                                 self._forward_prob[snp_idx+1][node_idx1][node_idx2][node_idx3][node_idx4] += \
 *                                                 self._forward_prob[snp_idx][prev_node1][prev_node2][prev_node3][prev_node4] * \
 */
                    __pyx_t_11 = ((__pyx_v_self->_ibd == 0) != 0);
                    if (__pyx_t_11) {

                      /* "IBD\GenotypePairModel.pyx":197
 *                                             prev_node4 = self._m4._back_trans_idx[snp_idx+1][node_idx4][prev_node_idx4]
 *                                             if self._ibd == 0:
 *                                                 self._forward_prob[snp_idx+1][node_idx1][node_idx2][node_idx3][node_idx4] += \             # <<<<<<<<<<<<<<
 *                                                 self._forward_prob[snp_idx][prev_node1][prev_node2][prev_node3][prev_node4] * \
 *                                                 self._emission_prob[snp_idx+1][node_idx1][node_idx2][node_idx3][node_idx4] * \
 */
                      __pyx_t_22 = (__pyx_v_snp_idx + 1);
                      __pyx_t_23 = __pyx_v_node_idx1;
                      __pyx_t_24 = __pyx_v_node_idx2;
                      __pyx_t_25 = __pyx_v_node_idx3;
                      __pyx_t_26 = __pyx_v_node_idx4;

                      /* "IBD\GenotypePairModel.pyx":202
 *                                                 self._m1._back_trans[snp_idx+1][node_idx1][prev_node_idx1] * \
 *                                                 self._m2._back_trans[snp_idx+1][node_idx2][prev_node_idx2] * \
 *                                                 self._m3._back_trans[snp_idx+1][node_idx3][prev_node_idx3] * \             # <<<<<<<<<<<<<<
 *                                                 self._m4._back_trans[snp_idx+1][node_idx4][prev_node_idx4]
 *                                             else:
 */
                      (((((__pyx_v_self->_forward_prob[__pyx_t_22])[__pyx_t_23])[__pyx_t_24])[__pyx_t_25])[__pyx_t_26]) = ((((((__pyx_v_self->_forward_prob[__pyx_t_22])[__pyx_t_23])[__pyx_t_24])[__pyx_t_25])[__pyx_t_26]) + ((((((((((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_prev_node1])[__pyx_v_prev_node2])[__pyx_v_prev_node3])[__pyx_v_prev_node4]) * (((((__pyx_v_self->_emission_prob[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4])) * (((__pyx_v_self->_m1->_back_trans[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx1])[__pyx_v_prev_node_idx1])) * (((__pyx_v_self->_m2->_back_trans[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx2])[__pyx_v_prev_node_idx2])) * (((__pyx_v_self->_m3->_back_trans[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx3])[__pyx_v_prev_node_idx3])) * (((__pyx_v_self->_m4->_back_trans[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx4])[__pyx_v_prev_node_idx4])));
                      goto __pyx_L31;
                    }
                    /*else*/ {

                      /* "IBD\GenotypePairModel.pyx":205
 *                                                 self._m4._back_trans[snp_idx+1][node_idx4][prev_node_idx4]
 *                                             else:
 *                                                 if self._m1._anc == self._m3._anc and node_idx1 == node_idx3 and prev_node1 == prev_node3:             # <<<<<<<<<<<<<<
 *                                                     self._forward_prob[snp_idx+1][node_idx1][node_idx2][node_idx3][node_idx4] += \
 *                                                     self._forward_prob[snp_idx][prev_node1][prev_node2][prev_node3][prev_node4] * \
 */
                      __pyx_t_11 = ((__pyx_v_self->_m1->_anc == __pyx_v_self->_m3->_anc) != 0);
                      if (__pyx_t_11) {
                        __pyx_t_27 = ((__pyx_v_node_idx1 == __pyx_v_node_idx3) != 0);
                        if (__pyx_t_27) {
                          __pyx_t_28 = ((__pyx_v_prev_node1 == __pyx_v_prev_node3) != 0);
                          __pyx_t_29 = __pyx_t_28;
                        } else {
                          __pyx_t_29 = __pyx_t_27;
                        }
                        __pyx_t_27 = __pyx_t_29;
                      } else {
                        __pyx_t_27 = __pyx_t_11;
                      }
                      if (__pyx_t_27) {

                        /* "IBD\GenotypePairModel.pyx":206
 *                                             else:
 *                                                 if self._m1._anc == self._m3._anc and node_idx1 == node_idx3 and prev_node1 == prev_node3:
 *                                                     self._forward_prob[snp_idx+1][node_idx1][node_idx2][node_idx3][node_idx4] += \             # <<<<<<<<<<<<<<
 *                                                     self._forward_prob[snp_idx][prev_node1][prev_node2][prev_node3][prev_node4] * \
 *                                                     self._emission_prob[snp_idx+1][node_idx1][node_idx2][node_idx3][node_idx4] * \
 */
                        __pyx_t_22 = (__pyx_v_snp_idx + 1);
                        __pyx_t_23 = __pyx_v_node_idx1;
                        __pyx_t_24 = __pyx_v_node_idx2;
                        __pyx_t_25 = __pyx_v_node_idx3;
                        __pyx_t_26 = __pyx_v_node_idx4;

                        /* "IBD\GenotypePairModel.pyx":210
 *                                                     self._emission_prob[snp_idx+1][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                                     self._m1._back_trans[snp_idx+1][node_idx1][prev_node_idx1] * \
 *                                                     self._m2._back_trans[snp_idx+1][node_idx2][prev_node_idx2] * \             # <<<<<<<<<<<<<<
 *                                                     self._m4._back_trans[snp_idx+1][node_idx4][prev_node_idx4]
 * #                             inner_forward_probs_logger.debug("snp_idx: " + str(snp_idx) + \
 */
                        (((((__pyx_v_self->_forward_prob[__pyx_t_22])[__pyx_t_23])[__pyx_t_24])[__pyx_t_25])[__pyx_t_26]) = ((((((__pyx_v_self->_forward_prob[__pyx_t_22])[__pyx_t_23])[__pyx_t_24])[__pyx_t_25])[__pyx_t_26]) + (((((((((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_prev_node1])[__pyx_v_prev_node2])[__pyx_v_prev_node3])[__pyx_v_prev_node4]) * (((((__pyx_v_self->_emission_prob[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4])) * (((__pyx_v_self->_m1->_back_trans[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx1])[__pyx_v_prev_node_idx1])) * (((__pyx_v_self->_m2->_back_trans[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx2])[__pyx_v_prev_node_idx2])) * (((__pyx_v_self->_m4->_back_trans[(__pyx_v_snp_idx + 1)])[__pyx_v_node_idx4])[__pyx_v_prev_node_idx4])));
                        goto __pyx_L32;
                      }
                      __pyx_L32:;
                    }
                    __pyx_L31:;
                  }
                }
              }
            }
          }
        }
      }
    }

    /* "IBD\GenotypePairModel.pyx":220
 * 
 *             # rescaling to avoid underflow
 *             self.rescale_forward(snp_idx+1)             # <<<<<<<<<<<<<<
 * 
 *     cdef rescale_forward(self, int snp_idx):
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->rescale_forward(__pyx_v_self, (__pyx_v_snp_idx + 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":147
 *                                 self._m4._states[snp_idx][node_idx4].prob_em[p.chr4(snp_idx)]
 * 
 *     cpdef calc_forward_probs(self):             # <<<<<<<<<<<<<<
 * 
 *         cdef int snp_idx
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.calc_forward_probs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_11calc_forward_probs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_11calc_forward_probs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_forward_probs (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_10calc_forward_probs(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_10calc_forward_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("calc_forward_probs", 0);
  __Pyx_TraceCall("calc_forward_probs", __pyx_f[0], 147);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->calc_forward_probs(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.calc_forward_probs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":222
 *             self.rescale_forward(snp_idx+1)
 * 
 *     cdef rescale_forward(self, int snp_idx):             # <<<<<<<<<<<<<<
 *         cdef int node_idx1
 *         cdef int node_idx2
 */

static PyObject *__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_rescale_forward(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, int __pyx_v_snp_idx) {
  int __pyx_v_node_idx1;
  int __pyx_v_node_idx2;
  int __pyx_v_node_idx3;
  int __pyx_v_node_idx4;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("rescale_forward", 0);
  __Pyx_TraceCall("rescale_forward", __pyx_f[0], 222);

  /* "IBD\GenotypePairModel.pyx":228
 *         cdef int node_idx4
 * 
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 */
  __pyx_t_1 = (__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_node_idx1 = __pyx_t_2;

    /* "IBD\GenotypePairModel.pyx":229
 * 
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 */
    __pyx_t_3 = (__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx]);
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_node_idx2 = __pyx_t_4;

      /* "IBD\GenotypePairModel.pyx":230
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                         self._scale_factor[snp_idx] += self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 */
      __pyx_t_5 = (__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]);
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_node_idx3 = __pyx_t_6;

        /* "IBD\GenotypePairModel.pyx":231
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                         self._scale_factor[snp_idx] += self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 *         if self._scale_factor[snp_idx] > 0:
 */
        __pyx_t_7 = (__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]);
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
          __pyx_v_node_idx4 = __pyx_t_8;

          /* "IBD\GenotypePairModel.pyx":232
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                         self._scale_factor[snp_idx] += self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]             # <<<<<<<<<<<<<<
 *         if self._scale_factor[snp_idx] > 0:
 *             self._scale_factor[snp_idx] = 1.0 / self._scale_factor[snp_idx]
 */
          __pyx_t_9 = __pyx_v_snp_idx;
          (__pyx_v_self->_scale_factor[__pyx_t_9]) = ((__pyx_v_self->_scale_factor[__pyx_t_9]) + (((((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]));
        }
      }
    }
  }

  /* "IBD\GenotypePairModel.pyx":233
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                         self._scale_factor[snp_idx] += self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 *         if self._scale_factor[snp_idx] > 0:             # <<<<<<<<<<<<<<
 *             self._scale_factor[snp_idx] = 1.0 / self._scale_factor[snp_idx]
 *         else:
 */
  __pyx_t_10 = (((__pyx_v_self->_scale_factor[__pyx_v_snp_idx]) > 0.0) != 0);
  if (__pyx_t_10) {

    /* "IBD\GenotypePairModel.pyx":234
 *                         self._scale_factor[snp_idx] += self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 *         if self._scale_factor[snp_idx] > 0:
 *             self._scale_factor[snp_idx] = 1.0 / self._scale_factor[snp_idx]             # <<<<<<<<<<<<<<
 *         else:
 *             self._scale_factor[snp_idx] = DBL_MAX
 */
    (__pyx_v_self->_scale_factor[__pyx_v_snp_idx]) = (1.0 / (__pyx_v_self->_scale_factor[__pyx_v_snp_idx]));
    goto __pyx_L11;
  }
  /*else*/ {

    /* "IBD\GenotypePairModel.pyx":236
 *             self._scale_factor[snp_idx] = 1.0 / self._scale_factor[snp_idx]
 *         else:
 *             self._scale_factor[snp_idx] = DBL_MAX             # <<<<<<<<<<<<<<
 * 
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 */
    (__pyx_v_self->_scale_factor[__pyx_v_snp_idx]) = DBL_MAX;
  }
  __pyx_L11:;

  /* "IBD\GenotypePairModel.pyx":238
 *             self._scale_factor[snp_idx] = DBL_MAX
 * 
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 */
  __pyx_t_1 = (__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_node_idx1 = __pyx_t_2;

    /* "IBD\GenotypePairModel.pyx":239
 * 
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 */
    __pyx_t_3 = (__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx]);
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_node_idx2 = __pyx_t_4;

      /* "IBD\GenotypePairModel.pyx":240
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 */
      __pyx_t_5 = (__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]);
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_node_idx3 = __pyx_t_6;

        /* "IBD\GenotypePairModel.pyx":241
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * self._scale_factor[snp_idx]
 */
        __pyx_t_7 = (__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]);
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
          __pyx_v_node_idx4 = __pyx_t_8;

          /* "IBD\GenotypePairModel.pyx":242
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \             # <<<<<<<<<<<<<<
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * self._scale_factor[snp_idx]
 * 
 */
          (((((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) = ((((((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) * (__pyx_v_self->_scale_factor[__pyx_v_snp_idx]));
        }
      }
    }
  }

  /* "IBD\GenotypePairModel.pyx":222
 *             self.rescale_forward(snp_idx+1)
 * 
 *     cdef rescale_forward(self, int snp_idx):             # <<<<<<<<<<<<<<
 *         cdef int node_idx1
 *         cdef int node_idx2
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":245
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * self._scale_factor[snp_idx]
 * 
 *     cpdef calc_backward_probs(self):             # <<<<<<<<<<<<<<
 * 
 *         cdef int node_idx1
 */

static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_13calc_backward_probs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_calc_backward_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_node_idx1;
  int __pyx_v_node_idx2;
  int __pyx_v_node_idx3;
  int __pyx_v_node_idx4;
  int __pyx_v_nxt_node_idx1;
  int __pyx_v_nxt_node_idx2;
  int __pyx_v_nxt_node_idx3;
  int __pyx_v_nxt_node_idx4;
  int __pyx_v_nxt_node1;
  int __pyx_v_nxt_node2;
  int __pyx_v_nxt_node3;
  int __pyx_v_nxt_node4;
  PyObject *__pyx_v_snp_idx = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  long __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  Py_ssize_t __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  int __pyx_t_26;
  int __pyx_t_27;
  int __pyx_t_28;
  int __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  int __pyx_t_36;
  PyObject *__pyx_t_37 = NULL;
  PyObject *__pyx_t_38 = NULL;
  PyObject *__pyx_t_39 = NULL;
  double __pyx_t_40;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("calc_backward_probs", 0);
  __Pyx_TraceCall("calc_backward_probs", __pyx_f[0], 245);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_calc_backward_probs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_13calc_backward_probs)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":261
 * 
 *         # last layer
 *         for node_idx1 in range(self._m1._layer_state_nums[self._m1._snp_num - 1]):             # <<<<<<<<<<<<<<
 *             for node_idx2 in range(self._m2._layer_state_nums[self._m1._snp_num - 1]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[self._m1._snp_num - 1]):
 */
  __pyx_t_3 = (__pyx_v_self->_m1->_layer_state_nums[(__pyx_v_self->_m1->_snp_num - 1)]);
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_node_idx1 = __pyx_t_4;

    /* "IBD\GenotypePairModel.pyx":262
 *         # last layer
 *         for node_idx1 in range(self._m1._layer_state_nums[self._m1._snp_num - 1]):
 *             for node_idx2 in range(self._m2._layer_state_nums[self._m1._snp_num - 1]):             # <<<<<<<<<<<<<<
 *                 for node_idx3 in range(self._m3._layer_state_nums[self._m1._snp_num - 1]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[self._m1._snp_num - 1]):
 */
    __pyx_t_5 = (__pyx_v_self->_m2->_layer_state_nums[(__pyx_v_self->_m1->_snp_num - 1)]);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_node_idx2 = __pyx_t_6;

      /* "IBD\GenotypePairModel.pyx":263
 *         for node_idx1 in range(self._m1._layer_state_nums[self._m1._snp_num - 1]):
 *             for node_idx2 in range(self._m2._layer_state_nums[self._m1._snp_num - 1]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[self._m1._snp_num - 1]):             # <<<<<<<<<<<<<<
 *                     for node_idx4 in range(self._m4._layer_state_nums[self._m1._snp_num - 1]):
 *                         if self._ibd == 0 or self._m1._anc == self._m3._anc:
 */
      __pyx_t_7 = (__pyx_v_self->_m3->_layer_state_nums[(__pyx_v_self->_m1->_snp_num - 1)]);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_node_idx3 = __pyx_t_8;

        /* "IBD\GenotypePairModel.pyx":264
 *             for node_idx2 in range(self._m2._layer_state_nums[self._m1._snp_num - 1]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[self._m1._snp_num - 1]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[self._m1._snp_num - 1]):             # <<<<<<<<<<<<<<
 *                         if self._ibd == 0 or self._m1._anc == self._m3._anc:
 *                             self._backward_prob[self._m1._snp_num - 1][node_idx1][node_idx2][node_idx3][node_idx4] = 1
 */
        __pyx_t_9 = (__pyx_v_self->_m4->_layer_state_nums[(__pyx_v_self->_m1->_snp_num - 1)]);
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_node_idx4 = __pyx_t_10;

          /* "IBD\GenotypePairModel.pyx":265
 *                 for node_idx3 in range(self._m3._layer_state_nums[self._m1._snp_num - 1]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[self._m1._snp_num - 1]):
 *                         if self._ibd == 0 or self._m1._anc == self._m3._anc:             # <<<<<<<<<<<<<<
 *                             self._backward_prob[self._m1._snp_num - 1][node_idx1][node_idx2][node_idx3][node_idx4] = 1
 * 
 */
          __pyx_t_11 = ((__pyx_v_self->_ibd == 0) != 0);
          if (!__pyx_t_11) {
            __pyx_t_12 = ((__pyx_v_self->_m1->_anc == __pyx_v_self->_m3->_anc) != 0);
            __pyx_t_13 = __pyx_t_12;
          } else {
            __pyx_t_13 = __pyx_t_11;
          }
          if (__pyx_t_13) {

            /* "IBD\GenotypePairModel.pyx":266
 *                     for node_idx4 in range(self._m4._layer_state_nums[self._m1._snp_num - 1]):
 *                         if self._ibd == 0 or self._m1._anc == self._m3._anc:
 *                             self._backward_prob[self._m1._snp_num - 1][node_idx1][node_idx2][node_idx3][node_idx4] = 1             # <<<<<<<<<<<<<<
 * 
 *         # rescaling to avoid underflow
 */
            (((((__pyx_v_self->_backward_prob[(__pyx_v_self->_m1->_snp_num - 1)])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) = 1.0;
            goto __pyx_L11;
          }
          __pyx_L11:;
        }
      }
    }
  }

  /* "IBD\GenotypePairModel.pyx":269
 * 
 *         # rescaling to avoid underflow
 *         for node_idx1 in range(self._m1._layer_state_nums[self._m1._snp_num - 1]):             # <<<<<<<<<<<<<<
 *             for node_idx2 in range(self._m2._layer_state_nums[self._m1._snp_num - 1]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[self._m1._snp_num - 1]):
 */
  __pyx_t_3 = (__pyx_v_self->_m1->_layer_state_nums[(__pyx_v_self->_m1->_snp_num - 1)]);
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_node_idx1 = __pyx_t_4;

    /* "IBD\GenotypePairModel.pyx":270
 *         # rescaling to avoid underflow
 *         for node_idx1 in range(self._m1._layer_state_nums[self._m1._snp_num - 1]):
 *             for node_idx2 in range(self._m2._layer_state_nums[self._m1._snp_num - 1]):             # <<<<<<<<<<<<<<
 *                 for node_idx3 in range(self._m3._layer_state_nums[self._m1._snp_num - 1]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[self._m1._snp_num - 1]):
 */
    __pyx_t_5 = (__pyx_v_self->_m2->_layer_state_nums[(__pyx_v_self->_m1->_snp_num - 1)]);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_node_idx2 = __pyx_t_6;

      /* "IBD\GenotypePairModel.pyx":271
 *         for node_idx1 in range(self._m1._layer_state_nums[self._m1._snp_num - 1]):
 *             for node_idx2 in range(self._m2._layer_state_nums[self._m1._snp_num - 1]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[self._m1._snp_num - 1]):             # <<<<<<<<<<<<<<
 *                     for node_idx4 in range(self._m4._layer_state_nums[self._m1._snp_num - 1]):
 *                         self._backward_scale_factor[self._m1._snp_num - 1] += self._backward_prob[self._m1._snp_num - 1][node_idx1][node_idx2][node_idx3][node_idx4]
 */
      __pyx_t_7 = (__pyx_v_self->_m3->_layer_state_nums[(__pyx_v_self->_m1->_snp_num - 1)]);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_node_idx3 = __pyx_t_8;

        /* "IBD\GenotypePairModel.pyx":272
 *             for node_idx2 in range(self._m2._layer_state_nums[self._m1._snp_num - 1]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[self._m1._snp_num - 1]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[self._m1._snp_num - 1]):             # <<<<<<<<<<<<<<
 *                         self._backward_scale_factor[self._m1._snp_num - 1] += self._backward_prob[self._m1._snp_num - 1][node_idx1][node_idx2][node_idx3][node_idx4]
 *         self._backward_scale_factor[self._m1._snp_num - 1] = 1.0
 */
        __pyx_t_9 = (__pyx_v_self->_m4->_layer_state_nums[(__pyx_v_self->_m1->_snp_num - 1)]);
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_node_idx4 = __pyx_t_10;

          /* "IBD\GenotypePairModel.pyx":273
 *                 for node_idx3 in range(self._m3._layer_state_nums[self._m1._snp_num - 1]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[self._m1._snp_num - 1]):
 *                         self._backward_scale_factor[self._m1._snp_num - 1] += self._backward_prob[self._m1._snp_num - 1][node_idx1][node_idx2][node_idx3][node_idx4]             # <<<<<<<<<<<<<<
 *         self._backward_scale_factor[self._m1._snp_num - 1] = 1.0
 * 
 */
          __pyx_t_14 = (__pyx_v_self->_m1->_snp_num - 1);
          (__pyx_v_self->_backward_scale_factor[__pyx_t_14]) = ((__pyx_v_self->_backward_scale_factor[__pyx_t_14]) + (((((__pyx_v_self->_backward_prob[(__pyx_v_self->_m1->_snp_num - 1)])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4]));
        }
      }
    }
  }

  /* "IBD\GenotypePairModel.pyx":274
 *                     for node_idx4 in range(self._m4._layer_state_nums[self._m1._snp_num - 1]):
 *                         self._backward_scale_factor[self._m1._snp_num - 1] += self._backward_prob[self._m1._snp_num - 1][node_idx1][node_idx2][node_idx3][node_idx4]
 *         self._backward_scale_factor[self._m1._snp_num - 1] = 1.0             # <<<<<<<<<<<<<<
 * 
 *         # all other layers
 */
  (__pyx_v_self->_backward_scale_factor[(__pyx_v_self->_m1->_snp_num - 1)]) = 1.0;

  /* "IBD\GenotypePairModel.pyx":277
 * 
 *         # all other layers
 *         snp_idx = self._m1._snp_num - 2             # <<<<<<<<<<<<<<
 *         for snp_idx in reversed(range(0, self._m1._snp_num - 1)):
 *             # calculate forward probabilities
 */
  __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->_m1->_snp_num - 2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_snp_idx = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":278
 *         # all other layers
 *         snp_idx = self._m1._snp_num - 2
 *         for snp_idx in reversed(range(0, self._m1._snp_num - 1)):             # <<<<<<<<<<<<<<
 *             # calculate forward probabilities
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 */
  __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->_m1->_snp_num - 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_reversed, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_15 = 0;
    __pyx_t_16 = NULL;
  } else {
    __pyx_t_15 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_16 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (!__pyx_t_16 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_16 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_15); __Pyx_INCREF(__pyx_t_1); __pyx_t_15++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_16(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF_SET(__pyx_v_snp_idx, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "IBD\GenotypePairModel.pyx":280
 *         for snp_idx in reversed(range(0, self._m1._snp_num - 1)):
 *             # calculate forward probabilities
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                 for node_idx2 in range(self._m2._layer_state_num[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 */
    __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = (__pyx_v_self->_m1->_layer_state_nums[__pyx_t_17]);
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_node_idx1 = __pyx_t_4;

      /* "IBD\GenotypePairModel.pyx":281
 *             # calculate forward probabilities
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_num[snp_idx]):             # <<<<<<<<<<<<<<
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_m2), __pyx_n_s_layer_state_num); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_18 = PyObject_GetItem(__pyx_t_1, __pyx_v_snp_idx); if (unlikely(__pyx_t_18 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_18); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_14; __pyx_t_5+=1) {
        __pyx_v_node_idx2 = __pyx_t_5;

        /* "IBD\GenotypePairModel.pyx":282
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_num[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             for nxt_node_idx1 in range(self._m1._states[snp_idx][node_idx1].out_trans_num):
 */
        __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_6 = (__pyx_v_self->_m3->_layer_state_nums[__pyx_t_17]);
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
          __pyx_v_node_idx3 = __pyx_t_7;

          /* "IBD\GenotypePairModel.pyx":283
 *                 for node_idx2 in range(self._m2._layer_state_num[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                             for nxt_node_idx1 in range(self._m1._states[snp_idx][node_idx1].out_trans_num):
 *                                 for nxt_node_idx2 in range(self._m2._states[snp_idx][node_idx2].out_trans_num):
 */
          __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_8 = (__pyx_v_self->_m4->_layer_state_nums[__pyx_t_17]);
          for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
            __pyx_v_node_idx4 = __pyx_t_9;

            /* "IBD\GenotypePairModel.pyx":284
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             for nxt_node_idx1 in range(self._m1._states[snp_idx][node_idx1].out_trans_num):             # <<<<<<<<<<<<<<
 *                                 for nxt_node_idx2 in range(self._m2._states[snp_idx][node_idx2].out_trans_num):
 *                                     for nxt_node_idx3 in range(self._m3._states[snp_idx][node_idx3].out_trans_num):
 */
            __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __pyx_t_10 = ((__pyx_v_self->_m1->_states[__pyx_t_17])[__pyx_v_node_idx1]).out_trans_num;
            for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_10; __pyx_t_19+=1) {
              __pyx_v_nxt_node_idx1 = __pyx_t_19;

              /* "IBD\GenotypePairModel.pyx":285
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             for nxt_node_idx1 in range(self._m1._states[snp_idx][node_idx1].out_trans_num):
 *                                 for nxt_node_idx2 in range(self._m2._states[snp_idx][node_idx2].out_trans_num):             # <<<<<<<<<<<<<<
 *                                     for nxt_node_idx3 in range(self._m3._states[snp_idx][node_idx3].out_trans_num):
 *                                         for nxt_node_idx4 in range(self._m4._states[snp_idx][node_idx4].out_trans_num):
 */
              __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __pyx_t_20 = ((__pyx_v_self->_m2->_states[__pyx_t_17])[__pyx_v_node_idx2]).out_trans_num;
              for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
                __pyx_v_nxt_node_idx2 = __pyx_t_21;

                /* "IBD\GenotypePairModel.pyx":286
 *                             for nxt_node_idx1 in range(self._m1._states[snp_idx][node_idx1].out_trans_num):
 *                                 for nxt_node_idx2 in range(self._m2._states[snp_idx][node_idx2].out_trans_num):
 *                                     for nxt_node_idx3 in range(self._m3._states[snp_idx][node_idx3].out_trans_num):             # <<<<<<<<<<<<<<
 *                                         for nxt_node_idx4 in range(self._m4._states[snp_idx][node_idx4].out_trans_num):
 *                                             #for nxt_ibd in range(2):
 */
                __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                __pyx_t_22 = ((__pyx_v_self->_m3->_states[__pyx_t_17])[__pyx_v_node_idx3]).out_trans_num;
                for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
                  __pyx_v_nxt_node_idx3 = __pyx_t_23;

                  /* "IBD\GenotypePairModel.pyx":287
 *                                 for nxt_node_idx2 in range(self._m2._states[snp_idx][node_idx2].out_trans_num):
 *                                     for nxt_node_idx3 in range(self._m3._states[snp_idx][node_idx3].out_trans_num):
 *                                         for nxt_node_idx4 in range(self._m4._states[snp_idx][node_idx4].out_trans_num):             # <<<<<<<<<<<<<<
 *                                             #for nxt_ibd in range(2):
 *                                                 nxt_node1 = self._m1._trans_idx[snp_idx][node_idx1][nxt_node_idx1]
 */
                  __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                  __pyx_t_24 = ((__pyx_v_self->_m4->_states[__pyx_t_17])[__pyx_v_node_idx4]).out_trans_num;
                  for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_24; __pyx_t_25+=1) {
                    __pyx_v_nxt_node_idx4 = __pyx_t_25;

                    /* "IBD\GenotypePairModel.pyx":289
 *                                         for nxt_node_idx4 in range(self._m4._states[snp_idx][node_idx4].out_trans_num):
 *                                             #for nxt_ibd in range(2):
 *                                                 nxt_node1 = self._m1._trans_idx[snp_idx][node_idx1][nxt_node_idx1]             # <<<<<<<<<<<<<<
 *                                                 nxt_node2 = self._m2._trans_idx[snp_idx][node_idx2][nxt_node_idx2]
 *                                                 nxt_node3 = self._m3._trans_idx[snp_idx][node_idx3][nxt_node_idx3]
 */
                    __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    __pyx_v_nxt_node1 = (((__pyx_v_self->_m1->_trans_idx[__pyx_t_17])[__pyx_v_node_idx1])[__pyx_v_nxt_node_idx1]);

                    /* "IBD\GenotypePairModel.pyx":290
 *                                             #for nxt_ibd in range(2):
 *                                                 nxt_node1 = self._m1._trans_idx[snp_idx][node_idx1][nxt_node_idx1]
 *                                                 nxt_node2 = self._m2._trans_idx[snp_idx][node_idx2][nxt_node_idx2]             # <<<<<<<<<<<<<<
 *                                                 nxt_node3 = self._m3._trans_idx[snp_idx][node_idx3][nxt_node_idx3]
 *                                                 nxt_node4 = self._m4._trans_idx[snp_idx][node_idx4][nxt_node_idx4]
 */
                    __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    __pyx_v_nxt_node2 = (((__pyx_v_self->_m2->_trans_idx[__pyx_t_17])[__pyx_v_node_idx2])[__pyx_v_nxt_node_idx2]);

                    /* "IBD\GenotypePairModel.pyx":291
 *                                                 nxt_node1 = self._m1._trans_idx[snp_idx][node_idx1][nxt_node_idx1]
 *                                                 nxt_node2 = self._m2._trans_idx[snp_idx][node_idx2][nxt_node_idx2]
 *                                                 nxt_node3 = self._m3._trans_idx[snp_idx][node_idx3][nxt_node_idx3]             # <<<<<<<<<<<<<<
 *                                                 nxt_node4 = self._m4._trans_idx[snp_idx][node_idx4][nxt_node_idx4]
 *                                                 if self._ibd == 0:
 */
                    __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    __pyx_v_nxt_node3 = (((__pyx_v_self->_m3->_trans_idx[__pyx_t_17])[__pyx_v_node_idx3])[__pyx_v_nxt_node_idx3]);

                    /* "IBD\GenotypePairModel.pyx":292
 *                                                 nxt_node2 = self._m2._trans_idx[snp_idx][node_idx2][nxt_node_idx2]
 *                                                 nxt_node3 = self._m3._trans_idx[snp_idx][node_idx3][nxt_node_idx3]
 *                                                 nxt_node4 = self._m4._trans_idx[snp_idx][node_idx4][nxt_node_idx4]             # <<<<<<<<<<<<<<
 *                                                 if self._ibd == 0:
 *                                                     self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] += \
 */
                    __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                    __pyx_v_nxt_node4 = (((__pyx_v_self->_m4->_trans_idx[__pyx_t_17])[__pyx_v_node_idx4])[__pyx_v_nxt_node_idx4]);

                    /* "IBD\GenotypePairModel.pyx":293
 *                                                 nxt_node3 = self._m3._trans_idx[snp_idx][node_idx3][nxt_node_idx3]
 *                                                 nxt_node4 = self._m4._trans_idx[snp_idx][node_idx4][nxt_node_idx4]
 *                                                 if self._ibd == 0:             # <<<<<<<<<<<<<<
 *                                                     self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] += \
 *                                                     self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \
 */
                    __pyx_t_13 = ((__pyx_v_self->_ibd == 0) != 0);
                    if (__pyx_t_13) {

                      /* "IBD\GenotypePairModel.pyx":294
 *                                                 nxt_node4 = self._m4._trans_idx[snp_idx][node_idx4][nxt_node_idx4]
 *                                                 if self._ibd == 0:
 *                                                     self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] += \             # <<<<<<<<<<<<<<
 *                                                     self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \
 *                                                     self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 */
                      __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      __pyx_t_26 = __pyx_v_node_idx1;
                      __pyx_t_27 = __pyx_v_node_idx2;
                      __pyx_t_28 = __pyx_v_node_idx3;
                      __pyx_t_29 = __pyx_v_node_idx4;

                      /* "IBD\GenotypePairModel.pyx":295
 *                                                 if self._ibd == 0:
 *                                                     self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] += \
 *                                                     self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \             # <<<<<<<<<<<<<<
 *                                                     self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 *                                                     self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \
 */
                      __pyx_t_18 = PyNumber_Add(__pyx_v_snp_idx, __pyx_int_1); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      __Pyx_GOTREF(__pyx_t_18);
                      __pyx_t_30 = __Pyx_PyIndex_AsSsize_t(__pyx_t_18); if (unlikely((__pyx_t_30 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

                      /* "IBD\GenotypePairModel.pyx":296
 *                                                     self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] += \
 *                                                     self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \
 *                                                     self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \             # <<<<<<<<<<<<<<
 *                                                     self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \
 *                                                     self._m3._trans[snp_idx][node_idx3][nxt_node_idx3] * \
 */
                      __pyx_t_31 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_31 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

                      /* "IBD\GenotypePairModel.pyx":297
 *                                                     self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \
 *                                                     self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 *                                                     self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \             # <<<<<<<<<<<<<<
 *                                                     self._m3._trans[snp_idx][node_idx3][nxt_node_idx3] * \
 *                                                     self._m4._trans[snp_idx][node_idx4][nxt_node_idx4] * \
 */
                      __pyx_t_32 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_32 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

                      /* "IBD\GenotypePairModel.pyx":298
 *                                                     self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 *                                                     self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \
 *                                                     self._m3._trans[snp_idx][node_idx3][nxt_node_idx3] * \             # <<<<<<<<<<<<<<
 *                                                     self._m4._trans[snp_idx][node_idx4][nxt_node_idx4] * \
 *                                                     self._emission_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] #* \
 */
                      __pyx_t_33 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_33 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

                      /* "IBD\GenotypePairModel.pyx":299
 *                                                     self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \
 *                                                     self._m3._trans[snp_idx][node_idx3][nxt_node_idx3] * \
 *                                                     self._m4._trans[snp_idx][node_idx4][nxt_node_idx4] * \             # <<<<<<<<<<<<<<
 *                                                     self._emission_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] #* \
 *                                                 else:
 */
                      __pyx_t_34 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_34 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

                      /* "IBD\GenotypePairModel.pyx":300
 *                                                     self._m3._trans[snp_idx][node_idx3][nxt_node_idx3] * \
 *                                                     self._m4._trans[snp_idx][node_idx4][nxt_node_idx4] * \
 *                                                     self._emission_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] #* \             # <<<<<<<<<<<<<<
 *                                                 else:
 *                                                     if self._m1._anc == self._m3._anc and node_idx1 == node_idx3 and nxt_node1 == nxt_node3:
 */
                      __pyx_t_18 = PyNumber_Add(__pyx_v_snp_idx, __pyx_int_1); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      __Pyx_GOTREF(__pyx_t_18);
                      __pyx_t_35 = __Pyx_PyIndex_AsSsize_t(__pyx_t_18); if (unlikely((__pyx_t_35 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

                      /* "IBD\GenotypePairModel.pyx":294
 *                                                 nxt_node4 = self._m4._trans_idx[snp_idx][node_idx4][nxt_node_idx4]
 *                                                 if self._ibd == 0:
 *                                                     self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] += \             # <<<<<<<<<<<<<<
 *                                                     self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \
 *                                                     self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 */
                      (((((__pyx_v_self->_backward_prob[__pyx_t_17])[__pyx_t_26])[__pyx_t_27])[__pyx_t_28])[__pyx_t_29]) = ((((((__pyx_v_self->_backward_prob[__pyx_t_17])[__pyx_t_26])[__pyx_t_27])[__pyx_t_28])[__pyx_t_29]) + ((((((((((__pyx_v_self->_backward_prob[__pyx_t_30])[__pyx_v_nxt_node1])[__pyx_v_nxt_node2])[__pyx_v_nxt_node3])[__pyx_v_nxt_node4]) * (((__pyx_v_self->_m1->_trans[__pyx_t_31])[__pyx_v_node_idx1])[__pyx_v_nxt_node_idx1])) * (((__pyx_v_self->_m2->_trans[__pyx_t_32])[__pyx_v_node_idx2])[__pyx_v_nxt_node_idx2])) * (((__pyx_v_self->_m3->_trans[__pyx_t_33])[__pyx_v_node_idx3])[__pyx_v_nxt_node_idx3])) * (((__pyx_v_self->_m4->_trans[__pyx_t_34])[__pyx_v_node_idx4])[__pyx_v_nxt_node_idx4])) * (((((__pyx_v_self->_emission_prob[__pyx_t_35])[__pyx_v_nxt_node1])[__pyx_v_nxt_node2])[__pyx_v_nxt_node3])[__pyx_v_nxt_node4])));
                      goto __pyx_L38;
                    }
                    /*else*/ {

                      /* "IBD\GenotypePairModel.pyx":302
 *                                                     self._emission_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] #* \
 *                                                 else:
 *                                                     if self._m1._anc == self._m3._anc and node_idx1 == node_idx3 and nxt_node1 == nxt_node3:             # <<<<<<<<<<<<<<
 *                                                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] += \
 *                                                         self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \
 */
                      __pyx_t_13 = ((__pyx_v_self->_m1->_anc == __pyx_v_self->_m3->_anc) != 0);
                      if (__pyx_t_13) {
                        __pyx_t_11 = ((__pyx_v_node_idx1 == __pyx_v_node_idx3) != 0);
                        if (__pyx_t_11) {
                          __pyx_t_12 = ((__pyx_v_nxt_node1 == __pyx_v_nxt_node3) != 0);
                          __pyx_t_36 = __pyx_t_12;
                        } else {
                          __pyx_t_36 = __pyx_t_11;
                        }
                        __pyx_t_11 = __pyx_t_36;
                      } else {
                        __pyx_t_11 = __pyx_t_13;
                      }
                      if (__pyx_t_11) {

                        /* "IBD\GenotypePairModel.pyx":303
 *                                                 else:
 *                                                     if self._m1._anc == self._m3._anc and node_idx1 == node_idx3 and nxt_node1 == nxt_node3:
 *                                                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] += \             # <<<<<<<<<<<<<<
 *                                                         self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \
 *                                                         self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 */
                        __pyx_t_17 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_17 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        __pyx_t_26 = __pyx_v_node_idx1;
                        __pyx_t_27 = __pyx_v_node_idx2;
                        __pyx_t_28 = __pyx_v_node_idx3;
                        __pyx_t_29 = __pyx_v_node_idx4;
                        __pyx_t_18 = PyFloat_FromDouble((((((__pyx_v_self->_backward_prob[__pyx_t_17])[__pyx_t_26])[__pyx_t_27])[__pyx_t_28])[__pyx_t_29])); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        __Pyx_GOTREF(__pyx_t_18);

                        /* "IBD\GenotypePairModel.pyx":304
 *                                                     if self._m1._anc == self._m3._anc and node_idx1 == node_idx3 and nxt_node1 == nxt_node3:
 *                                                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] += \
 *                                                         self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \             # <<<<<<<<<<<<<<
 *                                                         self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 *                                                         self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \
 */
                        __pyx_t_1 = PyNumber_Add(__pyx_v_snp_idx, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        __Pyx_GOTREF(__pyx_t_1);
                        __pyx_t_35 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_35 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

                        /* "IBD\GenotypePairModel.pyx":305
 *                                                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] += \
 *                                                         self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \
 *                                                         self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \             # <<<<<<<<<<<<<<
 *                                                         self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \
 *                                                         self._m3._trans[snp_idx][node_idx4][nxt_node_idx4] * \
 */
                        __pyx_t_34 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_34 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

                        /* "IBD\GenotypePairModel.pyx":306
 *                                                         self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \
 *                                                         self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 *                                                         self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \             # <<<<<<<<<<<<<<
 *                                                         self._m3._trans[snp_idx][node_idx4][nxt_node_idx4] * \
 *                                                         self._m4._emission_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4]
 */
                        __pyx_t_33 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_33 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

                        /* "IBD\GenotypePairModel.pyx":307
 *                                                         self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 *                                                         self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \
 *                                                         self._m3._trans[snp_idx][node_idx4][nxt_node_idx4] * \             # <<<<<<<<<<<<<<
 *                                                         self._m4._emission_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4]
 *             # rescaling to avoid underflow
 */
                        __pyx_t_32 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_32 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

                        /* "IBD\GenotypePairModel.pyx":306
 *                                                         self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \
 *                                                         self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 *                                                         self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \             # <<<<<<<<<<<<<<
 *                                                         self._m3._trans[snp_idx][node_idx4][nxt_node_idx4] * \
 *                                                         self._m4._emission_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4]
 */
                        __pyx_t_1 = PyFloat_FromDouble(((((((((__pyx_v_self->_backward_prob[__pyx_t_35])[__pyx_v_nxt_node1])[__pyx_v_nxt_node2])[__pyx_v_nxt_node3])[__pyx_v_nxt_node4]) * (((__pyx_v_self->_m1->_trans[__pyx_t_34])[__pyx_v_node_idx1])[__pyx_v_nxt_node_idx1])) * (((__pyx_v_self->_m2->_trans[__pyx_t_33])[__pyx_v_node_idx2])[__pyx_v_nxt_node_idx2])) * (((__pyx_v_self->_m3->_trans[__pyx_t_32])[__pyx_v_node_idx4])[__pyx_v_nxt_node_idx4]))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        __Pyx_GOTREF(__pyx_t_1);

                        /* "IBD\GenotypePairModel.pyx":308
 *                                                         self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \
 *                                                         self._m3._trans[snp_idx][node_idx4][nxt_node_idx4] * \
 *                                                         self._m4._emission_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4]             # <<<<<<<<<<<<<<
 *             # rescaling to avoid underflow
 *             self.rescale_backward(snp_idx)
 */
                        __pyx_t_37 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_m4), __pyx_n_s_emission_prob); if (unlikely(!__pyx_t_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        __Pyx_GOTREF(__pyx_t_37);
                        __pyx_t_38 = PyNumber_Add(__pyx_v_snp_idx, __pyx_int_1); if (unlikely(!__pyx_t_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        __Pyx_GOTREF(__pyx_t_38);
                        __pyx_t_39 = PyObject_GetItem(__pyx_t_37, __pyx_t_38); if (unlikely(__pyx_t_39 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
                        __Pyx_GOTREF(__pyx_t_39);
                        __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
                        __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
                        __pyx_t_38 = __Pyx_GetItemInt(__pyx_t_39, __pyx_v_nxt_node1, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(__pyx_t_38 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
                        __Pyx_GOTREF(__pyx_t_38);
                        __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
                        __pyx_t_39 = __Pyx_GetItemInt(__pyx_t_38, __pyx_v_nxt_node2, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(__pyx_t_39 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
                        __Pyx_GOTREF(__pyx_t_39);
                        __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
                        __pyx_t_38 = __Pyx_GetItemInt(__pyx_t_39, __pyx_v_nxt_node3, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(__pyx_t_38 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
                        __Pyx_GOTREF(__pyx_t_38);
                        __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
                        __pyx_t_39 = __Pyx_GetItemInt(__pyx_t_38, __pyx_v_nxt_node4, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(__pyx_t_39 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
                        __Pyx_GOTREF(__pyx_t_39);
                        __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;

                        /* "IBD\GenotypePairModel.pyx":307
 *                                                         self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 *                                                         self._m2._trans[snp_idx][node_idx2][nxt_node_idx2] * \
 *                                                         self._m3._trans[snp_idx][node_idx4][nxt_node_idx4] * \             # <<<<<<<<<<<<<<
 *                                                         self._m4._emission_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4]
 *             # rescaling to avoid underflow
 */
                        __pyx_t_38 = PyNumber_Multiply(__pyx_t_1, __pyx_t_39); if (unlikely(!__pyx_t_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        __Pyx_GOTREF(__pyx_t_38);
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                        __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;

                        /* "IBD\GenotypePairModel.pyx":303
 *                                                 else:
 *                                                     if self._m1._anc == self._m3._anc and node_idx1 == node_idx3 and nxt_node1 == nxt_node3:
 *                                                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] += \             # <<<<<<<<<<<<<<
 *                                                         self._backward_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4] * \
 *                                                         self._m1._trans[snp_idx][node_idx1][nxt_node_idx1] * \
 */
                        __pyx_t_39 = PyNumber_InPlaceAdd(__pyx_t_18, __pyx_t_38); if (unlikely(!__pyx_t_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        __Pyx_GOTREF(__pyx_t_39);
                        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                        __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
                        __pyx_t_40 = __pyx_PyFloat_AsDouble(__pyx_t_39); if (unlikely((__pyx_t_40 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
                        __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
                        (((((__pyx_v_self->_backward_prob[__pyx_t_17])[__pyx_t_26])[__pyx_t_27])[__pyx_t_28])[__pyx_t_29]) = __pyx_t_40;
                        goto __pyx_L39;
                      }
                      __pyx_L39:;
                    }
                    __pyx_L38:;
                  }
                }
              }
            }
          }
        }
      }
    }

    /* "IBD\GenotypePairModel.pyx":310
 *                                                         self._m4._emission_prob[snp_idx+1][nxt_node1][nxt_node2][nxt_node3][nxt_node4]
 *             # rescaling to avoid underflow
 *             self.rescale_backward(snp_idx)             # <<<<<<<<<<<<<<
 * 
 *     cdef rescale_backward(self, int snp_idx):
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_snp_idx); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_39 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->rescale_backward(__pyx_v_self, __pyx_t_3); if (unlikely(!__pyx_t_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_39);
    __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "IBD\GenotypePairModel.pyx":245
 *                         self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * self._scale_factor[snp_idx]
 * 
 *     cpdef calc_backward_probs(self):             # <<<<<<<<<<<<<<
 * 
 *         cdef int node_idx1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_37);
  __Pyx_XDECREF(__pyx_t_38);
  __Pyx_XDECREF(__pyx_t_39);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.calc_backward_probs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_snp_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_13calc_backward_probs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_13calc_backward_probs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_backward_probs (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_12calc_backward_probs(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_12calc_backward_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("calc_backward_probs", 0);
  __Pyx_TraceCall("calc_backward_probs", __pyx_f[0], 245);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->calc_backward_probs(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.calc_backward_probs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":312
 *             self.rescale_backward(snp_idx)
 * 
 *     cdef rescale_backward(self, int snp_idx):             # <<<<<<<<<<<<<<
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *             for node_idx2 in range(self._m2._layer_state_num[snp_idx]):
 */

static PyObject *__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_rescale_backward(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, int __pyx_v_snp_idx) {
  int __pyx_v_node_idx1;
  PyObject *__pyx_v_node_idx2 = NULL;
  int __pyx_v_node_idx3;
  int __pyx_v_node_idx4;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("rescale_backward", 0);
  __Pyx_TraceCall("rescale_backward", __pyx_f[0], 312);

  /* "IBD\GenotypePairModel.pyx":313
 * 
 *     cdef rescale_backward(self, int snp_idx):
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *             for node_idx2 in range(self._m2._layer_state_num[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 */
  __pyx_t_1 = (__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_node_idx1 = __pyx_t_2;

    /* "IBD\GenotypePairModel.pyx":314
 *     cdef rescale_backward(self, int snp_idx):
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *             for node_idx2 in range(self._m2._layer_state_num[snp_idx]):             # <<<<<<<<<<<<<<
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_m2), __pyx_n_s_layer_state_num); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_snp_idx, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyList_CheckExact(__pyx_t_4) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_3)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_3)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_node_idx2, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "IBD\GenotypePairModel.pyx":315
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *             for node_idx2 in range(self._m2._layer_state_num[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                         if snp_idx > 0:
 */
      __pyx_t_7 = (__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_node_idx3 = __pyx_t_8;

        /* "IBD\GenotypePairModel.pyx":316
 *             for node_idx2 in range(self._m2._layer_state_num[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                         if snp_idx > 0:
 *                             self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 */
        __pyx_t_9 = (__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]);
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_node_idx4 = __pyx_t_10;

          /* "IBD\GenotypePairModel.pyx":317
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                         if snp_idx > 0:             # <<<<<<<<<<<<<<
 *                             self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 *                         else:
 */
          __pyx_t_11 = ((__pyx_v_snp_idx > 0) != 0);
          if (__pyx_t_11) {

            /* "IBD\GenotypePairModel.pyx":318
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                         if snp_idx > 0:
 *                             self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]             # <<<<<<<<<<<<<<
 *                         else:
 *                             if self._ibd == 0:
 */
            __pyx_t_12 = __pyx_v_snp_idx;
            __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_node_idx2); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            (__pyx_v_self->_backward_scale_factor[__pyx_t_12]) = ((__pyx_v_self->_backward_scale_factor[__pyx_t_12]) + (((((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_t_13])[__pyx_v_node_idx3])[__pyx_v_node_idx4]));
            goto __pyx_L11;
          }
          /*else*/ {

            /* "IBD\GenotypePairModel.pyx":320
 *                             self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 *                         else:
 *                             if self._ibd == 0:             # <<<<<<<<<<<<<<
 *                                 self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                 self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] * \
 */
            __pyx_t_11 = ((__pyx_v_self->_ibd == 0) != 0);
            if (__pyx_t_11) {

              /* "IBD\GenotypePairModel.pyx":321
 *                         else:
 *                             if self._ibd == 0:
 *                                 self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * \             # <<<<<<<<<<<<<<
 *                                 self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                 self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m3._pi[node_idx3] * self._m4._pi[node_idx4]
 */
              __pyx_t_12 = __pyx_v_snp_idx;
              __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_node_idx2); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

              /* "IBD\GenotypePairModel.pyx":322
 *                             if self._ibd == 0:
 *                                 self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                 self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] * \             # <<<<<<<<<<<<<<
 *                                 self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m3._pi[node_idx3] * self._m4._pi[node_idx4]
 *                             else:
 */
              __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_v_node_idx2); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

              /* "IBD\GenotypePairModel.pyx":323
 *                                 self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                 self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                 self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m3._pi[node_idx3] * self._m4._pi[node_idx4]             # <<<<<<<<<<<<<<
 *                             else:
 *                                 if self._m1._anc == self._m3._anc:
 */
              __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_v_node_idx2); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

              /* "IBD\GenotypePairModel.pyx":321
 *                         else:
 *                             if self._ibd == 0:
 *                                 self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * \             # <<<<<<<<<<<<<<
 *                                 self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                 self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m3._pi[node_idx3] * self._m4._pi[node_idx4]
 */
              (__pyx_v_self->_backward_scale_factor[__pyx_t_12]) = ((__pyx_v_self->_backward_scale_factor[__pyx_t_12]) + ((((((((((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_t_13])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) * (((((__pyx_v_self->_emission_prob[0])[__pyx_v_node_idx1])[__pyx_t_14])[__pyx_v_node_idx3])[__pyx_v_node_idx4])) * (__pyx_v_self->_m1->_pi[__pyx_v_node_idx1])) * (__pyx_v_self->_m2->_pi[__pyx_t_15])) * (__pyx_v_self->_m3->_pi[__pyx_v_node_idx3])) * (__pyx_v_self->_m4->_pi[__pyx_v_node_idx4])));
              goto __pyx_L12;
            }
            /*else*/ {

              /* "IBD\GenotypePairModel.pyx":325
 *                                 self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m3._pi[node_idx3] * self._m4._pi[node_idx4]
 *                             else:
 *                                 if self._m1._anc == self._m3._anc:             # <<<<<<<<<<<<<<
 *                                     self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                     self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] * \
 */
              __pyx_t_11 = ((__pyx_v_self->_m1->_anc == __pyx_v_self->_m3->_anc) != 0);
              if (__pyx_t_11) {

                /* "IBD\GenotypePairModel.pyx":326
 *                             else:
 *                                 if self._m1._anc == self._m3._anc:
 *                                     self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * \             # <<<<<<<<<<<<<<
 *                                     self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                     self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m4._pi[node_idx4]
 */
                __pyx_t_12 = __pyx_v_snp_idx;
                __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_v_node_idx2); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

                /* "IBD\GenotypePairModel.pyx":327
 *                                 if self._m1._anc == self._m3._anc:
 *                                     self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                     self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] * \             # <<<<<<<<<<<<<<
 *                                     self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m4._pi[node_idx4]
 * 
 */
                __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_v_node_idx2); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

                /* "IBD\GenotypePairModel.pyx":328
 *                                     self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                     self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                     self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m4._pi[node_idx4]             # <<<<<<<<<<<<<<
 * 
 *                             if self._backward_scale_factor[snp_idx] > 0:
 */
                __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_node_idx2); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

                /* "IBD\GenotypePairModel.pyx":326
 *                             else:
 *                                 if self._m1._anc == self._m3._anc:
 *                                     self._backward_scale_factor[snp_idx] += self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * \             # <<<<<<<<<<<<<<
 *                                     self._emission_prob[0][node_idx1][node_idx2][node_idx3][node_idx4] * \
 *                                     self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m4._pi[node_idx4]
 */
                (__pyx_v_self->_backward_scale_factor[__pyx_t_12]) = ((__pyx_v_self->_backward_scale_factor[__pyx_t_12]) + (((((((((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_t_15])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) * (((((__pyx_v_self->_emission_prob[0])[__pyx_v_node_idx1])[__pyx_t_14])[__pyx_v_node_idx3])[__pyx_v_node_idx4])) * (__pyx_v_self->_m1->_pi[__pyx_v_node_idx1])) * (__pyx_v_self->_m2->_pi[__pyx_t_13])) * (__pyx_v_self->_m4->_pi[__pyx_v_node_idx4])));
                goto __pyx_L13;
              }
              __pyx_L13:;
            }
            __pyx_L12:;

            /* "IBD\GenotypePairModel.pyx":330
 *                                     self._m1._pi[node_idx1] * self._m2._pi[node_idx2] * self._m4._pi[node_idx4]
 * 
 *                             if self._backward_scale_factor[snp_idx] > 0:             # <<<<<<<<<<<<<<
 *                                 self._backward_scale_factor[snp_idx] = 1.0 / self._backward_scale_factor[snp_idx]
 *                             else:
 */
            __pyx_t_11 = (((__pyx_v_self->_backward_scale_factor[__pyx_v_snp_idx]) > 0.0) != 0);
            if (__pyx_t_11) {

              /* "IBD\GenotypePairModel.pyx":331
 * 
 *                             if self._backward_scale_factor[snp_idx] > 0:
 *                                 self._backward_scale_factor[snp_idx] = 1.0 / self._backward_scale_factor[snp_idx]             # <<<<<<<<<<<<<<
 *                             else:
 *                                 self._backward_scale_factor[snp_idx] = DBL_MAX
 */
              (__pyx_v_self->_backward_scale_factor[__pyx_v_snp_idx]) = (1.0 / (__pyx_v_self->_backward_scale_factor[__pyx_v_snp_idx]));
              goto __pyx_L14;
            }
            /*else*/ {

              /* "IBD\GenotypePairModel.pyx":333
 *                                 self._backward_scale_factor[snp_idx] = 1.0 / self._backward_scale_factor[snp_idx]
 *                             else:
 *                                 self._backward_scale_factor[snp_idx] = DBL_MAX             # <<<<<<<<<<<<<<
 * 
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 */
              (__pyx_v_self->_backward_scale_factor[__pyx_v_snp_idx]) = DBL_MAX;
            }
            __pyx_L14:;
          }
          __pyx_L11:;
        }
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":335
 *                                 self._backward_scale_factor[snp_idx] = DBL_MAX
 * 
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 */
  __pyx_t_1 = (__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_node_idx1 = __pyx_t_2;

    /* "IBD\GenotypePairModel.pyx":336
 * 
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 */
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_node_idx2, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "IBD\GenotypePairModel.pyx":337
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 */
      __pyx_t_7 = (__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_node_idx3 = __pyx_t_8;

        /* "IBD\GenotypePairModel.pyx":338
 *             for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * self._backward_scale_factor[snp_idx]
 */
        __pyx_t_9 = (__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]);
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_node_idx4 = __pyx_t_10;

          /* "IBD\GenotypePairModel.pyx":340
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * self._backward_scale_factor[snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cpdef double calc_likelihood(self, TestSet obs_data, bool free_mem=True):
 */
          __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_v_node_idx2); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

          /* "IBD\GenotypePairModel.pyx":339
 *                 for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                     for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] = \             # <<<<<<<<<<<<<<
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * self._backward_scale_factor[snp_idx]
 * 
 */
          __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_v_node_idx2); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          (((((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_t_14])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) = ((((((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_t_13])[__pyx_v_node_idx3])[__pyx_v_node_idx4]) * (__pyx_v_self->_backward_scale_factor[__pyx_v_snp_idx]));
        }
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":312
 *             self.rescale_backward(snp_idx)
 * 
 *     cdef rescale_backward(self, int snp_idx):             # <<<<<<<<<<<<<<
 *         for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *             for node_idx2 in range(self._m2._layer_state_num[snp_idx]):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.rescale_backward", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node_idx2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":342
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * self._backward_scale_factor[snp_idx]
 * 
 *     cpdef double calc_likelihood(self, TestSet obs_data, bool free_mem=True):             # <<<<<<<<<<<<<<
 *         cdef GenotypePair gp = <GenotypePair?>obs_data
 *         cdef int snp_idx
 */

static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_15calc_likelihood(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_calc_likelihood(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_obs_data, int __pyx_skip_dispatch, struct __pyx_opt_args_3IBD_17GenotypePairModel_17GenotypePairModel_calc_likelihood *__pyx_optional_args) {
  bool __pyx_v_free_mem = ((bool)1);
  struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_gp = 0;
  int __pyx_v_snp_idx;
  PyObject *__pyx_v_likelihood = 0;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("calc_likelihood", 0);
  __Pyx_TraceCall("calc_likelihood", __pyx_f[0], 342);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_free_mem = __pyx_optional_args->free_mem;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_calc_likelihood); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_15calc_likelihood)) {
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_free_mem); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_obs_data));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_obs_data));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_obs_data));
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":343
 * 
 *     cpdef double calc_likelihood(self, TestSet obs_data, bool free_mem=True):
 *         cdef GenotypePair gp = <GenotypePair?>obs_data             # <<<<<<<<<<<<<<
 *         cdef int snp_idx
 *         cdef likelihood = 0
 */
  if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_obs_data), __pyx_ptype_3IBD_7TestSet_GenotypePair)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((PyObject *)__pyx_v_obs_data);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_gp = ((struct __pyx_obj_3IBD_7TestSet_GenotypePair *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":345
 *         cdef GenotypePair gp = <GenotypePair?>obs_data
 *         cdef int snp_idx
 *         cdef likelihood = 0             # <<<<<<<<<<<<<<
 * 
 *         self.alloc_mem()
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_likelihood = __pyx_int_0;

  /* "IBD\GenotypePairModel.pyx":347
 *         cdef likelihood = 0
 * 
 *         self.alloc_mem()             # <<<<<<<<<<<<<<
 *         self.calc_emission_probs(gp)
 *         self.calc_forward_probs()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->alloc_mem(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":348
 * 
 *         self.alloc_mem()
 *         self.calc_emission_probs(gp)             # <<<<<<<<<<<<<<
 *         self.calc_forward_probs()
 *         #self.print_inner_prob()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->calc_emission_probs(__pyx_v_self, __pyx_v_gp, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":349
 *         self.alloc_mem()
 *         self.calc_emission_probs(gp)
 *         self.calc_forward_probs()             # <<<<<<<<<<<<<<
 *         #self.print_inner_prob()
 *         for snp_idx in range(self._m1._snp_num):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->calc_forward_probs(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":351
 *         self.calc_forward_probs()
 *         #self.print_inner_prob()
 *         for snp_idx in range(self._m1._snp_num):             # <<<<<<<<<<<<<<
 *             likelihood = likelihood - log(self._scale_factor[snp_idx])
 *         if free_mem:
 */
  __pyx_t_5 = __pyx_v_self->_m1->_snp_num;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_snp_idx = __pyx_t_6;

    /* "IBD\GenotypePairModel.pyx":352
 *         #self.print_inner_prob()
 *         for snp_idx in range(self._m1._snp_num):
 *             likelihood = likelihood - log(self._scale_factor[snp_idx])             # <<<<<<<<<<<<<<
 *         if free_mem:
 *             self.free_mem()
 */
    __pyx_t_1 = PyFloat_FromDouble(log((__pyx_v_self->_scale_factor[__pyx_v_snp_idx]))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_likelihood, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_likelihood, __pyx_t_2);
    __pyx_t_2 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":353
 *         for snp_idx in range(self._m1._snp_num):
 *             likelihood = likelihood - log(self._scale_factor[snp_idx])
 *         if free_mem:             # <<<<<<<<<<<<<<
 *             self.free_mem()
 *         return likelihood
 */
  __pyx_t_7 = (__pyx_v_free_mem != 0);
  if (__pyx_t_7) {

    /* "IBD\GenotypePairModel.pyx":354
 *             likelihood = likelihood - log(self._scale_factor[snp_idx])
 *         if free_mem:
 *             self.free_mem()             # <<<<<<<<<<<<<<
 *         return likelihood
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->free_mem(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "IBD\GenotypePairModel.pyx":355
 *         if free_mem:
 *             self.free_mem()
 *         return likelihood             # <<<<<<<<<<<<<<
 * 
 *     cpdef double ibd_trans_prob(self, GenotypePairModel other):
 */
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_likelihood); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "IBD\GenotypePairModel.pyx":342
 *                         self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4] * self._backward_scale_factor[snp_idx]
 * 
 *     cpdef double calc_likelihood(self, TestSet obs_data, bool free_mem=True):             # <<<<<<<<<<<<<<
 *         cdef GenotypePair gp = <GenotypePair?>obs_data
 *         cdef int snp_idx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("IBD.GenotypePairModel.GenotypePairModel.calc_likelihood", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gp);
  __Pyx_XDECREF(__pyx_v_likelihood);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_15calc_likelihood(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_15calc_likelihood(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_obs_data = 0;
  bool __pyx_v_free_mem;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_likelihood (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obs_data,&__pyx_n_s_free_mem,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obs_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_free_mem);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calc_likelihood") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obs_data = ((struct __pyx_obj_3IBD_7TestSet_TestSet *)values[0]);
    if (values[1]) {
      __pyx_v_free_mem = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_free_mem == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_free_mem = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calc_likelihood", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.calc_likelihood", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obs_data), __pyx_ptype_3IBD_7TestSet_TestSet, 1, "obs_data", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_14calc_likelihood(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), __pyx_v_obs_data, __pyx_v_free_mem);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_14calc_likelihood(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_7TestSet_TestSet *__pyx_v_obs_data, bool __pyx_v_free_mem) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  struct __pyx_opt_args_3IBD_10InnerModel_10InnerModel_calc_likelihood __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("calc_likelihood", 0);
  __Pyx_TraceCall("calc_likelihood", __pyx_f[0], 342);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.free_mem = __pyx_v_free_mem;
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.calc_likelihood(((struct __pyx_obj_3IBD_10InnerModel_InnerModel *)__pyx_v_self), __pyx_v_obs_data, 1, &__pyx_t_2); 
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.calc_likelihood", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":357
 *         return likelihood
 * 
 *     cpdef double ibd_trans_prob(self, GenotypePairModel other):             # <<<<<<<<<<<<<<
 *         cdef double d = self._m1._gm._genetic_dist[self._m1._snp_num - 1] - self._m1._gm._genetic_dist[0]
 *         cdef double s_0_0, s_0_1, s_1_0, s_1_1
 */

static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_17ibd_trans_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static double __pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_ibd_trans_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_other, int __pyx_skip_dispatch) {
  double __pyx_v_d;
  double __pyx_v_s_0_0;
  double __pyx_v_s_0_1;
  double __pyx_v_s_1_0;
  double __pyx_v_s_1_1;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("ibd_trans_prob", 0);
  __Pyx_TraceCall("ibd_trans_prob", __pyx_f[0], 357);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ibd_trans_prob); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_17ibd_trans_prob)) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_other));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_other));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":358
 * 
 *     cpdef double ibd_trans_prob(self, GenotypePairModel other):
 *         cdef double d = self._m1._gm._genetic_dist[self._m1._snp_num - 1] - self._m1._gm._genetic_dist[0]             # <<<<<<<<<<<<<<
 *         cdef double s_0_0, s_0_1, s_1_0, s_1_1
 *         s_1_1 = exp(-self._m1._t_1_0 * d)
 */
  __pyx_v_d = ((__pyx_v_self->_m1->_gm->_genetic_dist[(__pyx_v_self->_m1->_snp_num - 1)]) - (__pyx_v_self->_m1->_gm->_genetic_dist[0]));

  /* "IBD\GenotypePairModel.pyx":360
 *         cdef double d = self._m1._gm._genetic_dist[self._m1._snp_num - 1] - self._m1._gm._genetic_dist[0]
 *         cdef double s_0_0, s_0_1, s_1_0, s_1_1
 *         s_1_1 = exp(-self._m1._t_1_0 * d)             # <<<<<<<<<<<<<<
 *         s_0_0 = exp(-self._m1._t_0_1 * d)
 *         s_1_0 = (1 - s_1_1)
 */
  __pyx_v_s_1_1 = exp(((-__pyx_v_self->_m1->_t_1_0) * __pyx_v_d));

  /* "IBD\GenotypePairModel.pyx":361
 *         cdef double s_0_0, s_0_1, s_1_0, s_1_1
 *         s_1_1 = exp(-self._m1._t_1_0 * d)
 *         s_0_0 = exp(-self._m1._t_0_1 * d)             # <<<<<<<<<<<<<<
 *         s_1_0 = (1 - s_1_1)
 *         s_0_1 = (1 - s_0_0)
 */
  __pyx_v_s_0_0 = exp(((-__pyx_v_self->_m1->_t_0_1) * __pyx_v_d));

  /* "IBD\GenotypePairModel.pyx":362
 *         s_1_1 = exp(-self._m1._t_1_0 * d)
 *         s_0_0 = exp(-self._m1._t_0_1 * d)
 *         s_1_0 = (1 - s_1_1)             # <<<<<<<<<<<<<<
 *         s_0_1 = (1 - s_0_0)
 *         if self._ibd == 1 and other._ibd == 1:
 */
  __pyx_v_s_1_0 = (1.0 - __pyx_v_s_1_1);

  /* "IBD\GenotypePairModel.pyx":363
 *         s_0_0 = exp(-self._m1._t_0_1 * d)
 *         s_1_0 = (1 - s_1_1)
 *         s_0_1 = (1 - s_0_0)             # <<<<<<<<<<<<<<
 *         if self._ibd == 1 and other._ibd == 1:
 *             return s_1_1
 */
  __pyx_v_s_0_1 = (1.0 - __pyx_v_s_0_0);

  /* "IBD\GenotypePairModel.pyx":364
 *         s_1_0 = (1 - s_1_1)
 *         s_0_1 = (1 - s_0_0)
 *         if self._ibd == 1 and other._ibd == 1:             # <<<<<<<<<<<<<<
 *             return s_1_1
 *         if self._ibd == 0 and other._ibd == 0:
 */
  __pyx_t_5 = ((__pyx_v_self->_ibd == 1) != 0);
  if (__pyx_t_5) {
    __pyx_t_6 = ((__pyx_v_other->_ibd == 1) != 0);
    __pyx_t_7 = __pyx_t_6;
  } else {
    __pyx_t_7 = __pyx_t_5;
  }
  if (__pyx_t_7) {

    /* "IBD\GenotypePairModel.pyx":365
 *         s_0_1 = (1 - s_0_0)
 *         if self._ibd == 1 and other._ibd == 1:
 *             return s_1_1             # <<<<<<<<<<<<<<
 *         if self._ibd == 0 and other._ibd == 0:
 *             return s_0_0
 */
    __pyx_r = __pyx_v_s_1_1;
    goto __pyx_L0;
  }

  /* "IBD\GenotypePairModel.pyx":366
 *         if self._ibd == 1 and other._ibd == 1:
 *             return s_1_1
 *         if self._ibd == 0 and other._ibd == 0:             # <<<<<<<<<<<<<<
 *             return s_0_0
 *         if self._ibd == 1 and other._ibd == 0:
 */
  __pyx_t_7 = ((__pyx_v_self->_ibd == 0) != 0);
  if (__pyx_t_7) {
    __pyx_t_5 = ((__pyx_v_other->_ibd == 0) != 0);
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_7;
  }
  if (__pyx_t_6) {

    /* "IBD\GenotypePairModel.pyx":367
 *             return s_1_1
 *         if self._ibd == 0 and other._ibd == 0:
 *             return s_0_0             # <<<<<<<<<<<<<<
 *         if self._ibd == 1 and other._ibd == 0:
 *             return s_1_0
 */
    __pyx_r = __pyx_v_s_0_0;
    goto __pyx_L0;
  }

  /* "IBD\GenotypePairModel.pyx":368
 *         if self._ibd == 0 and other._ibd == 0:
 *             return s_0_0
 *         if self._ibd == 1 and other._ibd == 0:             # <<<<<<<<<<<<<<
 *             return s_1_0
 *         if self._ibd == 0 and other._ibd == 1:
 */
  __pyx_t_6 = ((__pyx_v_self->_ibd == 1) != 0);
  if (__pyx_t_6) {
    __pyx_t_7 = ((__pyx_v_other->_ibd == 0) != 0);
    __pyx_t_5 = __pyx_t_7;
  } else {
    __pyx_t_5 = __pyx_t_6;
  }
  if (__pyx_t_5) {

    /* "IBD\GenotypePairModel.pyx":369
 *             return s_0_0
 *         if self._ibd == 1 and other._ibd == 0:
 *             return s_1_0             # <<<<<<<<<<<<<<
 *         if self._ibd == 0 and other._ibd == 1:
 *             return s_0_1
 */
    __pyx_r = __pyx_v_s_1_0;
    goto __pyx_L0;
  }

  /* "IBD\GenotypePairModel.pyx":370
 *         if self._ibd == 1 and other._ibd == 0:
 *             return s_1_0
 *         if self._ibd == 0 and other._ibd == 1:             # <<<<<<<<<<<<<<
 *             return s_0_1
 * 
 */
  __pyx_t_5 = ((__pyx_v_self->_ibd == 0) != 0);
  if (__pyx_t_5) {
    __pyx_t_6 = ((__pyx_v_other->_ibd == 1) != 0);
    __pyx_t_7 = __pyx_t_6;
  } else {
    __pyx_t_7 = __pyx_t_5;
  }
  if (__pyx_t_7) {

    /* "IBD\GenotypePairModel.pyx":371
 *             return s_1_0
 *         if self._ibd == 0 and other._ibd == 1:
 *             return s_0_1             # <<<<<<<<<<<<<<
 * 
 *     cpdef double anc_trans_prob(self, GenotypePairModel other):
 */
    __pyx_r = __pyx_v_s_0_1;
    goto __pyx_L0;
  }

  /* "IBD\GenotypePairModel.pyx":357
 *         return likelihood
 * 
 *     cpdef double ibd_trans_prob(self, GenotypePairModel other):             # <<<<<<<<<<<<<<
 *         cdef double d = self._m1._gm._genetic_dist[self._m1._snp_num - 1] - self._m1._gm._genetic_dist[0]
 *         cdef double s_0_0, s_0_1, s_1_0, s_1_1
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("IBD.GenotypePairModel.GenotypePairModel.ibd_trans_prob", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_17ibd_trans_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_17ibd_trans_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ibd_trans_prob (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_3IBD_17GenotypePairModel_GenotypePairModel, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_16ibd_trans_prob(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), ((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_16ibd_trans_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("ibd_trans_prob", 0);
  __Pyx_TraceCall("ibd_trans_prob", __pyx_f[0], 357);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->ibd_trans_prob(__pyx_v_self, __pyx_v_other, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.ibd_trans_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":373
 *             return s_0_1
 * 
 *     cpdef double anc_trans_prob(self, GenotypePairModel other):             # <<<<<<<<<<<<<<
 *         cdef double win_recomb = (self._m1._gm._genetic_dist[self._m1._snp_num - 1] - self._m1._gm._genetic_dist[0])
 *         if win_recomb > 0:
 */

static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_19anc_trans_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static double __pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_anc_trans_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_other, int __pyx_skip_dispatch) {
  double __pyx_v_win_recomb;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("anc_trans_prob", 0);
  __Pyx_TraceCall("anc_trans_prob", __pyx_f[0], 373);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_anc_trans_prob); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_19anc_trans_prob)) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_other));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_other));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":374
 * 
 *     cpdef double anc_trans_prob(self, GenotypePairModel other):
 *         cdef double win_recomb = (self._m1._gm._genetic_dist[self._m1._snp_num - 1] - self._m1._gm._genetic_dist[0])             # <<<<<<<<<<<<<<
 *         if win_recomb > 0:
 *             return ((self._g - 1) * win_recomb * \
 */
  __pyx_v_win_recomb = ((__pyx_v_self->_m1->_gm->_genetic_dist[(__pyx_v_self->_m1->_snp_num - 1)]) - (__pyx_v_self->_m1->_gm->_genetic_dist[0]));

  /* "IBD\GenotypePairModel.pyx":375
 *     cpdef double anc_trans_prob(self, GenotypePairModel other):
 *         cdef double win_recomb = (self._m1._gm._genetic_dist[self._m1._snp_num - 1] - self._m1._gm._genetic_dist[0])
 *         if win_recomb > 0:             # <<<<<<<<<<<<<<
 *             return ((self._g - 1) * win_recomb * \
 *             single_anc_trans_prob(self._m1, other._m1) * \
 */
  __pyx_t_5 = ((__pyx_v_win_recomb > 0.0) != 0);
  if (__pyx_t_5) {

    /* "IBD\GenotypePairModel.pyx":377
 *         if win_recomb > 0:
 *             return ((self._g - 1) * win_recomb * \
 *             single_anc_trans_prob(self._m1, other._m1) * \             # <<<<<<<<<<<<<<
 *             single_anc_trans_prob(self._m2, other._m2) * \
 *             single_anc_trans_prob(self._m3, other._m3) * \
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->_m1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = ((PyObject *)__pyx_v_other->_m1);
    __Pyx_INCREF(__pyx_t_3);

    /* "IBD\GenotypePairModel.pyx":378
 *             return ((self._g - 1) * win_recomb * \
 *             single_anc_trans_prob(self._m1, other._m1) * \
 *             single_anc_trans_prob(self._m2, other._m2) * \             # <<<<<<<<<<<<<<
 *             single_anc_trans_prob(self._m3, other._m3) * \
 *             single_anc_trans_prob(self._m4, other._m4))
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_self->_m2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_6 = ((PyObject *)__pyx_v_other->_m2);
    __Pyx_INCREF(__pyx_t_6);

    /* "IBD\GenotypePairModel.pyx":379
 *             single_anc_trans_prob(self._m1, other._m1) * \
 *             single_anc_trans_prob(self._m2, other._m2) * \
 *             single_anc_trans_prob(self._m3, other._m3) * \             # <<<<<<<<<<<<<<
 *             single_anc_trans_prob(self._m4, other._m4))
 *         else:
 */
    __pyx_t_7 = ((PyObject *)__pyx_v_self->_m3);
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_8 = ((PyObject *)__pyx_v_other->_m3);
    __Pyx_INCREF(__pyx_t_8);

    /* "IBD\GenotypePairModel.pyx":380
 *             single_anc_trans_prob(self._m2, other._m2) * \
 *             single_anc_trans_prob(self._m3, other._m3) * \
 *             single_anc_trans_prob(self._m4, other._m4))             # <<<<<<<<<<<<<<
 *         else:
 *             return 1
 */
    __pyx_t_9 = ((PyObject *)__pyx_v_self->_m4);
    __Pyx_INCREF(__pyx_t_9);
    __pyx_t_10 = ((PyObject *)__pyx_v_other->_m4);
    __Pyx_INCREF(__pyx_t_10);

    /* "IBD\GenotypePairModel.pyx":379
 *             single_anc_trans_prob(self._m1, other._m1) * \
 *             single_anc_trans_prob(self._m2, other._m2) * \
 *             single_anc_trans_prob(self._m3, other._m3) * \             # <<<<<<<<<<<<<<
 *             single_anc_trans_prob(self._m4, other._m4))
 *         else:
 */
    __pyx_r = ((((((__pyx_v_self->_g - 1) * __pyx_v_win_recomb) * __pyx_f_3IBD_17GenotypePairModel_single_anc_trans_prob(((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_1), ((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_3))) * __pyx_f_3IBD_17GenotypePairModel_single_anc_trans_prob(((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_2), ((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_6))) * __pyx_f_3IBD_17GenotypePairModel_single_anc_trans_prob(((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_7), ((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_8))) * __pyx_f_3IBD_17GenotypePairModel_single_anc_trans_prob(((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_9), ((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_10)));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "IBD\GenotypePairModel.pyx":382
 *             single_anc_trans_prob(self._m4, other._m4))
 *         else:
 *             return 1             # <<<<<<<<<<<<<<
 * 
 *     cpdef double trans_prob(self, InnerModel other):
 */
    __pyx_r = 1.0;
    goto __pyx_L0;
  }

  /* "IBD\GenotypePairModel.pyx":373
 *             return s_0_1
 * 
 *     cpdef double anc_trans_prob(self, GenotypePairModel other):             # <<<<<<<<<<<<<<
 *         cdef double win_recomb = (self._m1._gm._genetic_dist[self._m1._snp_num - 1] - self._m1._gm._genetic_dist[0])
 *         if win_recomb > 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("IBD.GenotypePairModel.GenotypePairModel.anc_trans_prob", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_19anc_trans_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_19anc_trans_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("anc_trans_prob (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_3IBD_17GenotypePairModel_GenotypePairModel, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_18anc_trans_prob(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), ((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_18anc_trans_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("anc_trans_prob", 0);
  __Pyx_TraceCall("anc_trans_prob", __pyx_f[0], 373);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->anc_trans_prob(__pyx_v_self, __pyx_v_other, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.anc_trans_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":384
 *             return 1
 * 
 *     cpdef double trans_prob(self, InnerModel other):             # <<<<<<<<<<<<<<
 *         cdef GenotypePairModel other_gpm = <GenotypePairModel?>other
 *         return self.anc_trans_prob(other_gpm) * self.ibd_trans_prob(other_gpm)
 */

static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_21trans_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static double __pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_trans_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_10InnerModel_InnerModel *__pyx_v_other, int __pyx_skip_dispatch) {
  struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_other_gpm = 0;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("trans_prob", 0);
  __Pyx_TraceCall("trans_prob", __pyx_f[0], 384);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trans_prob); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_21trans_prob)) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_other));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_other));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":385
 * 
 *     cpdef double trans_prob(self, InnerModel other):
 *         cdef GenotypePairModel other_gpm = <GenotypePairModel?>other             # <<<<<<<<<<<<<<
 *         return self.anc_trans_prob(other_gpm) * self.ibd_trans_prob(other_gpm)
 * 
 */
  if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_3IBD_17GenotypePairModel_GenotypePairModel)))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((PyObject *)__pyx_v_other);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_other_gpm = ((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":386
 *     cpdef double trans_prob(self, InnerModel other):
 *         cdef GenotypePairModel other_gpm = <GenotypePairModel?>other
 *         return self.anc_trans_prob(other_gpm) * self.ibd_trans_prob(other_gpm)             # <<<<<<<<<<<<<<
 * 
 *     cpdef print_inner_prob(self):
 */
  __pyx_r = (((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->anc_trans_prob(__pyx_v_self, __pyx_v_other_gpm, 0) * ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->ibd_trans_prob(__pyx_v_self, __pyx_v_other_gpm, 0));
  goto __pyx_L0;

  /* "IBD\GenotypePairModel.pyx":384
 *             return 1
 * 
 *     cpdef double trans_prob(self, InnerModel other):             # <<<<<<<<<<<<<<
 *         cdef GenotypePairModel other_gpm = <GenotypePairModel?>other
 *         return self.anc_trans_prob(other_gpm) * self.ibd_trans_prob(other_gpm)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("IBD.GenotypePairModel.GenotypePairModel.trans_prob", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_other_gpm);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_21trans_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_21trans_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trans_prob (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_3IBD_10InnerModel_InnerModel, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_20trans_prob(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), ((struct __pyx_obj_3IBD_10InnerModel_InnerModel *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_20trans_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, struct __pyx_obj_3IBD_10InnerModel_InnerModel *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("trans_prob", 0);
  __Pyx_TraceCall("trans_prob", __pyx_f[0], 384);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.trans_prob(((struct __pyx_obj_3IBD_10InnerModel_InnerModel *)__pyx_v_self), __pyx_v_other, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.trans_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":388
 *         return self.anc_trans_prob(other_gpm) * self.ibd_trans_prob(other_gpm)
 * 
 *     cpdef print_inner_prob(self):             # <<<<<<<<<<<<<<
 *         for snp_idx in range(self._m1._snp_num):
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 */

static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_23print_inner_prob(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_print_inner_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_snp_idx;
  int __pyx_v_node_idx1;
  int __pyx_v_node_idx2;
  int __pyx_v_node_idx3;
  int __pyx_v_node_idx4;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("print_inner_prob", 0);
  __Pyx_TraceCall("print_inner_prob", __pyx_f[0], 388);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_print_inner_prob); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_23print_inner_prob)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":389
 * 
 *     cpdef print_inner_prob(self):
 *         for snp_idx in range(self._m1._snp_num):             # <<<<<<<<<<<<<<
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 */
  __pyx_t_3 = __pyx_v_self->_m1->_snp_num;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_snp_idx = __pyx_t_4;

    /* "IBD\GenotypePairModel.pyx":390
 *     cpdef print_inner_prob(self):
 *         for snp_idx in range(self._m1._snp_num):
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 */
    __pyx_t_5 = (__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_node_idx1 = __pyx_t_6;

      /* "IBD\GenotypePairModel.pyx":391
 *         for snp_idx in range(self._m1._snp_num):
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 */
      __pyx_t_7 = (__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx]);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_node_idx2 = __pyx_t_8;

        /* "IBD\GenotypePairModel.pyx":392
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             print str(snp_idx) + " " + \
 */
        __pyx_t_9 = (__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]);
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_node_idx3 = __pyx_t_10;

          /* "IBD\GenotypePairModel.pyx":393
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                             print str(snp_idx) + " " + \
 *                             str(node_idx1) + " " + \
 */
          __pyx_t_11 = (__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]);
          for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
            __pyx_v_node_idx4 = __pyx_t_12;

            /* "IBD\GenotypePairModel.pyx":394
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             print str(snp_idx) + " " + \             # <<<<<<<<<<<<<<
 *                             str(node_idx1) + " " + \
 *                             str(node_idx2) + " " + \
 */
            __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_snp_idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "IBD\GenotypePairModel.pyx":395
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             print str(snp_idx) + " " + \
 *                             str(node_idx1) + " " + \             # <<<<<<<<<<<<<<
 *                             str(node_idx2) + " " + \
 *                             str(node_idx3) + " " + \
 */
            __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_node_idx1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "IBD\GenotypePairModel.pyx":394
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             print str(snp_idx) + " " + \             # <<<<<<<<<<<<<<
 *                             str(node_idx1) + " " + \
 *                             str(node_idx2) + " " + \
 */
            __pyx_t_13 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "IBD\GenotypePairModel.pyx":395
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             print str(snp_idx) + " " + \
 *                             str(node_idx1) + " " + \             # <<<<<<<<<<<<<<
 *                             str(node_idx2) + " " + \
 *                             str(node_idx3) + " " + \
 */
            __pyx_t_1 = PyNumber_Add(__pyx_t_13, __pyx_kp_s_); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "IBD\GenotypePairModel.pyx":396
 *                             print str(snp_idx) + " " + \
 *                             str(node_idx1) + " " + \
 *                             str(node_idx2) + " " + \             # <<<<<<<<<<<<<<
 *                             str(node_idx3) + " " + \
 *                             str(node_idx4) + " " + \
 */
            __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_node_idx2); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_13);
            __pyx_t_13 = 0;
            __pyx_t_13 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "IBD\GenotypePairModel.pyx":395
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             print str(snp_idx) + " " + \
 *                             str(node_idx1) + " " + \             # <<<<<<<<<<<<<<
 *                             str(node_idx2) + " " + \
 *                             str(node_idx3) + " " + \
 */
            __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_13); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "IBD\GenotypePairModel.pyx":396
 *                             print str(snp_idx) + " " + \
 *                             str(node_idx1) + " " + \
 *                             str(node_idx2) + " " + \             # <<<<<<<<<<<<<<
 *                             str(node_idx3) + " " + \
 *                             str(node_idx4) + " " + \
 */
            __pyx_t_13 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "IBD\GenotypePairModel.pyx":397
 *                             str(node_idx1) + " " + \
 *                             str(node_idx2) + " " + \
 *                             str(node_idx3) + " " + \             # <<<<<<<<<<<<<<
 *                             str(node_idx4) + " " + \
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 */
            __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_node_idx3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "IBD\GenotypePairModel.pyx":396
 *                             print str(snp_idx) + " " + \
 *                             str(node_idx1) + " " + \
 *                             str(node_idx2) + " " + \             # <<<<<<<<<<<<<<
 *                             str(node_idx3) + " " + \
 *                             str(node_idx4) + " " + \
 */
            __pyx_t_1 = PyNumber_Add(__pyx_t_13, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "IBD\GenotypePairModel.pyx":397
 *                             str(node_idx1) + " " + \
 *                             str(node_idx2) + " " + \
 *                             str(node_idx3) + " " + \             # <<<<<<<<<<<<<<
 *                             str(node_idx4) + " " + \
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 */
            __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "IBD\GenotypePairModel.pyx":398
 *                             str(node_idx2) + " " + \
 *                             str(node_idx3) + " " + \
 *                             str(node_idx4) + " " + \             # <<<<<<<<<<<<<<
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 *                             str(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 */
            __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_node_idx4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "IBD\GenotypePairModel.pyx":397
 *                             str(node_idx1) + " " + \
 *                             str(node_idx2) + " " + \
 *                             str(node_idx3) + " " + \             # <<<<<<<<<<<<<<
 *                             str(node_idx4) + " " + \
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 */
            __pyx_t_13 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "IBD\GenotypePairModel.pyx":398
 *                             str(node_idx2) + " " + \
 *                             str(node_idx3) + " " + \
 *                             str(node_idx4) + " " + \             # <<<<<<<<<<<<<<
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 *                             str(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 */
            __pyx_t_1 = PyNumber_Add(__pyx_t_13, __pyx_kp_s_); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "IBD\GenotypePairModel.pyx":399
 *                             str(node_idx3) + " " + \
 *                             str(node_idx4) + " " + \
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \             # <<<<<<<<<<<<<<
 *                             str(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 *                             str(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4])
 */
            __pyx_t_13 = PyFloat_FromDouble((((((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4])); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_13);
            __pyx_t_13 = 0;
            __pyx_t_13 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "IBD\GenotypePairModel.pyx":398
 *                             str(node_idx2) + " " + \
 *                             str(node_idx3) + " " + \
 *                             str(node_idx4) + " " + \             # <<<<<<<<<<<<<<
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 *                             str(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 */
            __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_13); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "IBD\GenotypePairModel.pyx":399
 *                             str(node_idx3) + " " + \
 *                             str(node_idx4) + " " + \
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \             # <<<<<<<<<<<<<<
 *                             str(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 *                             str(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4])
 */
            __pyx_t_13 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "IBD\GenotypePairModel.pyx":400
 *                             str(node_idx4) + " " + \
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 *                             str(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \             # <<<<<<<<<<<<<<
 *                             str(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4])
 * 
 */
            __pyx_t_2 = PyFloat_FromDouble((((((__pyx_v_self->_backward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "IBD\GenotypePairModel.pyx":399
 *                             str(node_idx3) + " " + \
 *                             str(node_idx4) + " " + \
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \             # <<<<<<<<<<<<<<
 *                             str(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 *                             str(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4])
 */
            __pyx_t_1 = PyNumber_Add(__pyx_t_13, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "IBD\GenotypePairModel.pyx":400
 *                             str(node_idx4) + " " + \
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 *                             str(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \             # <<<<<<<<<<<<<<
 *                             str(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4])
 * 
 */
            __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "IBD\GenotypePairModel.pyx":401
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 *                             str(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 *                             str(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4])             # <<<<<<<<<<<<<<
 * 
 *     def get_ems_probs(self):
 */
            __pyx_t_1 = PyFloat_FromDouble((((((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "IBD\GenotypePairModel.pyx":400
 *                             str(node_idx4) + " " + \
 *                             str(self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \
 *                             str(self._backward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]) + " " + \             # <<<<<<<<<<<<<<
 *                             str(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4])
 * 
 */
            __pyx_t_13 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__Pyx_PrintOne(0, __pyx_t_13) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
        }
      }
    }
  }

  /* "IBD\GenotypePairModel.pyx":388
 *         return self.anc_trans_prob(other_gpm) * self.ibd_trans_prob(other_gpm)
 * 
 *     cpdef print_inner_prob(self):             # <<<<<<<<<<<<<<
 *         for snp_idx in range(self._m1._snp_num):
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.print_inner_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_23print_inner_prob(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_23print_inner_prob(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_inner_prob (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_22print_inner_prob(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_22print_inner_prob(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("print_inner_prob", 0);
  __Pyx_TraceCall("print_inner_prob", __pyx_f[0], 388);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self->__pyx_base.__pyx_vtab)->print_inner_prob(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.print_inner_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":403
 *                             str(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4])
 * 
 *     def get_ems_probs(self):             # <<<<<<<<<<<<<<
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_25get_ems_probs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_25get_ems_probs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ems_probs (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_24get_ems_probs(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_24get_ems_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_v_res = 0;
  int __pyx_v_snp_idx;
  int __pyx_v_node_idx1;
  int __pyx_v_node_idx2;
  int __pyx_v_node_idx3;
  int __pyx_v_node_idx4;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("get_ems_probs", 0);
  __Pyx_TraceCall("get_ems_probs", __pyx_f[0], 403);

  /* "IBD\GenotypePairModel.pyx":404
 * 
 *     def get_ems_probs(self):
 *         cdef list res = []             # <<<<<<<<<<<<<<
 *         for snp_idx in range(self._m1._snp_num):
 *             res.append({})
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":405
 *     def get_ems_probs(self):
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):             # <<<<<<<<<<<<<<
 *             res.append({})
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 */
  __pyx_t_2 = __pyx_v_self->_m1->_snp_num;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_snp_idx = __pyx_t_3;

    /* "IBD\GenotypePairModel.pyx":406
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):
 *             res.append({})             # <<<<<<<<<<<<<<
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "IBD\GenotypePairModel.pyx":407
 *         for snp_idx in range(self._m1._snp_num):
 *             res.append({})
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 */
    __pyx_t_5 = (__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_node_idx1 = __pyx_t_6;

      /* "IBD\GenotypePairModel.pyx":408
 *             res.append({})
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 */
      __pyx_t_7 = (__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx]);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_node_idx2 = __pyx_t_8;

        /* "IBD\GenotypePairModel.pyx":409
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             res[snp_idx][(node_idx1,node_idx2,node_idx3,node_idx4)] = self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 */
        __pyx_t_9 = (__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]);
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_node_idx3 = __pyx_t_10;

          /* "IBD\GenotypePairModel.pyx":410
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                             res[snp_idx][(node_idx1,node_idx2,node_idx3,node_idx4)] = self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 *         return res
 */
          __pyx_t_11 = (__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]);
          for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
            __pyx_v_node_idx4 = __pyx_t_12;

            /* "IBD\GenotypePairModel.pyx":411
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             res[snp_idx][(node_idx1,node_idx2,node_idx3,node_idx4)] = self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
            __pyx_t_1 = PyFloat_FromDouble((((((__pyx_v_self->_emission_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_13 = __Pyx_GetItemInt_List(__pyx_v_res, __pyx_v_snp_idx, int, 1, __Pyx_PyInt_From_int, 1, 1, 0); if (unlikely(__pyx_t_13 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_node_idx1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_node_idx2); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_node_idx3); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_node_idx4); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyTuple_New(4); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_18);
            PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_15);
            PyTuple_SET_ITEM(__pyx_t_18, 2, __pyx_t_16);
            __Pyx_GIVEREF(__pyx_t_16);
            PyTuple_SET_ITEM(__pyx_t_18, 3, __pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_17);
            __pyx_t_14 = 0;
            __pyx_t_15 = 0;
            __pyx_t_16 = 0;
            __pyx_t_17 = 0;
            if (unlikely(PyObject_SetItem(__pyx_t_13, __pyx_t_18, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
        }
      }
    }
  }

  /* "IBD\GenotypePairModel.pyx":412
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             res[snp_idx][(node_idx1,node_idx2,node_idx3,node_idx4)] = self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def get_forward_probs(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "IBD\GenotypePairModel.pyx":403
 *                             str(self._emission_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4])
 * 
 *     def get_ems_probs(self):             # <<<<<<<<<<<<<<
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.get_ems_probs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":414
 *         return res
 * 
 *     def get_forward_probs(self):             # <<<<<<<<<<<<<<
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_27get_forward_probs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_27get_forward_probs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_forward_probs (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_26get_forward_probs(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_26get_forward_probs(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_v_res = 0;
  int __pyx_v_snp_idx;
  int __pyx_v_node_idx1;
  int __pyx_v_node_idx2;
  int __pyx_v_node_idx3;
  int __pyx_v_node_idx4;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("get_forward_probs", 0);
  __Pyx_TraceCall("get_forward_probs", __pyx_f[0], 414);

  /* "IBD\GenotypePairModel.pyx":415
 * 
 *     def get_forward_probs(self):
 *         cdef list res = []             # <<<<<<<<<<<<<<
 *         for snp_idx in range(self._m1._snp_num):
 *             res.append({})
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":416
 *     def get_forward_probs(self):
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):             # <<<<<<<<<<<<<<
 *             res.append({})
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 */
  __pyx_t_2 = __pyx_v_self->_m1->_snp_num;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_snp_idx = __pyx_t_3;

    /* "IBD\GenotypePairModel.pyx":417
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):
 *             res.append({})             # <<<<<<<<<<<<<<
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "IBD\GenotypePairModel.pyx":418
 *         for snp_idx in range(self._m1._snp_num):
 *             res.append({})
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 */
    __pyx_t_5 = (__pyx_v_self->_m1->_layer_state_nums[__pyx_v_snp_idx]);
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_node_idx1 = __pyx_t_6;

      /* "IBD\GenotypePairModel.pyx":419
 *             res.append({})
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 */
      __pyx_t_7 = (__pyx_v_self->_m2->_layer_state_nums[__pyx_v_snp_idx]);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_node_idx2 = __pyx_t_8;

        /* "IBD\GenotypePairModel.pyx":420
 *             for node_idx1 in range(self._m1._layer_state_nums[snp_idx]):
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             res[snp_idx][(node_idx1,node_idx2,node_idx3,node_idx4)] = self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 */
        __pyx_t_9 = (__pyx_v_self->_m3->_layer_state_nums[__pyx_v_snp_idx]);
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_node_idx3 = __pyx_t_10;

          /* "IBD\GenotypePairModel.pyx":421
 *                 for node_idx2 in range(self._m2._layer_state_nums[snp_idx]):
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):             # <<<<<<<<<<<<<<
 *                             res[snp_idx][(node_idx1,node_idx2,node_idx3,node_idx4)] = self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 *         return res
 */
          __pyx_t_11 = (__pyx_v_self->_m4->_layer_state_nums[__pyx_v_snp_idx]);
          for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
            __pyx_v_node_idx4 = __pyx_t_12;

            /* "IBD\GenotypePairModel.pyx":422
 *                     for node_idx3 in range(self._m3._layer_state_nums[snp_idx]):
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             res[snp_idx][(node_idx1,node_idx2,node_idx3,node_idx4)] = self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
            __pyx_t_1 = PyFloat_FromDouble((((((__pyx_v_self->_forward_prob[__pyx_v_snp_idx])[__pyx_v_node_idx1])[__pyx_v_node_idx2])[__pyx_v_node_idx3])[__pyx_v_node_idx4])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_13 = __Pyx_GetItemInt_List(__pyx_v_res, __pyx_v_snp_idx, int, 1, __Pyx_PyInt_From_int, 1, 1, 0); if (unlikely(__pyx_t_13 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_node_idx1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_node_idx2); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_node_idx3); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_node_idx4); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_18 = PyTuple_New(4); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_18);
            PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_15);
            PyTuple_SET_ITEM(__pyx_t_18, 2, __pyx_t_16);
            __Pyx_GIVEREF(__pyx_t_16);
            PyTuple_SET_ITEM(__pyx_t_18, 3, __pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_17);
            __pyx_t_14 = 0;
            __pyx_t_15 = 0;
            __pyx_t_16 = 0;
            __pyx_t_17 = 0;
            if (unlikely(PyObject_SetItem(__pyx_t_13, __pyx_t_18, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
        }
      }
    }
  }

  /* "IBD\GenotypePairModel.pyx":423
 *                         for node_idx4 in range(self._m4._layer_state_nums[snp_idx]):
 *                             res[snp_idx][(node_idx1,node_idx2,node_idx3,node_idx4)] = self._forward_prob[snp_idx][node_idx1][node_idx2][node_idx3][node_idx4]
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def get_scale_factors(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "IBD\GenotypePairModel.pyx":414
 *         return res
 * 
 *     def get_forward_probs(self):             # <<<<<<<<<<<<<<
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.get_forward_probs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pyx":425
 *         return res
 * 
 *     def get_scale_factors(self):             # <<<<<<<<<<<<<<
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_29get_scale_factors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_29get_scale_factors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scale_factors (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_28get_scale_factors(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_28get_scale_factors(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_v_res = 0;
  int __pyx_v_snp_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("get_scale_factors", 0);
  __Pyx_TraceCall("get_scale_factors", __pyx_f[0], 425);

  /* "IBD\GenotypePairModel.pyx":426
 * 
 *     def get_scale_factors(self):
 *         cdef list res = []             # <<<<<<<<<<<<<<
 *         for snp_idx in range(self._m1._snp_num):
 *             res.append(self._scale_factor[snp_idx])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":427
 *     def get_scale_factors(self):
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):             # <<<<<<<<<<<<<<
 *             res.append(self._scale_factor[snp_idx])
 *         return res
 */
  __pyx_t_2 = __pyx_v_self->_m1->_snp_num;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_snp_idx = __pyx_t_3;

    /* "IBD\GenotypePairModel.pyx":428
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):
 *             res.append(self._scale_factor[snp_idx])             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->_scale_factor[__pyx_v_snp_idx])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_res, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "IBD\GenotypePairModel.pyx":429
 *         for snp_idx in range(self._m1._snp_num):
 *             res.append(self._scale_factor[snp_idx])
 *         return res             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "IBD\GenotypePairModel.pyx":425
 *         return res
 * 
 *     def get_scale_factors(self):             # <<<<<<<<<<<<<<
 *         cdef list res = []
 *         for snp_idx in range(self._m1._snp_num):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel.get_scale_factors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pxd":25
 * cdef class GenotypePairModel(InnerModel):
 * 
 *     cdef public bool _phased             # <<<<<<<<<<<<<<
 *     # the ibd state of the model (0 - no IBD, 1 - IBD between 1st and 3rd chromosomes)
 *     cdef public int _ibd
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased___get__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 25);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_phased); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel._phased.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased_2__set__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 25);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_phased = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel._phased.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pxd":27
 *     cdef public bool _phased
 *     # the ibd state of the model (0 - no IBD, 1 - IBD between 1st and 3rd chromosomes)
 *     cdef public int _ibd             # <<<<<<<<<<<<<<
 * 
 *     cdef public int _g
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd___get__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 27);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_ibd); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel._ibd.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd_2__set__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 27);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_ibd = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel._ibd.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pxd":29
 *     cdef public int _ibd
 * 
 *     cdef public int _g             # <<<<<<<<<<<<<<
 * 
 *     cdef public LDModel _m1
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_2_g_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_2_g_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_2_g___get__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_2_g___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 29);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_g); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel._g.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_2_g_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_2_g_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_2_g_2__set__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_2_g_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 29);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_g = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel._g.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pxd":31
 *     cdef public int _g
 * 
 *     cdef public LDModel _m1             # <<<<<<<<<<<<<<
 *     cdef public LDModel _m2
 *     cdef public LDModel _m3
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1___get__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 31);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_m1));
  __pyx_r = ((PyObject *)__pyx_v_self->_m1);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_2__set__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 31);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3IBD_7LDModel_LDModel))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_m1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m1));
  __pyx_v_self->_m1 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel._m1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_4__del__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_4__del__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 31);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_m1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m1));
  __pyx_v_self->_m1 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pxd":32
 * 
 *     cdef public LDModel _m1
 *     cdef public LDModel _m2             # <<<<<<<<<<<<<<
 *     cdef public LDModel _m3
 *     cdef public LDModel _m4
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2___get__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 32);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_m2));
  __pyx_r = ((PyObject *)__pyx_v_self->_m2);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_2__set__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 32);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3IBD_7LDModel_LDModel))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_m2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m2));
  __pyx_v_self->_m2 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel._m2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_4__del__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_4__del__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 32);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_m2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m2));
  __pyx_v_self->_m2 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pxd":33
 *     cdef public LDModel _m1
 *     cdef public LDModel _m2
 *     cdef public LDModel _m3             # <<<<<<<<<<<<<<
 *     cdef public LDModel _m4
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3___get__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 33);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_m3));
  __pyx_r = ((PyObject *)__pyx_v_self->_m3);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_2__set__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 33);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3IBD_7LDModel_LDModel))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_m3);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m3));
  __pyx_v_self->_m3 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel._m3.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_4__del__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_4__del__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 33);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_m3);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m3));
  __pyx_v_self->_m3 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pxd":34
 *     cdef public LDModel _m2
 *     cdef public LDModel _m3
 *     cdef public LDModel _m4             # <<<<<<<<<<<<<<
 * 
 *     cdef double *****_forward_prob
 */

/* Python wrapper */
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4___get__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4___get__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 34);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_m4));
  __pyx_r = ((PyObject *)__pyx_v_self->_m4);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_2__set__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_2__set__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 34);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_3IBD_7LDModel_LDModel))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_m4);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m4));
  __pyx_v_self->_m4 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("IBD.GenotypePairModel.GenotypePairModel._m4.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_4__del__(((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_4__del__(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[1], 34);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_m4);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_m4));
  __pyx_v_self->_m4 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "TestSet.pxd":35
 * cdef class GenotypePair(TestSet):
 * 
 *     cdef inline bool chr1(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[0][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr1(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("chr1", 0);
  __Pyx_TraceCall("chr1", __pyx_f[2], 35);

  /* "TestSet.pxd":36
 * 
 *     cdef inline bool chr1(self, snp_idx):
 *         return self._haplos[0][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr2(self, snp_idx):
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[0])[__pyx_t_1]);
  goto __pyx_L0;

  /* "TestSet.pxd":35
 * cdef class GenotypePair(TestSet):
 * 
 *     cdef inline bool chr1(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[0][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.GenotypePair.chr1", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "TestSet.pxd":38
 *         return self._haplos[0][snp_idx]
 * 
 *     cdef inline bool chr2(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[1][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr2(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("chr2", 0);
  __Pyx_TraceCall("chr2", __pyx_f[2], 38);

  /* "TestSet.pxd":39
 * 
 *     cdef inline bool chr2(self, snp_idx):
 *         return self._haplos[1][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr3(self, snp_idx):
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[1])[__pyx_t_1]);
  goto __pyx_L0;

  /* "TestSet.pxd":38
 *         return self._haplos[0][snp_idx]
 * 
 *     cdef inline bool chr2(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[1][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.GenotypePair.chr2", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "TestSet.pxd":41
 *         return self._haplos[1][snp_idx]
 * 
 *     cdef inline bool chr3(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[2][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr3(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("chr3", 0);
  __Pyx_TraceCall("chr3", __pyx_f[2], 41);

  /* "TestSet.pxd":42
 * 
 *     cdef inline bool chr3(self, snp_idx):
 *         return self._haplos[2][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr4(self, snp_idx):
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[2])[__pyx_t_1]);
  goto __pyx_L0;

  /* "TestSet.pxd":41
 *         return self._haplos[1][snp_idx]
 * 
 *     cdef inline bool chr3(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[2][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.GenotypePair.chr3", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "TestSet.pxd":44
 *         return self._haplos[2][snp_idx]
 * 
 *     cdef inline bool chr4(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[3][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_12GenotypePair_chr4(struct __pyx_obj_3IBD_7TestSet_GenotypePair *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("chr4", 0);
  __Pyx_TraceCall("chr4", __pyx_f[2], 44);

  /* "TestSet.pxd":45
 * 
 *     cdef inline bool chr4(self, snp_idx):
 *         return self._haplos[3][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=*)
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[3])[__pyx_t_1]);
  goto __pyx_L0;

  /* "TestSet.pxd":44
 *         return self._haplos[2][snp_idx]
 * 
 *     cdef inline bool chr4(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[3][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.GenotypePair.chr4", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "TestSet.pxd":53
 * cdef class Genotype(TestSet):
 * 
 *     cdef inline bool chr1(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[0][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_8Genotype_chr1(struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("chr1", 0);
  __Pyx_TraceCall("chr1", __pyx_f[2], 53);

  /* "TestSet.pxd":54
 * 
 *     cdef inline bool chr1(self, snp_idx):
 *         return self._haplos[0][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool chr2(self, snp_idx):
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[0])[__pyx_t_1]);
  goto __pyx_L0;

  /* "TestSet.pxd":53
 * cdef class Genotype(TestSet):
 * 
 *     cdef inline bool chr1(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[0][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.Genotype.chr1", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "TestSet.pxd":56
 *         return self._haplos[0][snp_idx]
 * 
 *     cdef inline bool chr2(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[1][snp_idx]
 * 
 */

static CYTHON_INLINE bool __pyx_f_3IBD_7TestSet_8Genotype_chr2(struct __pyx_obj_3IBD_7TestSet_Genotype *__pyx_v_self, PyObject *__pyx_v_snp_idx) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("chr2", 0);
  __Pyx_TraceCall("chr2", __pyx_f[2], 56);

  /* "TestSet.pxd":57
 * 
 *     cdef inline bool chr2(self, snp_idx):
 *         return self._haplos[1][snp_idx]             # <<<<<<<<<<<<<<
 * 
 *     cpdef generate_random_haps_inplace(self, LDModel m, int snp_num=*)
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_snp_idx); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_v_self->__pyx_base._haplos[1])[__pyx_t_1]);
  goto __pyx_L0;

  /* "TestSet.pxd":56
 *         return self._haplos[0][snp_idx]
 * 
 *     cdef inline bool chr2(self, snp_idx):             # <<<<<<<<<<<<<<
 *         return self._haplos[1][snp_idx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("IBD.TestSet.Genotype.chr2", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "IBD\GenotypePairModel.pxd":17
 * from libcpp cimport bool
 * 
 * cdef inline double single_anc_trans_prob(LDModel first, LDModel second):             # <<<<<<<<<<<<<<
 *     if first._anc == second._anc:
 *         return 1
 */

static CYTHON_INLINE double __pyx_f_3IBD_17GenotypePairModel_single_anc_trans_prob(struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_first, struct __pyx_obj_3IBD_7LDModel_LDModel *__pyx_v_second) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("single_anc_trans_prob", 0);
  __Pyx_TraceCall("single_anc_trans_prob", __pyx_f[1], 17);

  /* "IBD\GenotypePairModel.pxd":18
 * 
 * cdef inline double single_anc_trans_prob(LDModel first, LDModel second):
 *     if first._anc == second._anc:             # <<<<<<<<<<<<<<
 *         return 1
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_first->_anc == __pyx_v_second->_anc) != 0);
  if (__pyx_t_1) {

    /* "IBD\GenotypePairModel.pxd":19
 * cdef inline double single_anc_trans_prob(LDModel first, LDModel second):
 *     if first._anc == second._anc:
 *         return 1             # <<<<<<<<<<<<<<
 *     else:
 *         return first._alpha * second._alpha
 */
    __pyx_r = 1.0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "IBD\GenotypePairModel.pxd":21
 *         return 1
 *     else:
 *         return first._alpha * second._alpha             # <<<<<<<<<<<<<<
 * 
 * cdef class GenotypePairModel(InnerModel):
 */
    __pyx_r = (__pyx_v_first->_alpha * __pyx_v_second->_alpha);
    goto __pyx_L0;
  }

  /* "IBD\GenotypePairModel.pxd":17
 * from libcpp cimport bool
 * 
 * cdef inline double single_anc_trans_prob(LDModel first, LDModel second):             # <<<<<<<<<<<<<<
 *     if first._anc == second._anc:
 *         return 1
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_3IBD_17GenotypePairModel_GenotypePairModel __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel;

static PyObject *__pyx_tp_new_3IBD_17GenotypePairModel_GenotypePairModel(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *p;
  PyObject *o = __pyx_ptype_3IBD_10InnerModel_InnerModel->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_3IBD_10InnerModel_InnerModel*)__pyx_vtabptr_3IBD_17GenotypePairModel_GenotypePairModel;
  p->_m1 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None); Py_INCREF(Py_None);
  p->_m2 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None); Py_INCREF(Py_None);
  p->_m3 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None); Py_INCREF(Py_None);
  p->_m4 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3IBD_17GenotypePairModel_GenotypePairModel(PyObject *o) {
  struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *p = (struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_m1);
  Py_CLEAR(p->_m2);
  Py_CLEAR(p->_m3);
  Py_CLEAR(p->_m4);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_3IBD_10InnerModel_InnerModel)) __pyx_ptype_3IBD_10InnerModel_InnerModel->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_3IBD_17GenotypePairModel_GenotypePairModel);
}

static int __pyx_tp_traverse_3IBD_17GenotypePairModel_GenotypePairModel(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *p = (struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)o;
  e = ((likely(__pyx_ptype_3IBD_10InnerModel_InnerModel)) ? ((__pyx_ptype_3IBD_10InnerModel_InnerModel->tp_traverse) ? __pyx_ptype_3IBD_10InnerModel_InnerModel->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_3IBD_17GenotypePairModel_GenotypePairModel)); if (e) return e;
  if (p->_m1) {
    e = (*v)(((PyObject*)p->_m1), a); if (e) return e;
  }
  if (p->_m2) {
    e = (*v)(((PyObject*)p->_m2), a); if (e) return e;
  }
  if (p->_m3) {
    e = (*v)(((PyObject*)p->_m3), a); if (e) return e;
  }
  if (p->_m4) {
    e = (*v)(((PyObject*)p->_m4), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3IBD_17GenotypePairModel_GenotypePairModel(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *p = (struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *)o;
  if (likely(__pyx_ptype_3IBD_10InnerModel_InnerModel)) { if (__pyx_ptype_3IBD_10InnerModel_InnerModel->tp_clear) __pyx_ptype_3IBD_10InnerModel_InnerModel->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_3IBD_17GenotypePairModel_GenotypePairModel);
  tmp = ((PyObject*)p->_m1);
  p->_m1 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_m2);
  p->_m2 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_m3);
  p->_m3 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_m4);
  p->_m4 = ((struct __pyx_obj_3IBD_7LDModel_LDModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__phased(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased_1__get__(o);
}

static int __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__phased(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_7_phased_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__ibd(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd_1__get__(o);
}

static int __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__ibd(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_4_ibd_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__g(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_2_g_1__get__(o);
}

static int __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__g(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_2_g_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__m1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_1__get__(o);
}

static int __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__m1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_3__set__(o, v);
  }
  else {
    return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m1_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__m2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_1__get__(o);
}

static int __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__m2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_3__set__(o, v);
  }
  else {
    return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m2_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__m3(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_1__get__(o);
}

static int __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__m3(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_3__set__(o, v);
  }
  else {
    return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m3_5__del__(o);
  }
}

static PyObject *__pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__m4(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_1__get__(o);
}

static int __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__m4(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_3__set__(o, v);
  }
  else {
    return __pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3_m4_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_3IBD_17GenotypePairModel_GenotypePairModel[] = {
  {__Pyx_NAMESTR("slice_from_model"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_3slice_from_model, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("alloc_mem"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_5alloc_mem, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("free_mem"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_7free_mem, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("calc_emission_probs"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_9calc_emission_probs, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("calc_forward_probs"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_11calc_forward_probs, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("calc_backward_probs"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_13calc_backward_probs, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("calc_likelihood"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_15calc_likelihood, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("ibd_trans_prob"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_17ibd_trans_prob, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("anc_trans_prob"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_19anc_trans_prob, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("trans_prob"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_21trans_prob, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("print_inner_prob"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_23print_inner_prob, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_ems_probs"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_25get_ems_probs, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_forward_probs"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_27get_forward_probs, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_scale_factors"), (PyCFunction)__pyx_pw_3IBD_17GenotypePairModel_17GenotypePairModel_29get_scale_factors, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3IBD_17GenotypePairModel_GenotypePairModel[] = {
  {(char *)"_phased", __pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__phased, __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__phased, 0, 0},
  {(char *)"_ibd", __pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__ibd, __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__ibd, 0, 0},
  {(char *)"_g", __pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__g, __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__g, 0, 0},
  {(char *)"_m1", __pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__m1, __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__m1, 0, 0},
  {(char *)"_m2", __pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__m2, __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__m2, 0, 0},
  {(char *)"_m3", __pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__m3, __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__m3, 0, 0},
  {(char *)"_m4", __pyx_getprop_3IBD_17GenotypePairModel_17GenotypePairModel__m4, __pyx_setprop_3IBD_17GenotypePairModel_17GenotypePairModel__m4, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3IBD_17GenotypePairModel_GenotypePairModel = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("IBD.GenotypePairModel.GenotypePairModel"), /*tp_name*/
  sizeof(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3IBD_17GenotypePairModel_GenotypePairModel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3IBD_17GenotypePairModel_GenotypePairModel, /*tp_traverse*/
  __pyx_tp_clear_3IBD_17GenotypePairModel_GenotypePairModel, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3IBD_17GenotypePairModel_GenotypePairModel, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3IBD_17GenotypePairModel_GenotypePairModel, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3IBD_17GenotypePairModel_GenotypePairModel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("GenotypePairModel"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_GenotypePair, __pyx_k_GenotypePair, sizeof(__pyx_k_GenotypePair), 0, 0, 1, 1},
  {&__pyx_n_s_InnerModel, __pyx_k_InnerModel, sizeof(__pyx_k_InnerModel), 0, 0, 1, 1},
  {&__pyx_n_s_LDModel, __pyx_k_LDModel, sizeof(__pyx_k_LDModel), 0, 0, 1, 1},
  {&__pyx_n_s_TestSet, __pyx_k_TestSet, sizeof(__pyx_k_TestSet), 0, 0, 1, 1},
  {&__pyx_n_s_alloc_mem, __pyx_k_alloc_mem, sizeof(__pyx_k_alloc_mem), 0, 0, 1, 1},
  {&__pyx_n_s_anc_trans_prob, __pyx_k_anc_trans_prob, sizeof(__pyx_k_anc_trans_prob), 0, 0, 1, 1},
  {&__pyx_n_s_calc_backward_probs, __pyx_k_calc_backward_probs, sizeof(__pyx_k_calc_backward_probs), 0, 0, 1, 1},
  {&__pyx_n_s_calc_emission_probs, __pyx_k_calc_emission_probs, sizeof(__pyx_k_calc_emission_probs), 0, 0, 1, 1},
  {&__pyx_n_s_calc_forward_probs, __pyx_k_calc_forward_probs, sizeof(__pyx_k_calc_forward_probs), 0, 0, 1, 1},
  {&__pyx_n_s_calc_likelihood, __pyx_k_calc_likelihood, sizeof(__pyx_k_calc_likelihood), 0, 0, 1, 1},
  {&__pyx_n_s_combinations_with_replacement, __pyx_k_combinations_with_replacement, sizeof(__pyx_k_combinations_with_replacement), 0, 0, 1, 1},
  {&__pyx_n_s_emission_prob, __pyx_k_emission_prob, sizeof(__pyx_k_emission_prob), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_free_mem, __pyx_k_free_mem, sizeof(__pyx_k_free_mem), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_ibd, __pyx_k_ibd, sizeof(__pyx_k_ibd), 0, 0, 1, 1},
  {&__pyx_n_s_ibd_trans_prob, __pyx_k_ibd_trans_prob, sizeof(__pyx_k_ibd_trans_prob), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_islice, __pyx_k_islice, sizeof(__pyx_k_islice), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_layer_state_num, __pyx_k_layer_state_num, sizeof(__pyx_k_layer_state_num), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_m1, __pyx_k_m1, sizeof(__pyx_k_m1), 0, 0, 1, 1},
  {&__pyx_n_s_m2, __pyx_k_m2, sizeof(__pyx_k_m2), 0, 0, 1, 1},
  {&__pyx_n_s_m3, __pyx_k_m3, sizeof(__pyx_k_m3), 0, 0, 1, 1},
  {&__pyx_n_s_m4, __pyx_k_m4, sizeof(__pyx_k_m4), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_obs_data, __pyx_k_obs_data, sizeof(__pyx_k_obs_data), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_phased, __pyx_k_phased, sizeof(__pyx_k_phased), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_print_inner_prob, __pyx_k_print_inner_prob, sizeof(__pyx_k_print_inner_prob), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reversed, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
  {&__pyx_n_s_slice_from_model, __pyx_k_slice_from_model, sizeof(__pyx_k_slice_from_model), 0, 0, 1, 1},
  {&__pyx_n_s_snp_num, __pyx_k_snp_num, sizeof(__pyx_k_snp_num), 0, 0, 1, 1},
  {&__pyx_n_s_start_snp, __pyx_k_start_snp, sizeof(__pyx_k_start_snp), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_trans_prob, __pyx_k_trans_prob, sizeof(__pyx_k_trans_prob), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_reversed = __Pyx_GetBuiltinName(__pyx_n_s_reversed); if (!__pyx_builtin_reversed) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initGenotypePairModel(void); /*proto*/
PyMODINIT_FUNC initGenotypePairModel(void)
#else
PyMODINIT_FUNC PyInit_GenotypePairModel(void); /*proto*/
PyMODINIT_FUNC PyInit_GenotypePairModel(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_GenotypePairModel(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("GenotypePairModel"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_IBD__GenotypePairModel) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "IBD.GenotypePairModel")) {
      if (unlikely(PyDict_SetItemString(modules, "IBD.GenotypePairModel", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_ptype_3IBD_10InnerModel_InnerModel = __Pyx_ImportType("IBD.InnerModel", "InnerModel", sizeof(struct __pyx_obj_3IBD_10InnerModel_InnerModel), 1); if (unlikely(!__pyx_ptype_3IBD_10InnerModel_InnerModel)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_3IBD_10InnerModel_InnerModel = (struct __pyx_vtabstruct_3IBD_10InnerModel_InnerModel*)__Pyx_GetVtable(__pyx_ptype_3IBD_10InnerModel_InnerModel->tp_dict); if (unlikely(!__pyx_vtabptr_3IBD_10InnerModel_InnerModel)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_3IBD_17GenotypePairModel_GenotypePairModel = &__pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.__pyx_base = *__pyx_vtabptr_3IBD_10InnerModel_InnerModel;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.__pyx_base.slice_from_model = (struct __pyx_obj_3IBD_10InnerModel_InnerModel *(*)(struct __pyx_obj_3IBD_10InnerModel_InnerModel *, int, int, int __pyx_skip_dispatch))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_slice_from_model;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.__pyx_base.trans_prob = (double (*)(struct __pyx_obj_3IBD_10InnerModel_InnerModel *, struct __pyx_obj_3IBD_10InnerModel_InnerModel *, int __pyx_skip_dispatch))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_trans_prob;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.__pyx_base.calc_likelihood = (double (*)(struct __pyx_obj_3IBD_10InnerModel_InnerModel *, struct __pyx_obj_3IBD_7TestSet_TestSet *, int __pyx_skip_dispatch, struct __pyx_opt_args_3IBD_10InnerModel_10InnerModel_calc_likelihood *__pyx_optional_args))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_calc_likelihood;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.alloc_mem = (PyObject *(*)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_alloc_mem;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.free_mem = (PyObject *(*)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_free_mem;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.calc_emission_probs = (PyObject *(*)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, struct __pyx_obj_3IBD_7TestSet_GenotypePair *, int __pyx_skip_dispatch))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_calc_emission_probs;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.calc_forward_probs = (PyObject *(*)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_calc_forward_probs;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.calc_backward_probs = (PyObject *(*)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_calc_backward_probs;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.rescale_forward = (PyObject *(*)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_rescale_forward;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.rescale_backward = (PyObject *(*)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_rescale_backward;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.ibd_trans_prob = (double (*)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_ibd_trans_prob;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.anc_trans_prob = (double (*)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_anc_trans_prob;
  __pyx_vtable_3IBD_17GenotypePairModel_GenotypePairModel.print_inner_prob = (PyObject *(*)(struct __pyx_obj_3IBD_17GenotypePairModel_GenotypePairModel *, int __pyx_skip_dispatch))__pyx_f_3IBD_17GenotypePairModel_17GenotypePairModel_print_inner_prob;
  __pyx_type_3IBD_17GenotypePairModel_GenotypePairModel.tp_base = __pyx_ptype_3IBD_10InnerModel_InnerModel;
  if (PyType_Ready(&__pyx_type_3IBD_17GenotypePairModel_GenotypePairModel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3IBD_17GenotypePairModel_GenotypePairModel.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_3IBD_17GenotypePairModel_GenotypePairModel.tp_dict, __pyx_vtabptr_3IBD_17GenotypePairModel_GenotypePairModel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "GenotypePairModel", (PyObject *)&__pyx_type_3IBD_17GenotypePairModel_GenotypePairModel) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3IBD_17GenotypePairModel_GenotypePairModel = &__pyx_type_3IBD_17GenotypePairModel_GenotypePairModel;
  /*--- Type import code ---*/
  __pyx_ptype_3IBD_10GeneticMap_GeneticMap = __Pyx_ImportType("IBD.GeneticMap", "GeneticMap", sizeof(struct __pyx_obj_3IBD_10GeneticMap_GeneticMap), 1); if (unlikely(!__pyx_ptype_3IBD_10GeneticMap_GeneticMap)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_3IBD_10GeneticMap_GeneticMap = (struct __pyx_vtabstruct_3IBD_10GeneticMap_GeneticMap*)__Pyx_GetVtable(__pyx_ptype_3IBD_10GeneticMap_GeneticMap->tp_dict); if (unlikely(!__pyx_vtabptr_3IBD_10GeneticMap_GeneticMap)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3IBD_7LDModel_LDModel = __Pyx_ImportType("IBD.LDModel", "LDModel", sizeof(struct __pyx_obj_3IBD_7LDModel_LDModel), 1); if (unlikely(!__pyx_ptype_3IBD_7LDModel_LDModel)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_3IBD_7LDModel_LDModel = (struct __pyx_vtabstruct_3IBD_7LDModel_LDModel*)__Pyx_GetVtable(__pyx_ptype_3IBD_7LDModel_LDModel->tp_dict); if (unlikely(!__pyx_vtabptr_3IBD_7LDModel_LDModel)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3IBD_7TestSet_TestSet = __Pyx_ImportType("IBD.TestSet", "TestSet", sizeof(struct __pyx_obj_3IBD_7TestSet_TestSet), 1); if (unlikely(!__pyx_ptype_3IBD_7TestSet_TestSet)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_3IBD_7TestSet_TestSet = (struct __pyx_vtabstruct_3IBD_7TestSet_TestSet*)__Pyx_GetVtable(__pyx_ptype_3IBD_7TestSet_TestSet->tp_dict); if (unlikely(!__pyx_vtabptr_3IBD_7TestSet_TestSet)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3IBD_7TestSet_GenotypePair = __Pyx_ImportType("IBD.TestSet", "GenotypePair", sizeof(struct __pyx_obj_3IBD_7TestSet_GenotypePair), 1); if (unlikely(!__pyx_ptype_3IBD_7TestSet_GenotypePair)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_3IBD_7TestSet_GenotypePair = (struct __pyx_vtabstruct_3IBD_7TestSet_GenotypePair*)__Pyx_GetVtable(__pyx_ptype_3IBD_7TestSet_GenotypePair->tp_dict); if (unlikely(!__pyx_vtabptr_3IBD_7TestSet_GenotypePair)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3IBD_7TestSet_Genotype = __Pyx_ImportType("IBD.TestSet", "Genotype", sizeof(struct __pyx_obj_3IBD_7TestSet_Genotype), 1); if (unlikely(!__pyx_ptype_3IBD_7TestSet_Genotype)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_3IBD_7TestSet_Genotype = (struct __pyx_vtabstruct_3IBD_7TestSet_Genotype*)__Pyx_GetVtable(__pyx_ptype_3IBD_7TestSet_Genotype->tp_dict); if (unlikely(!__pyx_vtabptr_3IBD_7TestSet_Genotype)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "IBD\GenotypePairModel.pyx":8
 * 
 * from __future__ import division
 * from InnerModel import InnerModel             # <<<<<<<<<<<<<<
 * from InnerModel cimport InnerModel
 * from TestSet import TestSet
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_InnerModel);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_InnerModel);
  __Pyx_GIVEREF(__pyx_n_s_InnerModel);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_InnerModel, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "IBD\GenotypePairModel.pyx":10
 * from InnerModel import InnerModel
 * from InnerModel cimport InnerModel
 * from TestSet import TestSet             # <<<<<<<<<<<<<<
 * from TestSet cimport TestSet
 * from TestSet import GenotypePair
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_TestSet);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_TestSet);
  __Pyx_GIVEREF(__pyx_n_s_TestSet);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_TestSet, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":12
 * from TestSet import TestSet
 * from TestSet cimport TestSet
 * from TestSet import GenotypePair             # <<<<<<<<<<<<<<
 * from TestSet cimport GenotypePair
 * from LDModel import LDModel
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_GenotypePair);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_GenotypePair);
  __Pyx_GIVEREF(__pyx_n_s_GenotypePair);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_TestSet, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "IBD\GenotypePairModel.pyx":14
 * from TestSet import GenotypePair
 * from TestSet cimport GenotypePair
 * from LDModel import LDModel             # <<<<<<<<<<<<<<
 * from LDModel cimport LDModel
 * import os
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_LDModel);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_LDModel);
  __Pyx_GIVEREF(__pyx_n_s_LDModel);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_LDModel, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":16
 * from LDModel import LDModel
 * from LDModel cimport LDModel
 * import os             # <<<<<<<<<<<<<<
 * import math
 * from libc.math cimport exp, log
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":17
 * from LDModel cimport LDModel
 * import os
 * import math             # <<<<<<<<<<<<<<
 * from libc.math cimport exp, log
 * from libc.float cimport DBL_MIN, DBL_MAX
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "IBD\GenotypePairModel.pyx":22
 * from libc.limits cimport ULONG_MAX,LONG_MIN
 * from libc.stdlib cimport malloc, free
 * from itertools import islice, combinations_with_replacement             # <<<<<<<<<<<<<<
 * from libcpp cimport bool
 * import logging
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_islice);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_islice);
  __Pyx_GIVEREF(__pyx_n_s_islice);
  __Pyx_INCREF(__pyx_n_s_combinations_with_replacement);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_combinations_with_replacement);
  __Pyx_GIVEREF(__pyx_n_s_combinations_with_replacement);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_islice); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_islice, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_combinations_with_replacement); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_combinations_with_replacement, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "IBD\GenotypePairModel.pyx":24
 * from itertools import islice, combinations_with_replacement
 * from libcpp cimport bool
 * import logging             # <<<<<<<<<<<<<<
 * #inner_forward_probs_logger = logging.getLogger('innerforwardprobs')
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "IBD\GenotypePairModel.pyx":1
 * #cython: profile=True             # <<<<<<<<<<<<<<
 * #cython: boundscheck=False
 * #cython: cdivision=True
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "IBD\GenotypePairModel.pxd":17
 * from libcpp cimport bool
 * 
 * cdef inline double single_anc_trans_prob(LDModel first, LDModel second):             # <<<<<<<<<<<<<<
 *     if first._anc == second._anc:
 *         return 1
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    __Pyx_AddTraceback("init IBD.GenotypePairModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init IBD.GenotypePairModel");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    int retval;
    PyThreadState* tstate = PyThreadState_GET();
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    (*frame)->f_lineno = firstlineno;
    tstate->use_tracing = 0;
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL);
    if (!tstate->c_profilefunc)
        retval = 1;
    else
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    return tstate->use_tracing && retval;
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;
    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;
    py_code = PyCode_New(
        0,                /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,                /*int kwonlyargcount,*/
        #endif
        0,                /*int nlocals,*/
        0,                /*int stacksize,*/
        0,                /*int flags,*/
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,      /*int firstlineno,*/
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return py_code;
}
#endif /* CYTHON_PROFILE */

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
#endif
    result = (*call)(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    Py_LeaveRecursiveCall();
#endif
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(char) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to char");
                return (char) -1;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(char)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (char) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to char");
                return (char) -1;
            }
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(char, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(char) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(char, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(char)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(char) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(char) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(char, long, PyLong_AsLong)
            } else if (sizeof(char) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(char, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
