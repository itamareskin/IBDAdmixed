
# run beagle
~/Software/phasing_pipeline/ped_to_bgl AfricanAmericans.genos.ped AfricanAmericans.genos.map > AfricanAmericans.genos.bgl
awk '{print $2,$4,"1","2"}' AfricanAmericans8.genos.map > AfricanAmericans8.genos.markers
java -Xmx3000m -jar ~/Software/beagle/beagle.jar lowmem=true unphased=AfricanAmericans.genos.bgl missing=? fastibd=true out=AfricanAmericans fastibdthreshold=1e-11
awk 'BEGIN{split("",ibd)}{split($1,a,"."); split($2,b,"."); h1=int((a[2]-3)/2); h2=int((b[2]-3)/2); p=h1","h2; v=$3-1","$4-1","$5; if (p in ibd) ibd[p]=ibd[p]";"v; else ibd[p]=v}END{for (i in ibd) print i":"ibd[i]}' AfricanAmericans.AfricanAmericans.genos.bgl.fibd > beagle.ibd.txt
export PYTHONPATH=$PYTHONPATH:~/git/ibdadmixed/lib/IBD
python ~/git/ibdadmixed/scripts/ibd_to_windows.py beagle2.ibd.txt beagle2.ibd.windows.txt

# get hap map files
python saveHapMapPlink.py ~/Data/IBDAdmixed
~/Software/phasing_pipeline/ped_to_bgl HapMap3_CEU_chr1.ped HapMap3_CEU_chr1.map > HapMap3_CEU_chr1.bgl
~/Software/phasing_pipeline/ped_to_bgl HapMap3_YRI_chr1.ped HapMap3_YRI_chr1.map > HapMap3_YRI_chr1.bgl
java -Xmx3000m -jar ~/Software/beagle.jar data=HapMap3_YRI_chr1.bgl out=HapMap
java -Xmx3000m -jar ~/Software/beagle.jar data=HapMap3_CEU_chr1.bgl out=HapMap
awk 'BEGIN{OFS="      "}{if ($5 == '1') $5=0; else {if ($5 == '2' ) $5=1;}; print}' HapMap.HapMap3_YRI_chr1.bgl.dag > HapMap.HapMap3_YRI_chr1.bgl.01.dag
awk 'BEGIN{OFS="      "}{if ($5 == '1') $5=0; else {if ($5 == '2' ) $5=1;}; print}' HapMap.HapMap3_CEU_chr1.bgl.dag > HapMap.HapMap3_CEU_chr1.bgl.01.dag
wget -v ftp://ftp.ncbi.nlm.nih.gov/hapmap/recombination/2008-03_rel22_B36/rates/genetic_map_chr1_b36.txt


# profiling
python -m cProfile -o prof.out runIBDAdmixed.py 1 1000 /home/eskin/Data/IBDAdmixed AfricanAmericans8
python /usr/local/lib/python2.7/dist-packages/RunSnakeRun-2.0.2b1-py2.7.egg/runsnakerun/runsnake.py prof.out



# trash
awk '{sum_l=0; split($1,a,":"); split(a[2],b,";"); for (i=1;i<=length(b);i++) {split(b[i],c,","); l=c[2]-c[1]; sum_l=sum_l+l;} if (sum_l > 1000) print a[1]}' AfricanAmericans4.trueibd.dat | head -100 > AfricanAmericans4.100ibdpairs.txt
awk 'BEGIN{split("",ibd)}{split($1,a,":"); p=a[1];v=a[2]; if (p in ibd) ibd[p]=ibd[p]";"v; else ibd[p]=v}END{for (i in ibd) print i":"ibd[i]}' *.dat > ibdadmixed.ibd.txt


awk 'NR==FNR{a[$1" "$2]; next}{if ($1" "$2 in a) print}' AfricanAmericans8.IBDAdmixed3.windows.dat beagle.ibd.windows.long.txt > beagle.ibd.windows.long.filt.txt

awk 'NR==FNR{pos[$4]=NR; next}{print $1,$3,pos[$6],pos[$7],$8}' AfricanAmericans8.genos.map AfricanAmericans.beagle.out.ibd > beagle4.ibd.long.txt
awk 'BEGIN{split("",ibd)}NR==FNR{pos[$4]=NR; next}{h1=$1; h2=$3; p=h1","h2; v=pos[$6]","pos[$7]","$8; if (p in ibd) ibd[p]=ibd[p]";"v; else ibd[p]=v}END{for (i in ibd) print i":"ibd[i]}' AfricanAmericans8.genos.map AfricanAmericans.beagle.out.ibd > beagle4.ibd.txt
awk 'BEGIN{FS=":"}{split($2,a,";"); split($1,b,","); for (i in a) {split(a[i],c,","); print b[1],b[2],c[1],c[2],"0"}}' AfricanAmericans8.trueibd.dat > AfricanAmericans8.trueibd.long.txt

# get lengths (in cM) of segments in trueibd file
awk 'NR==FNR{dist[NR]=$3; next;}{split($1,a,":"); split(a[2],b,","); print a[1],dist[b[2]+1]-dist[b[1]+1]}' HapMap3_CEU_chr2.map pseudo.admixed.trueibd.txt | less -S
# get ibd segments in long format for a pair of individuals
grep "40,70" psuedo.admixed.newmodel2.IBDAdmixed3.dat | awk 'BEGIN{FS=";"}{split($1,a,":"); split(a[2],b,","); print a[1]; print b[1],b[2],b[3]; for (i=2;i<NF;i++) {split($i,a,","); print a[1],a[2],a[3]}}' |  less -S
# get ibdprobs in long format for a pair of individuals
grep "33 41 " artificial.admixed.test.fix.ibdprobs.txt | awk '{for (i=3;i<NF;i++) print (i-3)*25,(i-2)*25,$i}' |  less -S

#run beagle version 4
awk 'BEGIN{OFS=" "}NR==1{$1="I"; $2="id"; print; next}{for (i=3;i<=NF;i++) {if ($i=="1") $i="A"; else $i="G"}; print;}' AfricanAmericans8.genos.bgl > AfricanAmericans8.genos.fixed.bgl
awk '{print $2,$4,"A","G"}' AfricanAmericans8.genos.map > AfricanAmericans8.genos.fixed.markers
java -jar ~/Software/beagle2vcf.jar 1 AfricanAmericans8.genos.fixed.markers AfricanAmericans8.genos.fixed.bgl 0 > AfricanAmericans8.genos.vcf
sed 's/\//\|/g' HapMap3_CEU_YRI_chr1.vcf > HapMap3_CEU_YRI_chr1.fixed.vcf
java -jar ~/Software/b4.r1099.jar gt=AfricanAmericans8.genos.vcf ref=HapMap3_CEU_YRI_chr1.fixed.vcf map=AfricanAmericans8.genos.map ibdlength=0.2 ibdlod=2 out=AfricanAmericans.beagle.out2 ibd=true impute=false
awk 'BEGIN{split("",ibd)}NR==FNR{pos[$4]=NR-1; next}{h1=$1; h2=$3; p=h1","h2; v=pos[$6]","pos[$7]","$8; if (p in ibd) ibd[p]=ibd[p]";"v; else ibd[p]=v}END{for (i in ibd) print i":"ibd[i]}' aritficial3.comp.test.genos.map aritficial3.comp.test.beagle4.out2.ibd > aritficial3.comp.test.beagle4.out2.ibd.txt



#run parente
~/IVUS/plink --noweb --file  HapMap3_CEU_chr2 --recode --transpose --out  HapMap3_CEU_chr2
~/IVUS/plink --tfile HapMap3_CEU_chr2 --noweb --freq --out HapMap3_CEU_chr2
~/Software/parente tool tped_to_ints HapMap3_CEU_chr2 HapMap3_CEU_chr2.frq hap HapMap3_CEU_chr2
~/IVUS/plink --noweb --file  aritficial.genos --recode --transpose --out  aritficial
~/IVUS/plink --tfile aritficial --noweb --freq --out aritficial
~/Software/parente tool tped_to_ints aritficial aritficial.frq geno aritficial
~/Software/parente train -w 20 -t 16 HapMap3_CEU_chr2.hap aritficial.tped aritficial
~/Software/parente infer -s 2 -t 16 aritficial aritficial.geno 20 aritficial2
awk 'NR==FNR{a[$3]=FNR; next;}{print $1,a[$2],a[$3]}' HapMap3_CEU_chr2.tped aritficial2.fblock | awk 'NR==FNR{a[$1]=$2;b[$1]=$3;next}{print $2,$3,a[$4],b[$4],$5}' - aritficial2.ibd | awk 'BEGIN{split("",ibd)}{h1=$1; h2=$2; p=h1","h2; v=$3","$4","$5; if (p in ibd) ibd[p]=ibd[p]";"v; else ibd[p]=v}END{for (i in ibd) print i":"ibd[i]}' > parente.ibd.txt

#run beagle model
java -Xmx5000m -Djava.io.tmpdir=. -jar ~/Software/beagle.3.3/beagle.jar data=HapMap3_CEU_chr2.bgl out=HapMap3_CEU_chr2.bgl scale=2.0 shift=0

#beagle phasing
java -Xmx5000m -Djava.io.tmpdir=. -jar ~/Software/beagle.3.3/beagle.jar unphased=fileA.bgl missing=? out=example scale=2.0 shift=0
awk 'NR>2{for (i=3;i<=NF;i++) printf $i" "; printf "\n"}' single.ceu.scrambled.single.ceu.scrambled.genos.bgl.phased > single.ceu.scrambled.single.ceu.scrambled.genos.bgl.phased.tmp
paste -d" " single.ceu.scrambled.genos.map single.ceu.scrambled.single.ceu.scrambled.genos.bgl.phased.tmp > single.ceu.scrambled.single.ceu.scrambled.genos.bgl.phased.tped
awk '{print $1,$2,$3,$4,$5,$6}' single.ceu.scrambled.genos.ped > single.ceu.scrambled.single.ceu.scrambled.genos.bgl.phased.tfam
~/IVUS/plink --noweb --tfile single.ceu.scrambled.single.ceu.scrambled.genos.bgl.phased --recode --out single.ceu.scrambled.genos.phased
awk '{for (i=7;i<NF;i++) printf $i-1; printf "\n"}' single.ceu.scrambled.genos.phased.ped > single.ceu.scrambled.genos.phased.dat

#run germline a lot of results (use this one):
~/Software/germline-1-5-1/germline -silent -bits 64 -min_m 0.1 -err_hom 4 -err_het 2 -map artificial.admixed.test.genos.map -w_extend
#run germline less results: 
~/Software/germline-1-5-1/germline -silent -bits 50 -min_m 2 -err_hom 0 -err_het 0 -map aritficial3.comp.test.genos.map -w_extend


#run simple simulation
python ~/Projects/ibdadmixed/scripts/simple_simulation.py HapMap3_CEU_chr2.pop HapMap3_YRI_chr2.pop HapMap3_CEU_chr2.map new.artificial.admixed -a 0.2 0.8 -n 100 -i 80 -e 0.005


#pairs
awk 'BEGIN{FS=":"}{print $1}' single.test.trueibd.txt > single.test.trueibd.pairs.txt



# run IBDAdmixed

nohup python ~/Projects/ibdadmixed/scripts/runIBDAdmixed.py HapMap3_CEU_chr2.map single.ceu.randb.genos.dat single.ceu.ceurandb.switch10 HapMap3_TSI_chr2.bgl.HapMap3_TSI_chr2.bgl.dag -k 1 -a 1 --pairs-file single.ceu.randb.trueibd.pairs.txt -p 15 --set-ibd-trans 1e-5 1 --germline-file single.ceu.randb.match --phased -m -50 --scramble -w 100 &

